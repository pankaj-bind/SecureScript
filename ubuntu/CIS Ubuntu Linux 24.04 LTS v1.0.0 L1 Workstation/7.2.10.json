{
  "type": "CMD_EXEC",
  "description": "7.2.10 Ensure local interactive user dot files access is configured",
  "info": "While the system administrator can establish secure permissions for users' \\\"dot\\\" files, the users can easily override these.\n\n - forward file specifies an email address to forward the user's mail to.\n - rhost file provides the \\\"remote authentication\\\" database for the rcp, rlogin, and rsh commands and the rcmd() function. These files bypass the standard password-based user authentication mechanism. They specify remote hosts and users that are considered trusted (i.e. are allowed to access the local system without supplying a password)\n - netrc file contains data for logging into a remote host or passing authentication to an API.\n - bash_history file keeps track of the user's commands.\n\nUser configuration files with excessive or incorrect access may enable malicious users to steal or modify other users' data or to gain another user's system privileges.",
  "solution": "Making global modifications to users' files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user dot file permissions and determine the action to be taken in accordance with site policy.\n\nThe following script will:\n\n - remove excessive permissions on dot files within interactive users' home directories\n - change ownership of dot files within interactive users' home directories to the user\n - change group ownership of dot files within interactive users' home directories to the user's primary group\n - listforward andrhost files to be investigated and manually deleted\n\n#!/usr/bin/env bash\n\n{\n   a_output2=(); a_output3=()\n   l_maxsize=\\\"1000\\\" # Maximum number of local interactive users before warning (Default 1,000)\n   l_valid_shells=\\\"^($( awk -F\\/ '$NF != \\\"nologin\\\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\\\"\n   a_user_and_home=() # Create array with local users and their home directories\n   while read -r l_local_user l_local_user_home; do # Populate array with users and user home location\n      [[ -n \\\"$l_local_user\\\" && -n \\\"$l_local_user_home\\\" ]] && a_user_and_home+=(\\\"$l_local_user:$l_local_user_home\\\")\n   done <<< \\\"$(awk -v pat=\\\"$l_valid_shells\\\" -F: '$(NF) ~ pat { print $1 \\\" \\\" $(NF-1) }' /etc/passwd)\\\"\n   l_asize=\\\"${#a_user_and_home[@]}\\\" # Here if we want to look at number of users before proceeding\n   [ \\\"${#a_user_and_home[@]}\\\" -gt \\\"$l_maxsize\\\" ] && printf '%s\\n' \\\"\\\" \\\" ** INFO **\\\" \\\n   \\\" - \\\\\\\"$l_asize\\\\\\\" Local interactive users found on the system\\\" \\\n   \\\" - This may be a long running check\\\" \\\"\\\"\n   file_access_fix()\n   {\n      a_access_out=()\n      l_max=\\\"$( printf '%o' $(( 0777 & ~$l_mask)) )\\\"\n      if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n         printf '%s\\n' \\\"\\\" \\\" - File: \\\\\\\"$l_hdfile\\\\\\\" is mode: \\\\\\\"$l_mode\\\\\\\" and should be mode: \\\\\\\"$l_max\\\\\\\" or more restrictive\\\" \\\n         \\\" Updating file: \\\\\\\"$l_hdfile\\\\\\\" to be mode: \\\\\\\"$l_max\\\\\\\" or more restrictive\\\"\n         chmod \\\"$l_change\\\" \\\"$l_hdfile\\\"\n      fi\n      if [[ ! \\\"$l_owner\\\" =~ ($l_user) ]]; then\n         printf '%s\\n' \\\"\\\" \\\" - File: \\\\\\\"$l_hdfile\\\\\\\" owned by: \\\\\\\"$l_owner\\\\\\\" and should be owned by \\\\\\\"${l_user//|/ or }\\\\\\\"\\\" \\\n         \\\" Updating file: \\\\\\\"$l_hdfile\\\\\\\" to be owned by \\\\\\\"${l_user//|/ or }\\\\\\\"\\\"\n         chown \\\"$l_user\\\" \\\"$l_hdfile\\\"\n      fi\n      if [[ ! \\\"$l_gowner\\\" =~ ($l_group) ]]; then\n         printf '%s\\n' \\\"\\\" \\\" - File: \\\\\\\"$l_hdfile\\\\\\\" group owned by: \\\\\\\"$l_gowner\\\\\\\" and should be group owned by \\\\\\\"${l_group//|/ or }\\\\\\\"\\\" \\\n         \\\" Updating file: \\\\\\\"$l_hdfile\\\\\\\" to be group owned by \\\\\\\"${l_group//|/ or }\\\\\\\"\\\"\n         chgrp \\\"$l_group\\\" \\\"$l_hdfile\\\"\n      fi\n   }\n   while IFS=: read -r l_user l_home; do\n      a_dot_file=(); a_netrc=(); a_netrc_warn=(); a_bhout=(); a_hdirout=()\n      if [ -d \\\"$l_home\\\" ]; then\n         l_group=\\\"$(id -gn \\\"$l_user\\\" | xargs)\\\";l_group=\\\"${l_group// /|}\\\"\n         while IFS= read -r -d $'\\0' l_hdfile; do\n            while read -r l_mode l_owner l_gowner; do\n               case \\\"$(basename \\\"$l_hdfile\\\")\\\" in\n                  .forward | .rhost )\n                     a_dot_file+=(\\\" - File: \\\\\\\"$l_hdfile\\\\\\\" exists\\\" \\\" Please review and manually delete this file\\\") ;;\n                  .netrc )\n                     l_mask='0177'; l_change=\\\"u-x,go-rwx\\\"; file_access_fix\n                     a_netrc_warn+=(\\\" - File: \\\\\\\"$l_hdfile\\\\\\\" exists\\\") ;;\n                  .bash_history )\n                     l_mask='0177'; l_change=\\\"u-x,go-rwx\\\"; file_access_fix ;;\n                  * )\n                     l_mask='0133'; l_change=\\\"u-x,go-wx\\\"; file_access_fix ;;\n               esac\n            done < <(stat -Lc '%#a %U %G' \\\"$l_hdfile\\\")\n         done < <(find \\\"$l_home\\\" -xdev -type f -name '.*' -print0)\n      fi\n      [ \\\"${#a_dot_file[@]}\\\" -gt 0 ] && a_output2+=(\\\" - User: \\\\\\\"$l_user\\\\\\\" Home Directory: \\\\\\\"$l_home\\\\\\\"\\\" \\\"${a_dot_file[@]}\\\")\n      [ \\\"${#a_netrc_warn[@]}\\\" -gt 0 ] && a_output3+=(\\\" - User: \\\\\\\"$l_user\\\\\\\" Home Directory: \\\\\\\"$l_home\\\\\\\"\\\" \\\"${a_netrc_warn[@]}\\\")\n   done <<< \\\"$(printf '%s\\n' \\\"${a_user_and_home[@]}\\\")\\\"\n   [ \\\"${#a_output3[@]}\\\" -gt 0 ] && printf '%s\\n' \\\"\\\" \\\" ** WARNING **\\\" \\\"${a_output3[@]}\\\" \\\"\\\"\n   [ \\\"${#a_output2[@]}\\\" -gt 0 ] && printf '%s\\n' \\\"\\\" \\\"${a_output2[@]}\\\"\n}",
  "reference": "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-171r3|03.01.02,800-171r3|03.01.04,800-171r3|03.01.05a.,800-171r3|03.08.02,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,CSF2.0|PR.AA-05,CSF2.0|PR.DS-10,CSF2.0|PR.IR-01,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO-27001-2022|A.5.3,ISO-27001-2022|A.5.10,ISO-27001-2022|A.5.15,ISO-27001-2022|A.5.33,ISO-27001-2022|A.7.7,ISO-27001-2022|A.7.10,ISO-27001-2022|A.8.2,ISO-27001-2022|A.8.3,ISO-27001-2022|A.8.18,ISO-27001-2022|A.8.20,ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
  "see_also": "https://workbench.cisecurity.org/benchmarks/18959",
  "cmd": "#!/bin/bash\n\n{\n   l_output=\\\"\\\" l_output2=\\\"\\\" l_output3=\\\"\\\"\n   l_bf=\\\"\\\" l_df=\\\"\\\" l_nf=\\\"\\\" l_hf=\\\"\\\"\n   l_valid_shells=\\\"^($( awk -F\\\\/ '$NF != \\\"nologin\\\" {print}' /etc/shells | sed -rn '/^\\\\//{s,/,\\\\\\\\\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\\\"\n   unset a_uarr && a_uarr=() # Clear and initialize array\n   while read -r l_epu l_eph; do # Populate array with users and user home location\n      [[ -n \\\"$l_epu\\\" && -n \\\"$l_eph\\\" ]] && a_uarr+=(\\\"$l_epu $l_eph\\\")\n   done <<< \\\"$(awk -v pat=\\\"$l_valid_shells\\\" -F: '$(NF) ~ pat { print $1 \\\" \\\" $(NF-1) }' /etc/passwd)\\\"\n   l_asize=\\\"${#a_uarr[@]}\\\" # Here if we want to look at number of users before proceeding\n   l_maxsize=\\\"1000\\\" # Maximun number of local interactive users before warning (Default 1,000)\n   [ \\\"$l_asize \\\" -gt \\\"$l_maxsize\\\" ] && echo -e \\\"\n  ** INFO **\n  - \\\\\\\"$l_asize\\\\\\\" Local interactive users found on the system\n  - This may be a long running check\n\\\"\n   file_access_chk()\n   {\n      l_facout2=\\\"\\\"\n      l_max=\\\"$( printf '%o' $(( 0777 & ~$l_mask)) )\\\"\n      if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n         l_facout2=\\\"$l_facout2\n  - File: \\\\\\\"$l_hdfile\\\\\\\" is mode: \\\\\\\"$l_mode\\\\\\\" and should be mode: \\\\\\\"$l_max\\\\\\\" or more restrictive\\\"\n      fi\n      if [[ ! \\\"$l_owner\\\" =~ ($l_user) ]]; then\n         l_facout2=\\\"$l_facout2\n  - File: \\\\\\\"$l_hdfile\\\\\\\" owned by: \\\\\\\"$l_owner\\\\\\\" and should be owned by \\\\\\\"${l_user//|/ or }\\\\\\\"\\\"\n      fi\n      if [[ ! \\\"$l_gowner\\\" =~ ($l_group) ]]; then\n         l_facout2=\\\"$l_facout2\n  - File: \\\\\\\"$l_hdfile\\\\\\\" group owned by: \\\\\\\"$l_gowner\\\\\\\" and should be group owned by \\\\\\\"${l_group//|/ or }\\\\\\\"\\\"\n      fi\n   }\n   while read -r l_user l_home; do\n      l_fe=\\\"\\\" l_nout2=\\\"\\\" l_nout3=\\\"\\\" l_dfout2=\\\"\\\" l_hdout2=\\\"\\\" l_bhout2=\\\"\\\"\n      if [ -d \\\"$l_home\\\" ]; then\n         l_group=\\\"$(id -gn \\\"$l_user\\\" | xargs)\\\"\n         l_group=\\\"${l_group// /|}\\\"\n         while IFS= read -r -d $'\\\\0' l_hdfile; do\n            while read -r l_mode l_owner l_gowner; do\n               case \\\"$(basename \\\"$l_hdfile\\\")\\\" in\n                  .forward | .rhost )\n                     l_fe=\\\"Y\\\" && l_bf=\\\"Y\\\"\n                     l_dfout2=\\\"$l_dfout2\n  - File: \\\\\\\"$l_hdfile\\\\\\\" exists\\\" ;;\n                  .netrc )\n                     l_mask='0177'\n                     file_access_chk\n                     if [ -n \\\"$l_facout2\\\" ]; then\n                        l_fe=\\\"Y\\\" && l_nf=\\\"Y\\\"\n                        l_nout2=\\\"$l_facout2\\\"\n                     else\n                        l_nout3=\\\"   - File: \\\\\\\"$l_hdfile\\\\\\\" exists\\\"\n                     fi ;;\n                  .bash_history )\n                     l_mask='0177'\n                     file_access_chk\n                     if [ -n \\\"$l_facout2\\\" ]; then\n                        l_fe=\\\"Y\\\" && l_hf=\\\"Y\\\"\n                        l_bhout2=\\\"$l_facout2\\\"\n                     fi ;;\n                  * )\n                     l_mask='0133'\n                     file_access_chk\n                     if [ -n \\\"$l_facout2\\\" ]; then\n                        l_fe=\\\"Y\\\" && l_df=\\\"Y\\\"\n                        l_hdout2=\\\"$l_facout2\\\"\n                     fi ;;\n                  esac\n            done <<< \\\"$(stat -Lc '%#a %U %G' \\\"$l_hdfile\\\")\\\"\n         done < <(find \\\"$l_home\\\" -xdev -type f -name '.*' -print0)\n      fi\n      if [ \\\"$l_fe\\\" = \\\"Y\\\" ]; then\n         l_output2=\\\"$l_output2\n - User: \\\\\\\"$l_user\\\\\\\" Home Directory: \\\\\\\"$l_home\\\\\\\"\\\"\n         [ -n \\\"$l_dfout2\\\" ] && l_output2=\\\"$l_output2$l_dfout2\\\"\n         [ -n \\\"$l_nout2\\\" ] && l_output2=\\\"$l_output2$l_nout2\\\"\n         [ -n \\\"$l_bhout2\\\" ] && l_output2=\\\"$l_output2$l_bhout2\\\"\n         [ -n \\\"$l_hdout2\\\" ] && l_output2=\\\"$l_output2$l_hdout2\\\"\n      fi\n      [ -n \\\"$l_nout3\\\" ] && l_output3=\\\"$l_output3\n  - User: \\\\\\\"$l_user\\\\\\\" Home Directory: \\\\\\\"$l_home\\\\\\\"\n$l_nout3\\\"\n   done <<< \\\"$(printf '%s\n' \\\"${a_uarr[@]}\\\")\\\"\n   unset a_uarr # Remove array\n   [ -n \\\"$l_output3\\\" ] && l_output3=\\\" - ** Warning **\n - \\\\\\\".netrc\\\\\\\" files should be removed unless deemed necessary\n   and in accordance with local site policy:$l_output3\\\"\n   [ -z \\\"$l_bf\\\" ] && l_output=\\\"$l_output\n   - \\\\\\\".forward\\\\\\\" or \\\\\\\".rhost\\\\\\\" files\\\"\n   [ -z \\\"$l_nf\\\" ] && l_output=\\\"$l_output\n   - \\\\\\\".netrc\\\\\\\" files with incorrect access configured\\\"\n   [ -z \\\"$l_hf\\\" ] && l_output=\\\"$l_output\n   - \\\\\\\".bash_history\\\\\\\" files with incorrect access configured\\\"\n   [ -z \\\"$l_df\\\" ] && l_output=\\\"$l_output\n   - \\\\\\\"dot\\\\\\\" files with incorrect access configured\\\"\n   [ -n \\\"$l_output\\\" ] && l_output=\\\"  - No local interactive users home directories contain:$l_output\\\"\n   if [ -z \\\"$l_output2\\\" ]; then # If l_output2 is empty, we pass\n      echo -e \\\"\n- Audit Result:\n  ** PASS **\n - * Correctly configured * :\n$l_output\n\\\"\n      echo -e \\\"$l_output3\n\\\"\n   else\n      echo -e \\\"\n- Audit Result:\n  ** FAIL **\n - * Reasons for audit failure * :\n$l_output2\n\\\"\n      echo -e \\\"$l_output3\n\\\"\n      [ -n \\\"$l_output\\\" ] && echo -e \\\"- * Correctly configured * :\n$l_output\n\\\"\n   fi\n}",
  "expect": "(?i)^[\\\\s]*\\\\**[\\\\s]*pass:?[\\\\s]*\\\\**$",
  "timeout": "@FIND_TIMEOUT@"
}