{
  "type": "CMD_EXEC",
  "description": "1.5.1 Ensure address space layout randomization is enabled",
  "info": "Address space layout randomization (ASLR) is an exploit mitigation technique which randomly arranges the address space of key data areas of a process.\n\nRandomly placing virtual memory regions will make it difficult to write memory page exploits as the memory placement will be consistently shifting.",
  "solution": "\"Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending inconf :\n\n - kernel.randomize_va_space = 2",
  "Example": "# printf \\\"%s\\n\\\" \\\"kernel.randomize_va_space = 2\\\" >> /etc/sysctl.d/60-kernel_sysctl.conf\n\nRun the following command to set the active kernel parameter:\n\n# sysctl -w kernel.randomize_va_space=2",
  "Note": "If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten\"",
  "reference": "800-53|SI-16,800-53r5|SI-16,CSCv7|8.3,CSCv8|10.5,CSF2.0|PR.DS-10,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-16,LEVEL|1A",
  "see_also": "https://workbench.cisecurity.org/benchmarks/18959",
  "cmd": "#!/bin/bash\n\n{\n   a_output=(); a_output2=(); a_parlist=(kernel.randomize_va_space=2)\n   l_ufwscf=\\\"$([ -f /etc/default/ufw ] && awk -F= '/^\\\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\\\"\n   f_kernel_parameter_chk()\n   {\n      l_running_parameter_value=\\\"$(sysctl \\\"$l_parameter_name\\\" | awk -F= '{print $2}' | xargs)\\\" # Check running configuration\n      if grep -Pq -- '\\\\b'\\\"$l_parameter_value\\\"'\\\\b' <<< \\\"$l_running_parameter_value\\\"; then\n         a_output+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is correctly set to \\\\\\\"$l_running_parameter_value\\\\\\\"\\\"\n         \\\"    in the running configuration\\\")\n      else\n         a_output2+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is incorrectly set to \\\\\\\"$l_running_parameter_value\\\\\\\"\\\" \\\\\n         \\\"    in the running configuration\\\" \\\\\n         \\\"    and should have a value of: \\\\\\\"$l_value_out\\\\\\\"\\\")\n      fi\n      unset A_out; declare -A A_out # Check durable setting (files)\n      while read -r l_out; do\n         if [ -n \\\"$l_out\\\" ]; then\n            if [[ $l_out =~ ^\\\\s*# ]]; then\n               l_file=\\\"${l_out//# /}\\\"\n            else\n               l_kpar=\\\"$(awk -F= '{print $1}' <<< \\\"$l_out\\\" | xargs)\\\"\n               [ \\\"$l_kpar\\\" = \\\"$l_parameter_name\\\" ] && A_out+=([\\\"$l_kpar\\\"]=\\\"$l_file\\\")\n            fi\n         fi\n      done < <(\\\"$l_systemdsysctl\\\" --cat-config | grep -Po '^\\\\h*([^#\\\\n\\\\r]+|#\\\\h*\\\\/[^#\\\\n\\\\r\\\\h]+\\\\.conf\\\\b)')\n      if [ -n \\\"$l_ufwscf\\\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n         l_kpar=\\\"$(grep -Po \\\"^\\\\h*$l_parameter_name\\\\b\\\" \\\"$l_ufwscf\\\" | xargs)\\\"\n         l_kpar=\\\"${l_kpar//\\\\//.}\\\"\n         [ \\\"$l_kpar\\\" = \\\"$l_parameter_name\\\" ] && A_out+=([\\\"$l_kpar\\\"]=\\\"$l_ufwscf\\\")\n      fi\n      if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n         while IFS=\\\"=\\\" read -r l_fkpname l_file_parameter_value; do\n            l_fkpname=\\\"${l_fkpname// /}\\\"; l_file_parameter_value=\\\"${l_file_parameter_value// /}\\\"\n            if grep -Pq -- '\\\\b'\\\"$l_parameter_value\\\"'\\\\b' <<< \\\"$l_file_parameter_value\\\"; then\n               a_output+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is correctly set to \\\\\\\"$l_file_parameter_value\\\\\\\"\\\" \\\\\n               \\\"    in \\\\\\\"$(printf '%s' \\\"${A_out[@]}\\\")\\\\\\\"\\\")\n            else\n               a_output2+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is incorrectly set to \\\\\\\"$l_file_parameter_value\\\\\\\"\\\"\n               \\\"    in \\\\\\\"$(printf '%s' \\\"${A_out[@]}\\\")\\\\\\\"\\\" \\\\\n               \\\"    and should have a value of: \\\\\\\"$l_value_out\\\\\\\"\\\")\n            fi\n         done < <(grep -Po -- \\\"^\\\\h*$l_parameter_name\\\\h*=\\\\h*\\\\H+\\\" \\\"${A_out[@]}\\\")\n      else\n         a_output2+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is not set in an included file\\\" \\\\\n         \\\"    ** Note: \\\\\\\"$l_parameter_name\\\\\\\" May be set in a file that's ignored by load procedure **\\\")\n      fi\n   }\n   l_systemdsysctl=\\\"$(readlink -f /lib/systemd/systemd-sysctl)\\\"\n   while IFS=\\\"=\\\" read -r l_parameter_name l_parameter_value; do # Assess and check parameters\n      l_parameter_name=\\\"${l_parameter_name// /}\\\"; l_parameter_value=\\\"${l_parameter_value// /}\\\"\n      l_value_out=\\\"${l_parameter_value//-/ through }\\\"; l_value_out=\\\"${l_value_out//|/ or }\\\"\n      l_value_out=\\\"$(tr -d '(){}' <<< \\\"$l_value_out\\\")\\\"\n      f_kernel_parameter_chk\n   done < <(printf '%s\\\\n' \\\"${a_parlist[@]}\\\")\n   if [ \\\"${#a_output2[@]}\\\" -le 0 ]; then\n      printf '%s\\\\n' \\\"\\\" \\\"- Audit Result:\\\" \\\"  ** PASS **\\\" \\\"${a_output[@]}\\\" \\\"\\\"\n   else\n      printf '%s\\\\n' \\\"\\\" \\\"- Audit Result:\\\" \\\"  ** FAIL **\\\" \\\" - Reason(s) for audit failure:\\\" \\\"${a_output2[@]}\\\"\n      [ \\\"${#a_output[@]}\\\" -gt 0 ] && printf '%s\\\\n' \\\"\\\" \\\"- Correctly set:\\\" \\\"${a_output[@]}\\\" \\\"\\\"\n   fi\n}",
  "expect": "(?i)^[\\\\s]*\\\\**[\\\\s]*pass:?[\\\\s]*\\\\**$"
}