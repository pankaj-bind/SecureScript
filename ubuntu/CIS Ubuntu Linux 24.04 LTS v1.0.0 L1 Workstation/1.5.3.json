{
  "check_type": "CONDITIONAL",
  "condition": {
    "auto_status": "FAILED",
    "type": "AND",
    "rules": [
      {
        "type": "FILE_CONTENT_CHECK",
        "description": "hard core 0",
        "file": "/etc/security/limits.conf /etc/security/limits.d/*",
        "regex": "^\\\\h*\\\\*\\\\h+hard\\\\h+core\\\\h+0\\\\b",
        "expect": "^\\\\h*\\\\*\\\\h+hard\\\\h+core\\\\h+0\\\\b",
        "required": false,
        "min_occurrences": "1"
      },
      {
        "type": "CMD_EXEC",
        "description": "fs.suid_dumpable",
        "cmd": "#!/bin/bash\n\n{\n   a_output=(); a_output2=(); a_parlist=(\\\"fs.suid_dumpable=0\\\")\n   l_ufwscf=\\\"$([ -f /etc/default/ufw ] && awk -F= '/^\\\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\\\"\n   f_kernel_parameter_chk()\n   {\n      l_running_parameter_value=\\\"$(sysctl \\\"$l_parameter_name\\\" | awk -F= '{print $2}' | xargs)\\\" # Check running configuration\n      if grep -Pq -- '\\\\b'\\\"$l_parameter_value\\\"'\\\\b' <<< \\\"$l_running_parameter_value\\\"; then\n         a_output+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is correctly set to \\\\\\\"$l_running_parameter_value\\\\\\\"\\\"\n         \\\"    in the running configuration\\\")\n      else\n         a_output2+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is incorrectly set to \\\\\\\"$l_running_parameter_value\\\\\\\"\\\" \\\\\n         \\\"    in the running configuration\\\" \\\\\n         \\\"    and should have a value of: \\\\\\\"$l_value_out\\\\\\\"\\\")\n      fi\n      unset A_out; declare -A A_out # Check durable setting (files)\n      while read -r l_out; do\n         if [ -n \\\"$l_out\\\" ]; then\n            if [[ $l_out =~ ^\\\\s*# ]]; then\n               l_file=\\\"${l_out//# /}\\\"\n            else\n               l_kpar=\\\"$(awk -F= '{print $1}' <<< \\\"$l_out\\\" | xargs)\\\"\n               [ \\\"$l_kpar\\\" = \\\"$l_parameter_name\\\" ] && A_out+=([\\\"$l_kpar\\\"]=\\\"$l_file\\\")\n            fi\n         fi\n      done < <(\\\"$l_systemdsysctl\\\" --cat-config | grep -Po '^\\\\h*([^#\\\\n\\\\r]+|#\\\\h*\\\\/[^#\\\\n\\\\r\\\\h]+\\\\.conf\\\\b)')\n      if [ -n \\\"$l_ufwscf\\\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n         l_kpar=\\\"$(grep -Po \\\"^\\\\h*$l_parameter_name\\\\b\\\" \\\"$l_ufwscf\\\" | xargs)\\\"\n         l_kpar=\\\"${l_kpar//\\\\//.}\\\"\n         [ \\\"$l_kpar\\\" = \\\"$l_parameter_name\\\" ] && A_out+=([\\\"$l_kpar\\\"]=\\\"$l_ufwscf\\\")\n      fi\n      if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n         while IFS=\\\"=\\\" read -r l_fkpname l_file_parameter_value; do\n            l_fkpname=\\\"${l_fkpname// /}\\\"; l_file_parameter_value=\\\"${l_file_parameter_value// /}\\\"\n            if grep -Pq -- '\\\\b'\\\"$l_parameter_value\\\"'\\\\b' <<< \\\"$l_file_parameter_value\\\"; then\n               a_output+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is correctly set to \\\\\\\"$l_file_parameter_value\\\\\\\"\\\" \\\\\n               \\\"    in \\\\\\\"$(printf '%s' \\\"${A_out[@]}\\\")\\\\\\\"\\\")\n            else\n               a_output2+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is incorrectly set to \\\\\\\"$l_file_parameter_value\\\\\\\"\\\"\n               \\\"    in \\\\\\\"$(printf '%s' \\\"${A_out[@]}\\\")\\\\\\\"\\\" \\\\\n               \\\"    and should have a value of: \\\\\\\"$l_value_out\\\\\\\"\\\")\n            fi\n         done < <(grep -Po -- \\\"^\\\\h*$l_parameter_name\\\\h*=\\\\h*\\\\H+\\\" \\\"${A_out[@]}\\\")\n      else\n         a_output2+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is not set in an included file\\\" \\\\\n         \\\"    ** Note: \\\\\\\"$l_parameter_name\\\\\\\" May be set in a file that's ignored by load procedure **\\\")\n      fi\n   }\n   l_systemdsysctl=\\\"$(readlink -f /lib/systemd/systemd-sysctl)\\\"\n   while IFS=\\\"=\\\" read -r l_parameter_name l_parameter_value; do # Assess and check parameters\n      l_parameter_name=\\\"${l_parameter_name// /}\\\"; l_parameter_value=\\\"${l_parameter_value// /}\\\"\n      l_value_out=\\\"${l_parameter_value//-/ through }\\\"; l_value_out=\\\"${l_value_out//|/ or }\\\"\n      l_value_out=\\\"$(tr -d '(){}' <<< \\\"$l_value_out\\\")\\\"\n      f_kernel_parameter_chk\n   done < <(printf '%s\\\\n' \\\"${a_parlist[@]}\\\")\n   if [ \\\"${#a_output2[@]}\\\" -le 0 ]; then\n      printf '%s\\\\n' \\\"\\\" \\\"- Audit Result:\\\" \\\"  ** PASS **\\\" \\\"${a_output[@]}\\\" \\\"\\\"\n   else\n      printf '%s\\\\n' \\\"\\\" \\\"- Audit Result:\\\" \\\"  ** FAIL **\\\" \\\" - Reason(s) for audit failure:\\\" \\\"${a_output2[@]}\\\"\n      [ \\\"${#a_output[@]}\\\" -gt 0 ] && printf '%s\\\\n' \\\"\\\" \\\"- Correctly set:\\\" \\\"${a_output[@]}\\\" \\\"\\\"\n   fi\n}",
        "expect": "(?i)^[\\\\s]*\\\\**[\\\\s]*pass:?[\\\\s]*\\\\**$"
      },
      {
        "type": "CMD_EXEC",
        "description": "check if systemd-coredump is installed",
        "cmd": "/bin/systemctl list-unit-files | /bin/grep coredump | /bin/awk \\'{print} END {if (NR != 0) print \\\"pass\\\" ; else print \\\"fail\\\"}\\'",
        "expect": "^pass$"
      }
    ]
  },
  "then": {
    "report": {
      "description": "1.5.3 Ensure core dumps are restricted",
      "info": "A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also be used to glean confidential information from a core file. The system provides the ability to set a soft limit for core dumps, but this can be overridden by the user.\n\nSetting a hard limit on core dumps prevents users from overriding the soft variable. If core dumps are required, consider setting limits for user groups (see limits.conf(5) ). In addition, setting the fs.suid_dumpable variable to 0 will prevent setuid programs from dumping core.",
      "solution": "\"Add the following line to /etc/security/limits.conf or a /etc/security/limits.d/* file:\n\n* hard core 0\n\nSet the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending inconf :\n\n - fs.suid_dumpable = 0",
      "Example": "# printf \\\"\\n%s\\\" \\\"fs.suid_dumpable = 0\\\" >> /etc/sysctl.d/60-fs_sysctl.conf\n\nRun the following command to set the active kernel parameter:\n\n# sysctl -w fs.suid_dumpable=0",
      "Note": "If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten\n\n-IF- systemd-coredump is installed:\n\nedit /etc/systemd/coredump.conf and add/modify the following lines:\n\nStorage=none\nProcessSizeMax=0\n\nRun the command:\n\nsystemctl daemon-reload\"",
      "reference": "800-171|3.1.7,800-171r3|03.01.07a.,800-53|AC-6(10),800-53r5|AC-6(10),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSF|PR.AC-4,CSF2.0|PR.AA-05,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO-27001-2022|A.5.15,ISO-27001-2022|A.8.2,ISO-27001-2022|A.8.18,ITSG-33|AC-6,LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3",
      "see_also": "https://workbench.cisecurity.org/benchmarks/18959",
      "show_output": true,
      "type": "PASSED"
    }
  }
}