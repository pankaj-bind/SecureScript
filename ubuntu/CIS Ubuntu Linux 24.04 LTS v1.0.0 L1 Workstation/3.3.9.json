{
  "type": "CMD_EXEC",
  "description": "3.3.9 Ensure suspicious packets are logged",
  "info": "When enabled, this feature logs packets with un-routable source addresses to the kernel log.\n\nSetting net.ipv4.conf.all.log_martians and net.ipv4.conf.default.log_martians to 1 enables this feature. Logging these packets allows an administrator to investigate the possibility that an attacker is sending spoofed packets to their system.",
  "solution": "\"Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending inconf :\n\n - net.ipv4.conf.all.log_martians = 1\n - net.ipv4.conf.default.log_martians = 1",
  "Example": "# printf '%s\\n' \\\"net.ipv4.conf.all.log_martians = 1\\\" \\\"net.ipv4.conf.default.log_martians = 1\\\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n\nRun the following script to set the active kernel parameters:\n\n#!/usr/bin/env bash\n\n{\n   sysctl -w net.ipv4.conf.all.log_martians=1\n   sysctl -w net.ipv4.conf.default.log_martians=1\n   sysctl -w net.ipv4.route.flush=1\n}",
  "Note": "If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten\"",
  "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-171r3|03.03.02a.,800-171r3|03.03.02b.,800-171r3|03.03.03,800-171r3|03.03.06a.,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|6.2,CSCv7|6.3,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,CSF2.0|DE.CM-01,CSF2.0|DE.CM-03,CSF2.0|DE.CM-09,CSF2.0|PR.PS-04,CSF2.0|RS.AN-03,CSF2.0|RS.AN-06,CSF2.0|RS.AN-07,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO-27001-2022|A.5.28,ISO-27001-2022|A.8.15,ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
  "see_also": "https://workbench.cisecurity.org/benchmarks/18959",
  "cmd": "#!/bin/bash\n\n{\n   a_output=(); a_output2=(); l_ipv6_disabled=\\\"\\\"\n   a_parlist=(\\\"net.ipv4.conf.all.log_martians=1\\\" \\\"net.ipv4.conf.default.log_martians=1\\\")\n   l_ufwscf=\\\"$([ -f /etc/default/ufw ] && awk -F= '/^\\\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\\\"\n   f_ipv6_chk()\n   {\n      l_ipv6_disabled=\\\"no\\\"\n      ! grep -Pqs -- '^\\\\h*0\\\\b' /sys/module/ipv6/parameters/disable && l_ipv6_disabled=\\\"yes\\\"\n      if sysctl net.ipv6.conf.all.disable_ipv6 | grep -Pqs -- \\\"^\\\\h*net\\\\.ipv6\\\\.conf\\\\.all\\\\.disable_ipv6\\\\h*=\\\\h*1\\\\b\\\" && \\\\\n         sysctl net.ipv6.conf.default.disable_ipv6 | grep -Pqs -- \\\"^\\\\h*net\\\\.ipv6\\\\.conf\\\\.default\\\\.disable_ipv6\\\\h*=\\\\h*1\\\\b\\\"; then\n         l_ipv6_disabled=\\\"yes\\\"\n      fi\n   }\n   f_kernel_parameter_chk()\n   {\n      l_running_parameter_value=\\\"$(sysctl \\\"$l_parameter_name\\\" | awk -F= '{print $2}' | xargs)\\\" # Check running configuration\n      if grep -Pq -- '\\\\b'\\\"$l_parameter_value\\\"'\\\\b' <<< \\\"$l_running_parameter_value\\\"; then\n         a_output+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is correctly set to \\\\\\\"$l_running_parameter_value\\\\\\\"\\\"\n         \\\"    in the running configuration\\\")\n      else\n         a_output2+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is incorrectly set to \\\\\\\"$l_running_parameter_value\\\\\\\"\\\" \\\\\n         \\\"    in the running configuration\\\" \\\\\n         \\\"    and should have a value of: \\\\\\\"$l_value_out\\\\\\\"\\\")\n      fi\n      unset A_out; declare -A A_out # Check durable setting (files)\n      while read -r l_out; do\n         if [ -n \\\"$l_out\\\" ]; then\n            if [[ $l_out =~ ^\\\\s*# ]]; then\n               l_file=\\\"${l_out//# /}\\\"\n            else\n               l_kpar=\\\"$(awk -F= '{print $1}' <<< \\\"$l_out\\\" | xargs)\\\"\n               [ \\\"$l_kpar\\\" = \\\"$l_parameter_name\\\" ] && A_out+=([\\\"$l_kpar\\\"]=\\\"$l_file\\\")\n            fi\n         fi\n      done < <(\\\"$l_systemdsysctl\\\" --cat-config | grep -Po '^\\\\h*([^#\\\\n\\\\r]+|#\\\\h*\\\\/[^#\\\\n\\\\r\\\\h]+\\\\.conf\\\\b)')\n      if [ -n \\\"$l_ufwscf\\\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl --cat-config)\n         l_kpar=\\\"$(grep -Po \\\"^\\\\h*$l_parameter_name\\\\b\\\" \\\"$l_ufwscf\\\" | xargs)\\\"\n         l_kpar=\\\"${l_kpar//\\\\//.}\\\"\n         [ \\\"$l_kpar\\\" = \\\"$l_parameter_name\\\" ] && A_out+=([\\\"$l_kpar\\\"]=\\\"$l_ufwscf\\\")\n      fi\n      if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n         while IFS=\\\"=\\\" read -r l_fkpname l_file_parameter_value; do\n            l_fkpname=\\\"${l_fkpname// /}\\\"; l_file_parameter_value=\\\"${l_file_parameter_value// /}\\\"\n            if grep -Pq -- '\\\\b'\\\"$l_parameter_value\\\"'\\\\b' <<< \\\"$l_file_parameter_value\\\"; then\n               a_output+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is correctly set to \\\\\\\"$l_file_parameter_value\\\\\\\"\\\" \\\\\n               \\\"    in \\\\\\\"$(printf '%s' \\\"${A_out[@]}\\\")\\\\\\\"\\\")\n            else\n               a_output2+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is incorrectly set to \\\\\\\"$l_file_parameter_value\\\\\\\"\\\"\n               \\\"    in \\\\\\\"$(printf '%s' \\\"${A_out[@]}\\\")\\\\\\\"\\\" \\\\\n               \\\"    and should have a value of: \\\\\\\"$l_value_out\\\\\\\"\\\")\n            fi\n         done < <(grep -Po -- \\\"^\\\\h*$l_parameter_name\\\\h*=\\\\h*\\\\H+\\\" \\\"${A_out[@]}\\\")\n      else\n         a_output2+=(\\\" - \\\\\\\"$l_parameter_name\\\\\\\" is not set in an included file\\\" \\\\\n         \\\"    ** Note: \\\\\\\"$l_parameter_name\\\\\\\" May be set in a file that's ignored by load procedure **\\\")\n      fi\n   }\n   l_systemdsysctl=\\\"$(readlink -f /lib/systemd/systemd-sysctl)\\\"\n   while IFS=\\\"=\\\" read -r l_parameter_name l_parameter_value; do # Assess and check parameters\n      l_parameter_name=\\\"${l_parameter_name// /}\\\"; l_parameter_value=\\\"${l_parameter_value// /}\\\"\n      l_value_out=\\\"${l_parameter_value//-/ through }\\\"; l_value_out=\\\"${l_value_out//|/ or }\\\"\n      l_value_out=\\\"$(tr -d '(){}' <<< \\\"$l_value_out\\\")\\\"\n      if grep -q '^net.ipv6.' <<< \\\"$l_parameter_name\\\"; then\n         [ -z \\\"$l_ipv6_disabled\\\" ] && f_ipv6_chk\n         if [ \\\"$l_ipv6_disabled\\\" = \\\"yes\\\" ]; then\n            a_output+=(\\\" - IPv6 is disabled on the system, \\\\\\\"$l_parameter_name\\\\\\\" is not applicable\\\")\n         else\n            f_kernel_parameter_chk\n         fi\n      else\n         f_kernel_parameter_chk\n      fi\n   done < <(printf '%s\\\\n' \\\"${a_parlist[@]}\\\")\n   if [ \\\"${#a_output2[@]}\\\" -le 0 ]; then\n      printf '%s\\\\n' \\\"\\\" \\\"- Audit Result:\\\" \\\"  ** PASS **\\\" \\\"${a_output[@]}\\\" \\\"\\\"\n   else\n      printf '%s\\\\n' \\\"\\\" \\\"- Audit Result:\\\" \\\"  ** FAIL **\\\" \\\" - Reason(s) for audit failure:\\\" \\\"${a_output2[@]}\\\"\n      [ \\\"${#a_output[@]}\\\" -gt 0 ] && printf '%s\\\\n' \\\"\\\" \\\"- Correctly set:\\\" \\\"${a_output[@]}\\\" \\\"\\\"\n   fi\n}",
  "expect": "(?i)^[\\\\s]*\\\\**[\\\\s]*pass:?[\\\\s]*\\\\**$"
}