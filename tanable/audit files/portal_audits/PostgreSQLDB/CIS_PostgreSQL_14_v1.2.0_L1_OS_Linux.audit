#TRUSTED 75a1c6be550bfbcc89ba0904980fc0c2da06193c2261aca7c2abb44c14cd73b56f2faef26d54e921d48ec5b91eddf759ffd6771781f02b818741fb5b5d790a1ce15102143ff082d746f5e88391340dd3186d0ca2aab6e2e6e9019cfd8f6ebd8559f227956001db6ae2629c56d3b6f3be3d972c552475b45602515a25f43971539b78b1064e3d0708f5f7adc9d4c7ad181bc0c5eff7723230043a3a9d3c423747039bc76f1ad2f673f9872036fde9d7606def77985f3aa4a06b81ede8ab80bf6b7595679d80d52da4f41e1d81a23ae73ae455744fd72c7c3181de234351024979f58e4d05fdf22e230c8c058eca7b65ae56d04ef3adbec4ff73914bbff5c49c14b619bf37091bf4980e4e3cb9fa2254805311e68808bd797ae6a2a0a1389715ba022ad7d8de48b163d4a9aa300bf9971b54c8ac2dca017a1c3826d99398f541dcafd6ffb9b9d8ec3af2c9a3ed7d92e2cdd0531160bd6ac26321e14e51828daa8348fab17cc280581dea58601e83d499ef0df672149e8c57efff42647fb67697b18820cbf555dbe1377612ca8a87b821ed8540e727d009844a6add878eb0f16c0e551a2c388caa525b11c5a95d6329fcd0bb677a5e25d6e86333749cc8e908e0b9668f76c25f330e0f935ff47b9edb0f028c81db0ccf0b2d87e8a4fa4b2b2bf020080dde2875e73309381a80adf72fdb98afffa76f9ef23f250fefda6d6c9401ac
#TRUST-RSA-SHA256 5691e69e416a13d2d8c183e08722bb047efbd68e4df8104463b2bd8a5dc63498e7eca6c3fcadf2f0323c015152f914fd0ac6706abb1c5d52268c3381810dbb5ea055d73cee4892c4289bad83bccbc2e769d562e8cd83f412b0d2927b417e14bc7c8830c6b4c0753ff373506498e0a91d376df2dee2efc908537bdb3cd8afe9bee372b1e9fb13ee26bd5ec468fc833e2944915014f5f54461671cd2eb0047f985989552cb384706a1f3f00fd3f030ea323a29514a7f9d42aa88ef224b284308c2004b6ed414ddbccddfd4423e2db9c7e11ed107d32afc12e0b9ee58077eb5c3de9e38e3f0852cdac6a77af8691d0155397943b2d566488b190a772f4d4a5f80e44d1fe84a44aa07b7b3864e89f157389d479e0bfe013d9b1916257fdebfb25c05e961466de0f5af8012c2988ecb7813e6ab9726c7cea5e0f2f1733d1173f6f7a9eec927f2810ab639ed4787c6551262322834858ac7539ad015255df581f9113aa6a7193416bfca1772710bab22ad3306f718f4bbe920d8108a98c0733d19e7c5dd9225700ab4238a57e0659bd216042ccde0c6e966d0d9c2bf311b5286d5dc9cc6b28963652ba778b1913e9817090db2cf31eb9f2e64dabd285a5133d75c06a9fb44d872bb94ebe5843ba9006d86c03a3b2fc3405327b75312e29e39c9cb22570636b76704c36ce71fb060e3a52d83f9daa60d312412b5cc177b21838f7017f9
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.1 $
# $Date: 2024/06/17 $
#
# Description   : This document implements the security configuration as recommended by the
#                 CIS PostgreSQL 14 Benchmark
#
#<ui_metadata>
#<display_name>CIS PostgreSQL 14 OS v 1.2.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>PostgreSQL 14</name>
#  <profile>L1 OS Linux</profile>
#  <version>1.2.0</version>
#  <link>https://workbench.cisecurity.org/benchmarks/17004</link>
#</spec>
#<labels>CIS,postgres,distribution_independent_linux,update_20230227</labels>
#<benchmark_refs>CCE,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>PG_DATA_DIR</name>
#    <default>/var/lib/pgsql/14/data</default>
#    <description>data dir</description>
#    <info>full path to data dir</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>PG_CONF</name>
#    <default>/var/lib/pgsql/14/data/postgresql.conf</default>
#    <description>Postgres conf file</description>
#    <info>full path to data dir</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "Linux found"
      cmd         : "uname -a"
      expect      : "Linux"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_PostgreSQL_14_v 1.2.0_L1_OS_Linux.audit from CIS PostgreSQL 14 Benchmark v 1.2.0"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "1.1 Ensure packages are obtained from authorized repositories"
      info        : "Standard Linux distributions, although possessing the requisite packages, often do not have PostgreSQL pre-installed. The installation process includes installing the binaries and the means to generate a data cluster. Package installation should include both the server and client packages. Contribution modules are optional depending upon one's architectural requirements (they are recommended though).

When obtaining and installing software packages (typically via dnf or apt), it's imperative that packages are sourced only from valid and authorized repositories. For PostgreSQL, the canonical repositories are the official PostgreSQL YUM repository (yum.postgresql.org) and the official PostgreSQL APT repository (apt.postgresql.org). Your chosen PostgreSQL vendor may offer its own software repositories as well.

Rationale:

Being open-source, PostgreSQL packages are widely available across the internet through package aggregators and providers. However, using invalid or unauthorized sources for packages can lead to implementing untested, defective, or malicious software.

Many organizations choose to implement a local software repository within their organization. Care must be taken to ensure that only valid and authorized packages are downloaded and installed into such local repositories.

From a security perspective, it's imperative to verify the PostgreSQL binary packages are sourced from a valid software repository. For a complete listing of all PostgreSQL binaries available via configured repositories inspect the output from dnf provides '*libpq.so' or apt-file search /usr/pgsql-14/lib/libpq.so.5.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Alter the configured repositories so they only include valid and authorized sources of packages.

As an example of adding an authorized repository, we will install the PGDG repository RPM from 'yum.postgresql.org':

# whoami
root
# dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm
Last metadata expiration check: 0:01:35 ago on Mon 03 Oct 2022 01:19:37 PM EDT.
[snip]
Installed:
  pgdg-redhat-repo-42.0-35.noarch

Complete!
# whoami
root
# dnf repolist all | egrep 'enabled$'
pgdg-common                                        PostgreSQL common  enabled
pgdg12                                             PostgreSQL 12 for  enabled
pgdg13                                             PostgreSQL 13 for  enabled
pgdg14                                             PostgreSQL 14 for  enabled
pgdg15                                             PostgreSQL 15 for  enabled
pgdg16                                             PostgreSQL 16 for  enabled
rhel-9-for-x86_64-appstream-rpms                   Red Hat Enterprise enabled
rhel-9-for-x86_64-baseos-rpms                      Red Hat Enterprise enabled

If the version of PostgreSQL installed is not 14.x or they did not come from a valid repository, the packages may be uninstalled using this command:

# whoami
root
# dnf remove $(rpm -qa|grep postgres)

To install the PGDG RPMs for PostgreSQL 14.x, run:

# whoami
root
# dnf install -y postgresql14-{server,contrib}
<snip>
Installed:
<snip>
  postgresql14-14.11-1PGDG.rhel9.x86_64        postgresql14-contrib-14.11-1PGDG.rhel9.x86_64   postgresql14-server-14.11-1PGDG.rhel9.x86_64
  postgresql14-libs-14.11-1PGDG.rhel9.x86_64   postgresql14-devel-14.11-1PGDG.rhel9.x86_64
Complete!"
      reference   : "800-171|3.4.1,800-171|3.4.7,800-171|3.7.1,800-171|3.7.2,800-53|CM-7(1),800-53|CM-8,800-53|MA-3,800-53r5|CM-7(1),800-53r5|CM-8,800-53r5|MA-3,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|2.1,CSCv8|2.1,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,CSF|PR.IP-1,CSF|PR.MA-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7(1),ITSG-33|CM-8,ITSG-33|MA-3,ITSG-33|MA-3a.,LEVEL|1M,NESA|T1.2.1,NESA|T1.2.2,NESA|T2.3.4,NESA|T5.4.4,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|5.2.3,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
      cmd         : "dnf repolist all | grep -E 'enabled$'"
      expect      : "MANUAL_REVIEW"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "1.3 Ensure systemd Service Files Are Enabled"
      info        : "Confirm, and correct if necessary, the PostgreSQL systemd service is enabled.

Rationale:

Enabling the systemd service on the OS ensures the database service is active when a change of state occurs as in the case of a system startup or reboot."
      solution    : "Irrespective of package source, PostgreSQL services can be identified because it typically includes the text string 'postgresql'. PGDG installs do not automatically register the service as a 'want' of the default systemd target. Multiple instances of PostgreSQL services often distinguish themselves using a version number.

# whoami
root
# systemctl enable postgresql-14
Created symlink /etc/systemd/system/multi-user.target.wants/postgresql-14.service -> /usr/lib/systemd/system/postgresql-14.service.
# systemctl is-enabled postgresql-14.service
enabled"
      reference   : "800-171|3.4.1,800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-171|3.13.1,800-171|3.13.2,800-53|CM-1,800-53|CM-2,800-53|CM-6,800-53|CM-7,800-53|CM-7(1),800-53|CM-9,800-53|SA-3,800-53|SA-8,800-53|SA-10,800-53r5|CM-1,800-53r5|CM-2,800-53r5|CM-6,800-53r5|CM-7,800-53r5|CM-7(1),800-53r5|CM-9,800-53r5|SA-3,800-53r5|SA-8,800-53r5|SA-10,CSCv7|5.1,CSCv8|4.1,CSF|DE.AE-1,CSF|ID.GV-1,CSF|ID.GV-3,CSF|PR.DS-7,CSF|PR.IP-1,CSF|PR.IP-2,CSF|PR.IP-3,CSF|PR.PT-3,GDPR|32.1.b,GDPR|32.4,HIPAA|164.306(a)(1),ITSG-33|CM-1,ITSG-33|CM-2,ITSG-33|CM-6,ITSG-33|CM-7,ITSG-33|CM-7(1),ITSG-33|CM-9,ITSG-33|SA-3,ITSG-33|SA-8,ITSG-33|SA-8a.,ITSG-33|SA-10,LEVEL|1A,NESA|M1.2.2,NESA|T1.2.1,NESA|T1.2.2,NESA|T3.2.5,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.2.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.1,NESA|T7.6.2,NESA|T7.6.3,NESA|T7.6.5,NIAv2|GS8b,NIAv2|SS3,NIAv2|SS15a,NIAv2|SS16,NIAv2|VL2,NIAv2|VL7a,NIAv2|VL7b,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|7.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
      cmd         : "systemctl is-enabled postgresql-14.service"
      expect      : "^[\\s]*enabled[\\s]*$"
    </custom_item>

    <if>
      <condition auto:"FAILED" type:"AND">
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK_NOT
          description : "Home"
          file        : "~/.[!.]*"
          regex       : "PGPASSWORD"
          expect      : "PGPASSWORD"
          required    : NO
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK_NOT
          description : "root"
          file        : "/root/.[!.]*"
          regex       : "PGPASSWORD"
          expect      : "PGPASSWORD"
          required    : NO
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK_NOT
          description : "/etc/environment"
          file        : "/etc/environment"
          regex       : "PGPASSWORD"
          expect      : "PGPASSWORD"
          required    : NO
        </custom_item>
      </condition>

      <then>
        <report type:"PASSED">
          description : "1.6 Verify That 'PGPASSWORD' is Not Set in Users' Profiles"
          info        : "PostgreSQL can read a default database password from an environment variable called PGPASSWORD.

Rationale:

Use of the PGPASSWORD environment variable implies PostgreSQL credentials are stored as clear text. Avoiding this may increase assurance that the confidentiality of PostgreSQL credentials is preserved."
          solution    : "Check which users and/or scripts are setting PGPASSWORD and change them to use a more secure method."
          reference   : "800-171|3.5.2,800-171|3.13.16,800-53|IA-5(1),800-53|SC-28,800-53|SC-28(1),800-53r5|IA-5(1),800-53r5|SC-28,800-53r5|SC-28(1),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv8|3.11,CSF|PR.AC-1,CSF|PR.DS-1,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(d),HIPAA|164.312(e)(2)(ii),ITSG-33|IA-5(1),ITSG-33|SC-28,ITSG-33|SC-28a.,ITSG-33|SC-28(1),LEVEL|1A,NESA|T5.2.3,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|28.1"
          see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
          show_output : YES
        </report>
      </then>
    </if>

    <custom_item>
      type        : CMD_EXEC
      description : "1.7 Verify That the 'PGPASSWORD' Environment Variable is Not in Use"
      info        : "PostgreSQL can read a default database password from an environment variable called PGPASSWORD.

Rationale:

Using the PGPASSWORD environment variable implies PostgreSQL credentials are stored as clear text. Avoiding use of this environment variable can better safeguard the confidentiality of PostgreSQL credentials."
      solution    : "Check which users and/or scripts are setting PGPASSWORD and change them
to use a more secure method."
      reference   : "800-171|3.5.2,800-171|3.13.16,800-53|IA-5(1),800-53|SC-28,800-53|SC-28(1),800-53r5|IA-5(1),800-53r5|SC-28,800-53r5|SC-28(1),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv8|3.11,CSF|PR.AC-1,CSF|PR.DS-1,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(d),HIPAA|164.312(e)(2)(ii),ITSG-33|IA-5(1),ITSG-33|SC-28,ITSG-33|SC-28a.,ITSG-33|SC-28(1),LEVEL|1A,NESA|T5.2.3,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
      cmd         : "grep PGPASSWORD /proc/*/environ"
      expect      : "/proc/(self|thread-self)[^/]+/environ"
      required    : NO
    </custom_item>

    <if>
      <condition auto:"FAILED" type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "data_directory"
          file        : "@PG_DATA_DIR@"
          mask        : "077"
        </custom_item>

        <custom_item>
          type        : FILE_CHECK
          description : "data_directory/data"
          file        : "@PG_DATA_DIR@/data"
          mask        : "077"
        </custom_item>

        <custom_item>
          type        : FILE_CHECK
          description : "data_directory/backups"
          file        : "@PG_DATA_DIR@/backups"
          mask        : "077"
        </custom_item>

        <custom_item>
          type        : FILE_CHECK
          description : "data_directory/initdb.log"
          file        : "@PG_DATA_DIR@/initdb.log"
          mask        : "177"
        </custom_item>
      </condition>

      <then>
        <report type:"PASSED">
          description : "1.4 Ensure Data Cluster Initialized Successfully"
          info        : "First-time installs of a given PostgreSQL major release require the instantiation of the database cluster. A database cluster is a collection of databases that are managed by a single server instance.

Rationale:

For the purposes of security, PostgreSQL enforces ownership and permissions of the data cluster such that:

An initialized data cluster is owned by the UNIX account that created it.

The data cluster cannot be accessed by other UNIX user accounts.

The data cluster cannot be created or owned by root

The PostgreSQL process cannot be invoked by root nor any UNIX user account other than the owner of the data cluster.

Incorrectly instantiating the data cluster will result in a failed installation."
          solution    : "Attempting to instantiate a data cluster to an existing non-empty directory will fail:

# whoami
root
# PGSETUP_INITDB_OPTIONS='-k' /usr/pgsql-14/bin/postgresql-14-setup initdb
Data directory is not empty!

In the case of a cluster instantiation failure, one must delete/remove the entire data cluster directory and repeat the initdb command:

# whoami
root
# rm -rf ~postgres/14
# PGSETUP_INITDB_OPTIONS='-k' /usr/pgsql-14/bin/postgresql-14-setup initdb
Initializing database ... OK"
          reference   : "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
          see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
          show_output : YES
        </report>
      </then>
    </if>

    <custom_item>
      type        : CMD_EXEC
      description : "2.1 Ensure the file permissions mask is correct"
      info        : "Files are always created using a default set of permissions. File permissions can be restricted by applying a permissions mask called the umask. The postgres user account should use a umask of 0077 to deny file access to all user accounts except the owner.

Rationale:

The Linux OS defaults the umask to 0022, which means the owner and primary group can read and write the file, and other accounts are permitted to read the file. Not explicitly setting the umask to a value as restrictive as 0077 allows other users to read, write, or even execute files and scripts created by the postgres user account. The alternative to using a umask is explicitly updating file permissions after file creation using the command line utility chmod (a manual and error-prone process that is not advised)."
      solution    : "Depending upon the postgres user's environment, the umask is typically set in the initialization file .bash_profile, but may also be set in .profile or .bashrc. To set the umask, add the following to the appropriate profile file:

# whoami
postgres
# cd ~
# ls -ld .{bash_profile,profile,bashrc}
ls: cannot access .profile: No such file or directory
ls: cannot access .bashrc: No such file or directory
-rwx------. 1 postgres postgres 267 Aug 14 12:59 .bash_profile
# echo 'umask 077' >> .bash_profile
# source .bash_profile
# umask
0077

Default Value:

0022"
      reference   : "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1M,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
      cmd         : "su - postgres -c umask"
      expect      : "^[0-7]+77$"
    </custom_item>

    <report type:"WARNING">
      description : "2.2 Ensure extension directory has appropriate ownership and permissions"
      info        : "The extension directory is the location of the PostgreSQL extensions. Extensions are storage engines or user defined functions (UDFs).

Rationale:

Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the PostgreSQL database. If someone can modify extensions, then these extensions can be used to execute illicit instructions.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "If needed, correct the permissions on the extension dir by eecuting:

sudo chown root:root $ext_dir
sudo chmod 0755 $ext_dir

If the permissions needed correct, it is imperative that all extensions found in $ext_dir are evaluated to ensure they have not been modified!"
      reference   : "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
    </report>

    <if>
      <condition auto:"FAILED" type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "home"
          cmd         : "find /home -name '.psql_history' -exec ls -la {} \\;"
          expect      : "^.*\.psql_history.* -> \/dev\/null$"
          required    : NO
        </custom_item>

        <custom_item>
          type        : CMD_EXEC
          description : "root"
          cmd         : "find /root -name '.psql_history' -exec ls -la {} \\;"
          expect      : "^.*\.psql_history.* -> \/dev\/null$"
          required    : NO
        </custom_item>
      </condition>

      <then>
        <report type:"PASSED">
          description : "2.3 Disable PostgreSQL Command History"
          info        : "On Linux/UNIX, the PostgreSQL client logs most interactive statements to a history file. The default PostgreSQL history file is named .psql_history in the user's home directory.

The PostgreSQL command history should be disabled.

Rationale:

Disabling the PostgreSQL command history reduces the probability of exposing sensitive information, such as passwords, encryption keys, or sensitive data."
          solution    : "For each OS user on the PostgreSQL server, perform the following steps to implement this setting:

Remove .psql_history if it exists.

rm -f ~<user>/.psql_history || true

Use either of the techniques below to prevent it from being created again:

Set the HISTFILE variable to /dev/null in ~<user>/.psqlrc

cat << EOF >> ~<user>/.psqlrc
\set HISTFILE /dev/null
EOF

Create ~<user>/.psql_history as a symbolic to /dev/null.

ln -s /dev/null $HOME/.psql_history

Set the PSQL_HISTORY variable for all users:

sudo echo 'PSQL_HISTORY=/dev/null' >> /etc/environment"
          reference   : "800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|MP-6,800-53r5|MP-6,CSCv8|3.5,CSF|PR.DS-3,CSF|PR.IP-6,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.8.3.2,ITSG-33|MP-6,LEVEL|1A,NESA|T1.4.1,NESA|T1.4.2,NIAv2|MS5b,NIAv2|MS6,NIAv2|MS9,NIAv2|MS10a,NIAv2|MS10b,NIAv2|MS10c,NIAv2|MS10d,NIAv2|MS10e,NIAv2|MS10f,NIAv2|MS11a,NIAv2|MS11b,NIAv2|MS12a,NIAv2|MS12b,NIAv2|MS12c,NIAv2|MS13,NIAv2|MS14,NIAv2|MS17,NIAv2|MS18a,NIAv2|MS18b,NIAv2|MS18c,NIAv2|MS20,NIAv2|MS21,NIAv2|NS16,QCSC-v1|3.2,QCSC-v1|6.2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
          show_output : YES
        </report>
      </then>
    </if>

    <report type:"WARNING">
      description : "2.4 Ensure Passwords are Not Stored in the service file"
      info        : "One can set a password in a PostgreSQL connection service file. Verify the password option is not used in a connection service file.

Rationale:

Using the password parameter may negatively impact the confidentiality of the user's password.

Impact:

The global configuration is by default readable for all users on the system.

This is needed for global defaults (prompt, port, socket, etc.).

If a password is present in this file, then all users on the system may be able to access it.

 NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Delete every password entry in the file(s) previously identified."
      reference   : "800-171|3.5.2,800-171|3.13.16,800-53|IA-5(1),800-53|SC-28,800-53|SC-28(1),800-53r5|IA-5(1),800-53r5|SC-28,800-53r5|SC-28(1),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv8|3.11,CSF|PR.AC-1,CSF|PR.DS-1,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(d),HIPAA|164.312(e)(2)(ii),ITSG-33|IA-5(1),ITSG-33|SC-28,ITSG-33|SC-28a.,ITSG-33|SC-28(1),LEVEL|1M,NESA|T5.2.3,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "4.1 Ensure Interactive Login is Disabled"
      info        : "When created, the PostgreSQL user may have interactive access to the operating system, which means that the PostgreSQL user could login to the host as any other user would.

Rationale:

Preventing the PostgreSQL user from logging in interactively may reduce the impact of a compromised PostgreSQL account. There is also more accountability, as accessing the operating system where the PostgreSQL server lies will require the user's own account and the apprpriate sudo configuration. Interactive access by the PostgreSQL user is unnecessary and should be disabled.

Impact:

This setting will prevent the PostgreSQL administrator from interactively logging into the operating system using the PostgreSQL user. Instead, the administrator will need to log in using one's own account and then sudo to the PostgreSQL administrator account."
      solution    : "Execute the following command:

sudo passwd -l postgres"
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
      cmd         : "grep postgres /etc/shadow | cut -d: -f1-2"
      expect      : "^postgres:!.+$"
    </custom_item>

    <report type:"WARNING">
      description : "4.2 Ensure sudo is configured correctly"
      info        : "It is common to have more than one authorized individual administering the PostgreSQL service at the Operating System level. It is also quite common to permit login privileges to individuals on a PostgreSQL host who otherwise are not authorized to access the server's data cluster and files. Administering the PostgreSQL data cluster, as opposed to its data, is to be accomplished via a localhost login of a regular UNIX user account. Access to the postgres superuser account is restricted in such a manner as to interdict unauthorized access. sudo satisfies the requirements by escalating ordinary user account privileges as the PostgreSQL RDBMS superuser.

Rationale:

Without sudo, there would be no capabilities to strictly control access to the superuser account nor to securely and authoritatively audit its use.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "As superuser root, execute the following commands:

# echo '%dba ALL=(postgres) PASSWD: ALL' > /etc/sudoers.d/postgres
# chmod 600 /etc/sudoers.d/postgres

This grants any Operating System user that is a member of the dba group the ability to use sudo -iu postgres to become the postgres user.

Ensure that all Operating System user's that need such access are members of the group."
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|4.3,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
    </report>

    <report type:"WARNING">
      description : "5.1 Do Not Specify Passwords in the Command Line"
      info        : "When a command is executed on the command line, for example

psql postgresql://postgres:PASSWORD@host

the password may be visible in the user's shell/command history or in the process list, thus exposing the password to other entities on the server.

Rationale:

If the password is visible in the process list or user's shell/command history, an attacker will be able to access the PostgreSQL database using the stolen credentials.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Use the --password or -W terminal parameter without directly specifying the password and then enter the password when prompted.
Substitute <user> with your username, e.g., root:

psql -u <user> --password

Do not use a Connection URI with password included, e.g. psql postgresql://postgres:PASSWORD@host

If desired, configure a .pgpass file with the proper credentials and secure the file appropriately."
      reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|1M,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
    </report>

    <report type:"WARNING">
      description : "5.3 Ensure login via 'local' UNIX Domain Socket is configured correctly"
      info        : "A remote host login, via SSH, is arguably the most secure means of remotely accessing and administering the PostgreSQL server. Once connected to the PostgreSQL server, using the psql client, via UNIX DOMAIN SOCKETS, while using the peer authentication method is the most secure mechanism available for local database connections. Provided a database user account of the same name of the UNIX account has already been defined in the database, even ordinary user accounts can access the cluster in a similarly highly secure manner.

Rationale:

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Creation of a database account that matches the local account allows PEER authentication:

# psql -c 'CREATE ROLE user1 WITH LOGIN;'
CREATE ROLE

Execute the following as the UNIX user account, the default authentication rules should now permit the login:

# su - user1
# whoami
user1
# psql -u user1 -d postgres
postgres=>

As per the host-based authentication rules in $PGDATA/pg_hba.conf, all login attempts via UNIX DOMAIN SOCKETS are processed on the line beginning with local.
This is the minimal rule that must be in place allowing PEER connections:

# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             all                                     peer

Once edited, the server process must reload the authentication file before it can take effect. Improperly configured rules cannot update i.e. the old rules remain in place. The PostgreSQL logs will report the outcome of the SIGHUP:

postgres=# select pg_reload_conf();
 pg_reload_conf
----------------
 t
(1 row)

The following examples illustrate other possible configurations. The resultant 'rule' of success/failure depends upon the first matching line:

# allow only postgres user logins locally via UNIX socket
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             postgres                                peer

# allow all local users via UNIX socket
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             all                                     peer

# allow all local users, via UNIX socket, only if they are connecting to a db named the same as their username
# e.g. if user 'bob' is connecting to a db named 'bob'
# TYPE  DATABASE        USER                                    METHOD
local   samerole        all                                     peer

# allow only local users, via UNIX socket, who are members of the 'rw' role in the db
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             +rw                                     peer"
      reference   : "800-171|3.5.3,800-53|IA-2(1),800-53r5|IA-2(1),CN-L3|7.1.2.7(b),CSCv7|4.5,CSCv8|6.5,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2(1),LEVEL|1M,NESA|T5.4.2,NIAv2|AM36,NIAv2|VL3c,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|1.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
    </report>

    <report type:"WARNING">
      description : "5.4 Ensure login via 'host' TCP/IP Socket is configured correctly"
      info        : "A large number of authentication METHODs are available for hosts connecting using TCP/IP sockets, including:

trust

reject

md5

scram-sha-256

password

gss

sspi

ident

pam

ldap

radius

cert

METHODs trust, password, and ident are not to be used for remote logins.

METHOD md5 is the most popular and can be used in both encrypted and unencrypted sessions, however, it is vulnerable to packet replay attacks. It is recommended that scram-sha-256 be used instead of md5.

Use of the gss, sspi, pam, ldap, radius, and cert METHODs are dependent upon the availability of external authenticating processes/services and thus are not covered in this benchmark.

Rationale:

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Confirm a login attempt has been made by looking for a logged error message detailing the nature of the authenticating failure. In the case of failed login attempts, whether encrypted or unencrypted, check the following:

The server should be sitting on a port exposed to the remote connecting host i.e. NOT ip address 127.0.0.1

listen_addresses = '*'

An authenticating rule must exist in the file pg_hba.conf

This example permits encrypted sessions for the postgres role and denies all unencrypted sessions for the postgres role:

# TYPE    DATABASE           USER            ADDRESS           METHOD
hostssl    all             postgres         0.0.0.0/0          scram-sha-256
hostnossl  all             postgres         0.0.0.0/0          reject

The following examples illustrate other possible configurations. The resultant 'rule' of success/failure depends upon the first matching line.

# allow 'postgres' user only from 'localhost/loopback' connections
# and only if you know the password
# (accepts both SSL and non-SSL connections)
# TYPE    DATABASE        USER            ADDRESS                 METHOD
host      all             postgres        127.0.0.1/32            scram-sha-256

# allow users to connect remotely only to the database named after them,
# with the correct user password:
# (accepts both SSL and non-SSL connections)
# TYPE    DATABASE        USER            ADDRESS                 METHOD
host      samerole        all             0.0.0.0/0               scram-sha-256

# allow only those users who are a member of the 'rw' role to connect
# only to the database named after them, with the correct user password:
# (accepts both SSL and non-SSL connections)
# TYPE    DATABASE        USER            ADDRESS                 METHOD
host      samerole        +rw             0.0.0.0/0               scram-sha-256

Default Value:

The availability of the different password-based authentication methods depends on how a user's password on the server is encrypted (or hashed, more accurately). This is controlled by the configuration parameter password_encryption at the time the password is set.

If a password was encrypted using the scram-sha-256 setting, then it can be used for the authentication methods scram-sha-256, md5, and password (but password transmission will be in plain text in the latter case).

If a password was encrypted using the md5 setting, then it can be used only for the md5 and password authentication method specifications (again, with the password transmitted in plain text in the latter case).

Previous PostgreSQL releases supported storing the password on the server in plain text. This is no longer possible.

To check the currently stored password hashes, see the system catalog pg_authid.

To upgrade an existing installation from md5 to scram-sha-256, after having ensured that all client libraries in use are new enough to support SCRAM, set password_encryption = 'scram-sha-256' in postgresql.conf, reload the postmaster, make all users set new passwords, and change the authentication method specifications in pg_hba.conf to scram-sha-256."
      reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|1M,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
    </report>

    <if>
      <condition auto:"FAILED" type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "fips-mode-setup"
          cmd         : "fips-mode-setup --check"
          expect      : "FIPS mode is enabled."
        </custom_item>

        <custom_item>
          type        : CMD_EXEC
          description : "openssl version"
          cmd         : "openssl version"
          expect      : "FIPS"
        </custom_item>
      </condition>

      <then>
        <report type:"PASSED">
          description : "6.7 Ensure FIPS 140-2 OpenSSL Cryptography Is Used"
          info        : "Install, configure, and use OpenSSL on a platform that has a NIST certified FIPS 140-2 installation of OpenSSL. This provides PostgreSQL instances the ability to generate and validate cryptographic hashes to protect unclassified information requiring confidentiality and cryptographic protection, in accordance with the data owner's requirements.

Rationale:

Federal Information Processing Standard (FIPS) Publication 140-2 is a computer security standard developed by a U.S. Government and industry working group for validating the quality of cryptographic modules. Use of weak, or untested, encryption algorithms undermines the purposes of utilizing encryption to protect data. PostgreSQL uses OpenSSL for the underlying encryption layer.

The database and application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated. It is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.

For detailed information, refer to NIST FIPS Publication 140-2, Security Requirements for Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant. The security functions validated as part of FIPS 140-2 for cryptographic modules are described in FIPS 140-2 Annex A. Currently, only Red Hat Enterprise Linux is certified as a FIPS 140-2 distribution of OpenSSL. For other operating systems, users must obtain or build their own FIPS 140-2 OpenSSL libraries."
          solution    : "Configure OpenSSL to be FIPS compliant as PostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS 140-2 compliant, see the official RHEL Documentation. Below is a general summary of the steps required:
To switch the system to FIPS mode in RHEL 9:

# fips-mode-setup --enable
Kernel initramdisks are being regenerated. This might take some time.
Setting system policy to FIPS
Note: System-wide crypto policies are applied on application start-up.
It is recommended to restart the system for the change of policies
to fully take place.
FIPS mode will be enabled.
Please reboot the system for the setting to take effect.

Restart your system to allow the kernel to switch to FIPS mode:

# reboot

After the restart, you can check the current state of FIPS mode:

# fips-mode-setup --check
FIPS mode is enabled."
          reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
          show_output : YES
        </report>
      </then>
    </if>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "6.10 Ensure Weak SSL/TLS Ciphers Are Disabled"
      info        : "The PostgreSQL ssl_ciphers directive specifies which Cipher Suites are allowed in the negotiation with the client.

In cryptography, perfect forward secrecy (PFS), also known as forward secrecy (FS), is a feature of specific key exchange protocols that give assurance that the session keys will not be compromised even if the private key of the server is compromised. For instance, RSA does not provide PFS, while the ECDHE (Elliptic-Curve Diffie-Hellman Ephemeral) and DHE (Diffie-Hellman Ephemeral) provides PFS.

ECDHE is the stronger protocol and should be preferred, while DHE may be allowed for greater compatibility with older clients. Only Cipher Suites with either the ECDHE or the DHE key exchange are allowed.

Rationale:

The SSL/TLS protocols support a large number of Cipher Suites including many weak and medium strength algorithms that are subject to man-in-the middle attacks and information disclosure. Some implementations even support the NULL Cipher Suite which allows a TLS connection without any cryptographic protection. Therefore, it is critical to ensure the configuration only allows strong algorithms greater than or equal to 128-bit to be negotiated with the client. Stronger 256-bit algorithms should be allowed and preferred.

Furthermore, during the TLS handshake, after the initial Client Hello and Server Hello, there is a pre-master secret generated, which is used to generate the master secret, and in turn generates the session key. When using protocols that do not provide forward secrecy, such as RSA, the pre-master secret is encrypted by the client with the server's public key and sent over the network. However, with protocols such as ECDHE (Elliptic-Curve Diffie-Hellman Ephemeral) the pre-master secret is not sent over the wire, even in encrypted format. The key exchange arrives at the shared secret in the clear using ephemeral keys that are not stored or used again. With forward secrecy, each session has a unique key exchange, so that future sessions are protected.

Note This recommendation is primarily targeted at those installs that cannot run in FIPS-mode, or need to further refine the allowable cipher list."
      solution    : "Add or modify the ssl_ciphers directive to the following value in the PostgreSQL configuration file (postgresql.conf):

ssl_ciphers = 'TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_128_CCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,ECDHE-ECDSA-AES256-CCM,ECDHE-ECDSA-AES128-CCM,DHE-RSA-AES256-CCM,DHE-RSA-AES128-CCM,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES128-GCM-SHA256,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES128-GCM-SHA256,DHE-RSA-AES256-GCM-SHA384,DHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,DHE-RSA-CHACHA20-POLY1305'"
      reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
      file        : "@PG_CONF@"
      regex       : "^[^#]*ssl_ciphers"
      expect      : "^[^#]*ssl_ciphers[\\s]*=[\\s]*[\"']TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_128_CCM_SHA256,TLS_CHACHA20_POLY1305_SHA256,ECDHE-ECDSA-AES256-CCM,ECDHE-ECDSA-AES128-CCM,DHE-RSA-AES256-CCM,DHE-RSA-AES128-CCM,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES128-GCM-SHA256,DHE-DSS-AES256-GCM-SHA384,DHE-DSS-AES128-GCM-SHA256,DHE-RSA-AES256-GCM-SHA384,DHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,DHE-RSA-CHACHA20-POLY1305[\"']"
    </custom_item>

    <custom_item>
      type        : RPM_CHECK
      description : "8.2 Ensure the backup and restore tool, 'pgBackRest', is installed and configured"
      info        : "pgBackRest aims to be a simple, reliable backup and restore system that can seamlessly scale up to the largest databases and workloads. Instead of relying on traditional backup tools like tar and rsync, pgBackRest implements all backup features internally and uses a custom protocol for communicating with remote systems. Removing reliance on tar and rsync allows for better solutions to database-specific backup challenges. The custom remote protocol allows for more flexibility and limits the types of connections that are required to perform a backup which increases security.

Rationale:

The native PostgreSQL backup facility pg_dump provides adequate logical backup operations but does not provide for Point In Time Recovery (PITR). The PostgreSQL facility pg_basebackup performs a physical backup of the database files and does provide for PITR, but it is constrained by single threading. Both of these methodologies are standard in the PostgreSQL ecosystem and appropriate for particular backup/recovery needs. pgBackRest offers another option with much more robust features and flexibility.

pgBackRest is open-source software developed to perform efficient backups on PostgreSQL databases that measure in tens of terabytes and greater. It supports per-file checksums, compression, partial/failed backup resume, high-performance parallel transfer, asynchronous archiving, tablespaces, expiration, full/differential/incremental backups, local/remote operation via SSH or TLS, hard-linking, restore, backup encryption, and more. pgBackRest is written in C and does not depend on rsync or tar but instead performs its own deltas which give it maximum flexibility. Finally, pgBackRest provides an easy-to-use internal repository listing backup details accessible via the pgbackrest info command, as illustrated below.

$ pgbackrest info

stanza: proddb01

status: ok

db (current)

  wal archive min/max (14): 000000010000000000000012 / 000000010000000000000017

      full backup: 20231012-153106F

          timestamp start/stop: 2023-10-12 15:31:06 / 2023-10-12 15:31:49

          wal start/stop: 000000010000000000000012 / 000000010000000000000012

          database size: 29.4MB, backup size: 29.4MB

          repository size: 3.4MB, repository backup size: 3.4MB

      diff backup: 20231012-153106F_20231012-173109D

          timestamp start/stop: 2023-10-12 17:31:09 / 2023-10-12 17:31:19

          wal start/stop: 000000010000000000000015 / 000000010000000000000015

          database size: 29.4MB, backup size: 2.6MB

          repository size: 3.4MB, repository backup size: 346.8KB

          backup reference list: 20231012-153106F

      incr backup: 20231012-153106F_20231012-183114I

          timestamp start/stop: 2023-10-12 18:31:14 / 2023-10-12 18:31:22

          wal start/stop: 000000010000000000000017 / 000000010000000000000017

          database size: 29.4MB, backup size: 8.2KB

          repository size: 3.4MB, repository backup size: 519B

          backup reference list: 20231012-153106F, 20231012-153106F_20231012-173109D"
      solution    : "pgBackRest is not installed nor configured for PostgreSQL by default, but instead is maintained as a GitHub project. Fortunately, it is a part of the PGDG repository and can be easily installed:

# whoami
root
# dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
<snip>
Installed:
  epel-release-9-7.el9.noarch

Complete!
# dnf -y install pgbackrest
<snip>
Installed:
  libssh2-1.10.0-1.el9.x86_64                          pgbackrest-2.48-1PGDG.rhel9.x86_64

Complete!

Once installed, pgBackRest must be configured for things like stanza name, backup location, retention policy, logging, etc. Please consult the configuration guide.
If employing pgBackRest for your backup/recovery solution, ensure the repository, base backups, and WAL archives are stored on a reliable file system separate from the database server. Further, the external storage system where backups reside should have limited access to only those system administrators as necessary. Finally, as with any backup/recovery solution, stringent testing must be conducted. A backup is only good if it can be restored successfully."
      reference   : "800-171|3.8.9,800-53|CP-9,800-53|CP-10,800-53r5|CP-9,800-53r5|CP-10,CSCv7|10.1,CSCv7|10.2,CSCv8|11.2,CSF|PR.IP-4,CSF|RC.RP-1,CSF|RS.RP-1,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(ii),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|1A,NESA|M5.2.3,NESA|T2.2.4,QCSC-v1|5.2.3,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
      rpm         : "pgbackrest-0.0.0-0"
      operator    : "gt"
      required    : YES
    </custom_item>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_PostgreSQL_14_v 1.2.0_L1_OS_Linux.audit from CIS PostgreSQL 14 Benchmark v 1.2.0"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://workbench.cisecurity.org/benchmarks/17004"
    </report>
  </else>
</if>

</check_type>
