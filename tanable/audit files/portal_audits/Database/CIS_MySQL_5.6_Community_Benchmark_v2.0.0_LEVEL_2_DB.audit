#TRUSTED 191018ef39392b9586a9cba16341cef15135fac160c2d98c619c1d0d848d805b545f966b9a421ce7a8bd8572a62f30d15620ec80ac361a7ed00fd3a6f499ed92680d552d1bfb0dd45f180f85e53715a1c8725df2803e2f67a951104e8e2db6441991e5ee10768475fc6eece86cebe7cc7a29dd91a02344356c258cec62454894505778d3d128dc3566601631868086b6623bfe7ff245caa34e3ebfb56096943155b55059c85f3bc2d69c9865270db0fb1d9b3ffc767ed4bd344ce9b67faa26c95a7f6cb5658d34b69a35802c031f46b8e141a61877812357137b5b205a84aa4d31f02d57d2768a5b7526697444f5337ba3e083e6da983f019400162b271f40241221c130482a9b24419e1441ff08dbbefa9742c5384ed684d1f92cba244b1a7e73f54deee26f113dafb6369c424fbf56b5631e5f2b534da0d5f1bbd4448fd64193788753c2b6d80f80076e962a56e160fa8dcb81deffa91b387712b79e7827535aaeb1480f8efc082dd2aa77f386afbf2ba56045d2c9ba93940978a7d3bfedf4fdb26057993c1295d5a371321ebc1cdc78fae6442ac9a85d0097e2feda61456490c1beffe9808221a972e5e65b7c77522b063ff018178d76247176f982e71955863b90f455362f4d196a088cab46838a3653d8f264d584e1310dc1ef2a0eee03825e9ba2ef1ea47ff82ed9d085d225d4b9f062cf9d162a9699e0d203c931e0cb
#TRUST-RSA-SHA256 0ae9a3a50493a1491cab41bb2dcc5c1c2add3e4e39959644bab4aaf77e86f4cdb9c2f565a7ccb2d7f7adad80f5c974b10d86c83c36216d3c5bf592660925205bd7ef72cb4a32adf0a7ba380ccf4f5b98630f3154d4b1db6466a42877bc4651e89a4fe2c10ab2bd98ce8bb35c65d7e25b49c94f2fe8a7fe51ea8b88ab886bf424ff752700f8ca780b023a0797f65464371587d80cbb1eed62d67722e3c51116e4359e8d8b2afe2c1265e9ac22c743b152582aa35953a9c7c112c08770ea5c2666a4fab16e5fcb2431f98602f8bb87d17c0517c3d316aa4ad2872b88b55eb6a9bc8e6579d37c8b43a0607cd044df61e1cab81c708fb36a22c264f764290d53ca5385365e55249d5d05eeaf21c0bf0c6a988b4162c0ececfe7450e0da3becd76b829f6de41049a694082d0946aad1d8baf53c7eb8f8d6a32d44d3463c0facd84676c27eabdbc025a6fd9f305a354d0635a108103a97076df0daca7d93694514331adbfa97f8be194d13818ef5f432a31537c59752c163d2fd87053274e62ab93505cdfa37e7c1d54ba0822d0f5a207682864ac8f2062f6fd5730d27b09f6971577b5a7fc27c05a1bc70dd2b8b9a243da5c840e6fc1928d73b5328055b0c55cc543ba80821029baf19ab591d39492aea8db214bcee35b92687de9d40324cf2a8f6928218e56d6264263ab947adc82ad7fe3fd4715781c1d94d711080d29e957df211
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.5 $
# $Date: 2024/06/17 $
#
# Description : This document implements the security configuration as recommended by the
#               CIS Oracle MySQL 5.6 Community Edition Benchmark
#
#<ui_metadata>
#<display_name>Sunset - CIS MySQL 5.6 Community Database L2 v2.0.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>MySQL 5.6 Community</name>
#  <profile>L2 DB</profile>
#  <version>2.0.0</version>
#  <link>https://workbench.cisecurity.org/files/3859</link>
#</spec>
#<labels>database,cis,mysql,mysql_5,mysql_5.6,mysql_5.6_community,update_20230227</labels>
#<benchmark_refs>CCE,CIS_Recommendation,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>ADMIN_USER</name>
#    <default>root</default>
#    <description>MySQL Admin User</description>
#    <info>This is your administrative user. Default is root.</info>
#    <value_type>SQL_REQUEST_VALUE</value_type>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Database" db_type:"MySQL" version:"1">
<group_policy:"MySQL Community CIS 2.0.0">

<if>
  <condition type:"AND">
    <custom_item>
      type         : SQL_POLICY
      description  : "MySQL 5.6 is installed"
      sql_request  : "show variables like 'version' ;"
      sql_types    : POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect   : "version", regex:"5\.6"
      check_option : CAN_NOT_BE_NULL
    </custom_item>

    <custom_item>
      type         : SQL_POLICY
      description  : "MySQL 5.6 Community Edition is installed"
      sql_request  : "show variables like 'license' ;"
      sql_types    : POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect   : "license", "GPL"
      check_option : CAN_NOT_BE_NULL
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_MySQL_5.6_Community_Benchmark_v2.0.0_LEVEL_2_DB.audit from CIS Oracle MySQL 5.6 Community Edition Benchmark"
      see_also    : "https://workbench.cisecurity.org/files/3859"
    </report>

    <report type:"WARNING">
      description : "2.1.5 Point-in-Time Recovery"
      info        : "With binlogs it is possible to implement point-in-time recovery. This makes it possible to restore the changes between the last full backup and the point-in-time.

Enabling binlogs is not sufficient. The binlogs need to be backed up to separate media. The restore procedure should be created and tested. The data in the binlog files may contain sensitive information which needs be stored in the proper location with restrictive permissions and may require encryption.

Rationale:

Using binlogs can reduce the amount of information lost when recovering from a backup.

Impact:

Binlogs can grow quite large and take up a large amount of space so auto remove needs to be put into place.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Enable binlogs and create and test a restore procedure."
      reference   : "800-171|3.8.9,800-53|CP-9,800-53|CP-10,800-53r5|CP-9,800-53r5|CP-10,CSCv7|10.2,CSCv8|11.2,CSF|PR.IP-4,CSF|RC.RP-1,CSF|RS.RP-1,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(ii),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|2M,NESA|M5.2.3,NESA|T2.2.4,QCSC-v1|5.2.3,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3859"
    </report>

    <custom_item>
      type        : SQL_POLICY
      description : "2.7 Ensure AES Encryption Mode for AES_ENCRYPT/AES_DECRYPT is Configured Correctly"
      info        : "A block encryption mode with a Cipher Block Chaining (CBC) mode value and key length of 256 is recommended when using the AES_ENCRYPT() and AES_DECRYPT() functions for encryption.

Rationale:

The default for backward compatibility on upgraded MySQL databases is aes-128-ecb. Using 128-bit keys does not provide sufficient security. Regardless of whether breaking the lowest level is beyond existing technology, larger key sizes are needed to better protect data and satisfy regulations.

Impact:

Configuring a key length of 256 may impact backwards compatibility."
      solution    : "Add the following lines to the MySQL server's /etc/my.cnf:

For example, if Block Encryption Mode for aes-256 CBC

block_encryption_mode=aes-256-cbc

Default Value:

aes-128-ecb"
      reference   : "800-53|SA-15,800-53r5|SA-15,CSCv7|18.5,CSCv8|16.11,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),LEVEL|2A,NIAv2|SS5,NIAv2|SS6a,QCSC-v1|4.2"
      see_also    : "https://workbench.cisecurity.org/files/3859"
      sql_request : "select @@block_encryption_mode;"
      sql_types   : POLICY_VARCHAR
      sql_expect  : regex:"aes-256-(ECB|CBC|CFB1|CFB8|CFB128|OFB)"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : SQL_POLICY
          description : "auth_socket enabled"
          sql_request : " SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE 'auth%';"
          sql_types   : POLICY_VARCHAR, POLICY_VARCHAR
          sql_expect  : "auth_socket", "ACTIVE"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : SQL_POLICY
          description : "2.8 Ensure Socket Peer-Credential Authentication is Used Appropriately"
          info        : "The server-side auth_socket authentication plugin, authenticates clients that connect to the MySQL server from the local host through the Unix socket file. Users authenticated by the auth_socket need not specify a password when connecting to the server. However, users authenticated by the auth_socket plugin are restricted from connecting remotely; they can only connect from the local host through the Unix socket file. This method is only suitable in situations where the server administrator OS account access is restricted.

Rationale:

This method may be desirable in specific cases, including:

The Linux system where MySQL is running is dedicated to the MySQL server and only the MySQL DBA and OS Admin have access.

When control over user authentication is centralized in the operating system.

It is desirable that audit trails in the database and operating system can use the same user names.

For certain other narrow installation use cases auth_socket may be desirable.

Only local connections for a user.

Impact:

Things to consider when using the operating system to authenticate users:

The user must have an operating system account on the computer which must be accessed.

If a user has logged in using this method and steps away from the terminal, another user could easily log in because this user does not need any passwords or credentials. This could pose a serious security problem.

When an operating system is used to authenticate database users, managing distributed database environments and database links requires special care. Special care must also be taken not to leave such a terminal unlocked and unattended. Hence, we recommend that you carefully evaluate your requirements before opting for auth_socket.

This will not work where distributed connections are required.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution    : "Add these options under the [mysqld] option group in the MySQL /etc/my.cnf:

plugin-load-add=auth_socket.so
auth_socket=FORCE_PLUS_PERMANENT

For example:

For an OS user which can login to MySQL using auth_socket:

CREATE USER '<user>'@'localhost' IDENTIFIED WITH auth_socket;

The user can then login using:

mysql -u <user>"
          reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|2M,NESA|T1.2.1,NESA|T1.2.2"
          see_also    : "https://workbench.cisecurity.org/files/3859"
          sql_request : "select user, host, plugin from mysql.user where plugin = 'auth_socket';"
          sql_types   : POLICY_VARCHAR
          sql_expect  : "ManualReviewRequired"
          severity    : MEDIUM
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "2.8 Ensure Socket Peer-Credential Authentication is Used Appropriately"
          info        : "The server-side auth_socket authentication plugin, authenticates clients that connect to the MySQL server from the local host through the Unix socket file. Users authenticated by the auth_socket need not specify a password when connecting to the server. However, users authenticated by the auth_socket plugin are restricted from connecting remotely; they can only connect from the local host through the Unix socket file. This method is only suitable in situations where the server administrator OS account access is restricted.

Rationale:

This method may be desirable in specific cases, including:

The Linux system where MySQL is running is dedicated to the MySQL server and only the MySQL DBA and OS Admin have access.

When control over user authentication is centralized in the operating system.

It is desirable that audit trails in the database and operating system can use the same user names.

For certain other narrow installation use cases auth_socket may be desirable.

Only local connections for a user.

Impact:

Things to consider when using the operating system to authenticate users:

The user must have an operating system account on the computer which must be accessed.

If a user has logged in using this method and steps away from the terminal, another user could easily log in because this user does not need any passwords or credentials. This could pose a serious security problem.

When an operating system is used to authenticate database users, managing distributed database environments and database links requires special care. Special care must also be taken not to leave such a terminal unlocked and unattended. Hence, we recommend that you carefully evaluate your requirements before opting for auth_socket.

This will not work where distributed connections are required."
          solution    : "Add these options under the [mysqld] option group in the MySQL /etc/my.cnf:

plugin-load-add=auth_socket.so
auth_socket=FORCE_PLUS_PERMANENT

For example:

For an OS user which can login to MySQL using auth_socket:

CREATE USER '<user>'@'localhost' IDENTIFIED WITH auth_socket;

The user can then login using:

mysql -u <user>"
          reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|2M,NESA|T1.2.1,NESA|T1.2.2"
          see_also    : "https://workbench.cisecurity.org/files/3859"
        </report>
      </else>
    </if>

    <custom_item>
      type        : SQL_POLICY
      description : "2.9 Ensure MySQL is Bound to an IP Address"
      info        : "By default, the MySQL server accepts TCP/IP connections from MySQL user accounts on all server host IPv6 and IPv4 interfaces. You can make this configuration more restrictive by setting the bind_address configuration option to a specific IPv4 or IPv6 address so that the server only accepts TCP/IP connections on that address.

Rationale:

Limiting the IP address provides additional controls and restrictions on how client applications can connect to MySQL. If not configured to a specific IP all IPs for this server can be used to connect to MySQL."
      solution    : "For example, to have the MySQL server only accept connections on a specific IPv4 address, add an entry similar to this under the [mysqld] option group in the MySQL /etc/my.cnf:

bind_address=192.0.2.24

In this case, clients can connect to the server using --host=192.0.2.24. Connections on other server host addresses are not permitted.

Default Value:

*"
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|PL-8,800-53|SA-8,800-53r5|PL-8,800-53r5|SA-8,CSCv8|16.10,CSF|ID.AM-3,CSF|PR.IP-2,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,QCSC-v1|4.2,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3859"
      sql_request : "SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME = 'bind_address';"
      sql_types   : POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect  : "bind_address", regex:"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "2.10 Ensure Only Approved Ciphers are Used"
      info        : "MySQL supports multiple encryption ciphers. Ciphers can vary in strength, speed and overhead.

Rationale:

Requiring clients attempting to connect to MySQL to use strong ciphers protects data in transit.

Impact:

Connections attempting to use an unsupported cipher will fail."
      solution    : "Set ssl_cipher in the my.cnf to an approved cipher suite:

ssl_cipher='ECDHE-ECDSA-AES128-GCM-SHA256'"
      reference   : "800-53|SA-15,800-53r5|SA-15,CSCv7|18.5,CSCv8|16.11,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),LEVEL|2A,NIAv2|SS5,NIAv2|SS6a,QCSC-v1|4.2"
      see_also    : "https://workbench.cisecurity.org/files/3859"
      sql_request : "SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME IN ('ssl_cipher');"
      sql_types   : POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect  : "ssl_cipher", "ECDHE-ECDSA-AES128-GCM-SHA256"
    </custom_item>

    <custom_item>
      type         : SQL_POLICY
      description  : "4.9 Ensure 'sql_mode' Contains 'STRICT_ALL_TABLES'"
      info         : "When data changing statements are made (i.e., INSERT, UPDATE), MySQL can handle invalid or missing values differently depending on whether strict SQL mode is enabled. When strict SQL mode is enabled, data may not be truncated or otherwise 'adjusted' to make the data changing statement work.

Rationale:

Without strict mode the server tries to proceed with the action when an error might have been a more secure choice. For example, by default MySQL will truncate data if it does not fit in a field, which can lead to unknown behavior, or be leveraged by an attacker to circumvent data validation.

Impact:

Applications relying on the MySQL database should be aware that STRICT_ALL_TABLES is in use, such that error conditions are handled appropriately."
      solution     : "Set STRICT_ALL_TABLES to the sql_mode in the server's global configuration, for example:

SET GLOBAL sql_mode ='STRICT_ALL_TABLES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';

Default Value:

NO_ENGINE_SUBSTITUTION"
      reference    : "800-171|3.13.1,800-171|3.13.2,800-53|PL-8,800-53|SA-8,800-53r5|PL-8,800-53r5|SA-8,CSCv8|16.10,CSF|ID.AM-3,CSF|PR.IP-2,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,QCSC-v1|4.2,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2"
      see_also     : "https://workbench.cisecurity.org/files/3859"
      sql_request  : "SHOW VARIABLES LIKE 'sql_mode';"
      sql_types    : POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect   : "sql_mode", regex:"STRICT_ALL_TABLES"
      check_option : CAN_NOT_BE_NULL
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "5.3 Ensure 'PROCESS' is Not Granted to Non-Administrative Users"
      info        : "The PROCESS privilege found in the mysql.user table determines whether a given user can see statement execution information for all sessions.

Rationale:

The PROCESS privilege allows principals to view currently executing MySQL statements beyond their own, including statements used to manage passwords. This may be leveraged by an attacker to compromise MySQL or to gain access to potentially sensitive data.

Impact:

Users denied the PROCESS privilege may also be denied use of SHOW ENGINE."
      solution    : "Perform the following steps to remediate this setting:

Enumerate the non-administrative users found in the result set of the audit procedure

For each user, issue the following SQL statement (replace <user> with the non-administrative user):

REVOKE PROCESS ON *.* FROM '<user>';"
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|14.6,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|2M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3859"
      sql_request : "SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'PROCESS';"
      sql_types   : POLICY_VARCHAR
      sql_expect  : regex:"\'@ADMIN_USER@\'@.+"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "6.3 Ensure 'log_warnings' is Set to '2'"
      info        : "The log_warnings system variable, enabled by default, provides additional information to the MySQL log. A value of 1 enables logging of warning messages, and higher integer values tend to enable more logging.

Rationale:

This might help to detect malicious behavior by logging communication errors and aborted connections."
      solution    : "Perform the following actions to remediate this setting:

Open the MySQL configuration file (my.cnf)

Ensure the following line is found in the mysqld section

log-warnings = 2

Default Value:

The option is enabled (1) by default."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|6.3,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3859"
      sql_request : "SHOW GLOBAL VARIABLES LIKE 'log_warnings';"
      sql_types   : POLICY_VARCHAR, POLICY_INTEGER
      sql_expect  : "log_warnings", "2"
    </custom_item>

    <report type:"WARNING">
      description : "6.5 Ensure Audit Logging Is Enabled"
      info        : "Audit logging is not really included in the Community Edition of MySQL - only the general log. Using the general log is possible, but not practical, because it grows quickly and has an adverse impact on server performance.

Nevertheless, enabling audit logging is an important consideration for a production environment, and third-party tools do exist to help with this. Enable audit logging for

Interactive user sessions

Application sessions (optional)

Rationale:

Audit logging helps to identify who changed what and when. The audit log might be used as evidence in investigations. It might also help to identify what an attacker was able to accomplish.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Acquire a third-party MySQL logging solution as available from a variety of sources including, but not necessarily limited to, the following:

The General Query Log

MySQL Enterprise Audit

MariaDB Audit Plugin for MySQL

McAfee MySQL Audit"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-2,800-53|AU-7,800-53|AU-12,800-53r5|AU-2,800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(c),CN-L3|8.1.4.3(a),CSCv7|6.2,CSCv8|8.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-2,ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|2M,NESA|M1.2.2,NESA|M5.5.1,NIAv2|AM7,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|SS30,NIAv2|VL8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3859"
    </report>

    <custom_item>
      type         : SQL_POLICY
      description  : "9.3 Ensure 'master_info_repository' Is Set to 'TABLE'"
      info         : "The master_info_repository setting determines to where a SLAVE logs MASTER status and connection information. The options are FILE or TABLE. Note also that this setting is associated with the sync_master_info setting as well.

Rationale:

The password which the client uses is stored in the MASTER info repository, which by default is a plaintext file. The TABLE MASTER info repository is a bit safer, but with filesystem access it's still possible to gain access to the password the SLAVE is using."
      solution     : "Perform the following actions to remediate this setting:

Open the MySQL configuration file (my.cnf)

Locate master_info_repository

Set the master_info_repository value to TABLE

Note: If master_info_repository does not exist, add it to the configuration file.

Default Value:

FILE"
      reference    : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2A,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also     : "https://workbench.cisecurity.org/files/3859"
      sql_request  : "SHOW GLOBAL VARIABLES LIKE 'master_info_repository';"
      sql_types    : POLICY_VARCHAR, POLICY_VARCHAR
      sql_expect   : "master_info_repository", "TABLE"
      check_option : CAN_NOT_BE_NULL
    </custom_item>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_MySQL_5.6_Community_Benchmark_v2.0.0_LEVEL_2_DB.audit from CIS Oracle MySQL 5.6 Community Edition Benchmark"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://workbench.cisecurity.org/files/3859"
    </report>
  </else>
</if>

</group_policy>
</check_type>
