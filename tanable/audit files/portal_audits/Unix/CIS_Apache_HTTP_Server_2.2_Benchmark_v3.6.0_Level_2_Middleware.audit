#TRUSTED 91ee982b3be794faa28bc537dc927244361ae043cd34eadb6b1c6bf513159bd0861b386473c9c5daa8177d4edc90c2f19d9420bf4db39bfde1cbc0ae20d52fb901cb7ea1a337a13c4698dbd8ca850c9f0d4a0ebe3a220ea1005f25b374db0e31e32d93e72dddd9eb2a66af305cb967f6db01241bb57e94e591ed5808bc01ad6733d52b03a39db7c4a3566cf1ca967418128f9641ecbe3921b48ccf469358b743e8884fd88fb504d4eaff5fd5ef0e3cdfb552381b822c1843d0cac55bad056723cb4768c96d6c233fee2851e3c5b9675a803f3b0b45cab1c0e95c09ec5a73b61a63875b30e8ddabc3dafe35e3c73b89cd3ef503f87acab8c16c8cc6ce6d2a72403456ff214d7566b18b38a6ead4012b2856e24bb2d03c49174badf82260911576e2b4845175681e0b7f58791fb86bd9f1723f40ad7428170cdb0f358d6a242d8add40f75649f2827da01ecf976092b3d5beffc4ff570a2ed3e86dd5ed113b6a7f5afcd6919201eb4cb1783ac6d8d65d689e37ceb1b097047558dc4d99f6393bcd575766633cf2cfae7f66c333cdd826ea431455a61f04e43d152e68c04acae7cdf5e8532e2a68509db3f57c31e83a759fc0d4932829d7867375d5b289150d26b9990f46a1ceeeab60ff5c57882128fc36ae9deec0cc1cd221ad2b8260061446de5624431cc40e977edede9f86e2a4d992a867d9e7f30b11b7cad3b4c05d214c08
#TRUST-RSA-SHA256 8a8c2f1353ee27be4920848e8a88d526b36cf3b18792d11938da046b50929f4fb9ea2ddda3941473ba9a976c9fc2b500fcb03156690b21517e3ea2e22442368e1065f93aeb607d75f2fedb64ccd837ceb815145dd0fbb90b1649a489e9d3936bca18fb573acebcc1bffbfb85f554d49e242f6a0ba80645a6f2e11ee8e89ad949f44d9c02c04b0de7005489706a4a0a37ebae3ce8522c2f97ffd35a4969fc57304ea75dec1a44635c1dcc36e0c789526d67f40cf9e9de1fe8227890ea423271ead0f2a0a4a431978984d94532cc3e729b926ea52beef6596b69464bc06b9b5ee18143837f328f8cbd321d77c8bbbea0d177e9267b039931f6e5a04689fbfbd0744d268b80b570859b8a73ecff1c89ac6f7e6faa88ba5142271b8218871c32c41d645d0bb4f2170013a560957f31f5d8ead9a905db3d71c0cd9aafec3f50356339edf3bde443a140e4514d862b95e28645b712215f7dfce38d6223eb594954d3a9c161548fd41d8796cc8fe9299e668484ed13338c7bb61070954a9631a1ab0d088e7306f1fd60a65980eb48b4c1a1da6a23b293632aa74fb03e6ab9da6f3cf720c5a269bfeb04bfd3a72140f323de08709b98cf74267bb075da2a3c14be5c010b63b5fc42f452e5ae5d994db33c4dacc1fd6125ec12fa7134e2ec2390d47eba3489e2b27cd93e51a5781ceadce3fdf358f1b930fc63c4f535bf55d05bd3b596cc
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.10 $
# $Date: 2024/06/17 $
#
# Description   : This document implements the security configuration as recommended by the
#                 CIS Apache HTTP Server 2.2 Benchark v3.6.0
#
#<ui_metadata>
#<display_name>CIS Apache HTTP Server 2.2 L2 v3.6.0 Middleware</display_name>
#<spec>
#  <type>CIS</type>
#  <name>Apache HTTP Server 2.2</name>
#  <profile>L2 Middleware</profile>
#  <version>3.6.0</version>
#  <link>https://workbench.cisecurity.org/files/2378</link>
#</spec>
#<labels>cis,apache_middleware_2.2,agent,update_20230227</labels>
#<benchmark_refs>CCE,CIS_Recommendation,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#<application>
#  <app_name>Apache</app_name>
#  <app_key>Config files</app_key>
#</application>
#<variables>
#  <variable>
#    <name>APPROVED_EXTENSIONS</name>
#    <default>css\\|html\\?\\|js\\|pdf\\|txt\\|xml\\|xsl\\|gif\\|ico\\|jpe\\?g\\|png</default>
#    <description>Approved file extensions</description>
#    <info>The list of file extensions that are approved to be served by the Apache server.</info>
#    <value_type>STRING</value_type>
#  </variable>
#  <variable>
#    <name>MOD_SEC_RULE_PATH</name>
#    <default>/etc/httpd/modsecurity.d/activated_rules/</default>
#    <description>OWASP ModSecurity path</description>
#    <info>The path to the OWASP active rules.</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>PRODUCT_VERSION</name>
#    <default>2.2</default>
#    <description>Apache Version</description>
#    <info>Apache Version</info>
#    <value_type>STRING</value_type>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "Apache found"
      cmd         : "@APP_Binary_catalog@/apachectl -version"
      expect      : "Apache/@PRODUCT_VERSION@.*"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_Apache_HTTP_Server_2.2_Benchmark_v3.6.0_Level_2_Middleware.audit from CIS Apache HTTP Server 2.2 Benchark v3.6.0"
    </report>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "5.11 Restrict File Extensions - 'httpd.conf FileMatch directive exists'"
          file        : "@APP_Config_files@"
          regex       : "^[\\s]*<FilesMatch \"\\^\\.\\*\\$"
          expect      : "<FilesMatch \"\\^\\.\\*\\$"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : CMD_EXEC
          description : "5.11 Ensure Access to Inappropriate File Extensions Is Restricted - 'httpd.conf FileMatch directive Require all denied'"
          info        : "Restrict access to inappropriate file extensions that are not expected to be a legitimate part of web sites using the 'FilesMatch' directive.

Rationale:

There are many files that are often left within the web server document root that could provide an attacker with sensitive information. Most often these files are mistakenly left behind after installation, troubleshooting, or backing up files before editing. Regardless of the reason for their creation, these files can still be served by Apache even when there is no hyperlink pointing to them. The web administrators should use the 'FilesMatch' directive to restrict access to only those file extensions that are appropriate for the web server. Rather than create a blacklist of potentially inappropriate file extensions such as '.bak', '.config', '.old', etc., it is recommended instead that a whitelist of the appropriate and expected file extensions for the web server be created, reviewed, and enforced with a 'FilesMatch' directive."
          solution    : "Perform the following to implement the recommended state:

1. Compile a list of existing file extensions on the web server. The following 'find/awk' command may be useful but is likely to need some customization according to the appropriate webroot directories for your web server. Please note that the find command skips over any files without a dot (.) in the filename, as these are not expected to be appropriate web content.

 find */htdocs -type f -name '*.*' | awk -F. '{print $NF }' | sort -u

2. Review the list of existing file extensions. Remove those that are inappropriate and add any appropriate file extensions expected to be added to the web server in the near future.
3. Add the 'FilesMatch' directive below, which denies access to all files by default.

 # Block all files by default, unless specifically allowed.

 Order Deny,Allow
 Deny from all

4. Add another 'FilesMatch' directive that allows access to those file extensions specifically allowed from the review process in step 2. An example 'FilesMatch' directive is below. The file extensions in the regular expression should match your approved list, and not necessarily the expression below.

 # Allow files with specifically approved file extensions
 # Such as (css, htm; html; js; pdf; txt; xml; xsl; ...),
 # images (gif; ico; jpeg; jpg; png; ...), multimedia

 Order Deny,Allow
 Allow from all"
          reference   : "800-53|SI-9,800-53r5|SI-9,CSCv6|18.3,CSCv7|18.2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-9,ITSG-33|SI-9a.,LEVEL|2S,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T7.3.1,NESA|T7.3.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "sed -n '/<FilesMatch \"\\^\\.\\*\\$\"/,/<\\\/FilesMatch>/p' @APP_Config_files@ /dev/null | egrep '^\\s*[Rr]equire\\s+'"
          expect      : "^[\\s]*[Rr]equire[\\s]+[Aa]ll[\\s]*[Dd]enied[\\s]*$"
        </custom_item>

        <report type:"PASSED">
          description : "5.11 Ensure Access to Inappropriate File Extensions Is Restricted - 'httpd.conf FileMatch directive configuration'"
          info        : "Restrict access to inappropriate file extensions that are not expected to be a legitimate part of web sites using the 'FilesMatch' directive.

Rationale:

There are many files that are often left within the web server document root that could provide an attacker with sensitive information. Most often these files are mistakenly left behind after installation, troubleshooting, or backing up files before editing. Regardless of the reason for their creation, these files can still be served by Apache even when there is no hyperlink pointing to them. The web administrators should use the 'FilesMatch' directive to restrict access to only those file extensions that are appropriate for the web server. Rather than create a blacklist of potentially inappropriate file extensions such as '.bak', '.config', '.old', etc., it is recommended instead that a whitelist of the appropriate and expected file extensions for the web server be created, reviewed, and enforced with a 'FilesMatch' directive."
          solution    : "Perform the following to implement the recommended state:

1. Compile a list of existing file extensions on the web server. The following 'find/awk' command may be useful but is likely to need some customization according to the appropriate webroot directories for your web server. Please note that the find command skips over any files without a dot (.) in the filename, as these are not expected to be appropriate web content.

 find */htdocs -type f -name '*.*' | awk -F. '{print $NF }' | sort -u

2. Review the list of existing file extensions. Remove those that are inappropriate and add any appropriate file extensions expected to be added to the web server in the near future.
3. Add the 'FilesMatch' directive below, which denies access to all files by default.

 # Block all files by default, unless specifically allowed.

 Order Deny,Allow
 Deny from all

4. Add another 'FilesMatch' directive that allows access to those file extensions specifically allowed from the review process in step 2. An example 'FilesMatch' directive is below. The file extensions in the regular expression should match your approved list, and not necessarily the expression below.

 # Allow files with specifically approved file extensions
 # Such as (css, htm; html; js; pdf; txt; xml; xsl; ...),
 # images (gif; ico; jpeg; jpg; png; ...), multimedia

 Order Deny,Allow
 Allow from all"
          reference   : "800-53|SI-9,800-53r5|SI-9,CSCv6|18.3,CSCv7|18.2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-9,ITSG-33|SI-9a.,LEVEL|2S,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T7.3.1,NESA|T7.3.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>
      </then>

      <else>
        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "5.11 Ensure Access to Inappropriate File Extensions Is Restricted - 'httpd.conf FileMatch directive configuration'"
          info        : "Restrict access to inappropriate file extensions that are not expected to be a legitimate part of web sites using the 'FilesMatch' directive.

Rationale:

There are many files that are often left within the web server document root that could provide an attacker with sensitive information. Most often these files are mistakenly left behind after installation, troubleshooting, or backing up files before editing. Regardless of the reason for their creation, these files can still be served by Apache even when there is no hyperlink pointing to them. The web administrators should use the 'FilesMatch' directive to restrict access to only those file extensions that are appropriate for the web server. Rather than create a blacklist of potentially inappropriate file extensions such as '.bak', '.config', '.old', etc., it is recommended instead that a whitelist of the appropriate and expected file extensions for the web server be created, reviewed, and enforced with a 'FilesMatch' directive."
          solution    : "Perform the following to implement the recommended state:

1. Compile a list of existing file extensions on the web server. The following 'find/awk' command may be useful but is likely to need some customization according to the appropriate webroot directories for your web server. Please note that the find command skips over any files without a dot (.) in the filename, as these are not expected to be appropriate web content.

 find */htdocs -type f -name '*.*' | awk -F. '{print $NF }' | sort -u

2. Review the list of existing file extensions. Remove those that are inappropriate and add any appropriate file extensions expected to be added to the web server in the near future.
3. Add the 'FilesMatch' directive below, which denies access to all files by default.

 # Block all files by default, unless specifically allowed.

 Order Deny,Allow
 Deny from all

4. Add another 'FilesMatch' directive that allows access to those file extensions specifically allowed from the review process in step 2. An example 'FilesMatch' directive is below. The file extensions in the regular expression should match your approved list, and not necessarily the expression below.

 # Allow files with specifically approved file extensions
 # Such as (css, htm; html; js; pdf; txt; xml; xsl; ...),
 # images (gif; ico; jpeg; jpg; png; ...), multimedia

 Order Deny,Allow
 Allow from all"
          reference   : "800-53|SI-9,800-53r5|SI-9,CSCv6|18.3,CSCv7|18.2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-9,ITSG-33|SI-9a.,LEVEL|2S,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T7.3.1,NESA|T7.3.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          file        : "@APP_Config_files@"
          regex       : "^[\\s]*<FilesMatch \"\\^\\.\\*\\$"
          expect      : "<FilesMatch \"\\^\\.\\*\\$"
        </custom_item>

        <report type:"PASSED">
          description : "5.11 Ensure Access to Inappropriate File Extensions Is Restricted - 'httpd.conf FileMatch directive Require all denied'"
          info        : "Restrict access to inappropriate file extensions that are not expected to be a legitimate part of web sites using the 'FilesMatch' directive.

Rationale:

There are many files that are often left within the web server document root that could provide an attacker with sensitive information. Most often these files are mistakenly left behind after installation, troubleshooting, or backing up files before editing. Regardless of the reason for their creation, these files can still be served by Apache even when there is no hyperlink pointing to them. The web administrators should use the 'FilesMatch' directive to restrict access to only those file extensions that are appropriate for the web server. Rather than create a blacklist of potentially inappropriate file extensions such as '.bak', '.config', '.old', etc., it is recommended instead that a whitelist of the appropriate and expected file extensions for the web server be created, reviewed, and enforced with a 'FilesMatch' directive."
          solution    : "Perform the following to implement the recommended state:

1. Compile a list of existing file extensions on the web server. The following 'find/awk' command may be useful but is likely to need some customization according to the appropriate webroot directories for your web server. Please note that the find command skips over any files without a dot (.) in the filename, as these are not expected to be appropriate web content.

 find */htdocs -type f -name '*.*' | awk -F. '{print $NF }' | sort -u

2. Review the list of existing file extensions. Remove those that are inappropriate and add any appropriate file extensions expected to be added to the web server in the near future.
3. Add the 'FilesMatch' directive below, which denies access to all files by default.

 # Block all files by default, unless specifically allowed.

 Order Deny,Allow
 Deny from all

4. Add another 'FilesMatch' directive that allows access to those file extensions specifically allowed from the review process in step 2. An example 'FilesMatch' directive is below. The file extensions in the regular expression should match your approved list, and not necessarily the expression below.

 # Allow files with specifically approved file extensions
 # Such as (css, htm; html; js; pdf; txt; xml; xsl; ...),
 # images (gif; ico; jpeg; jpg; png; ...), multimedia

 Order Deny,Allow
 Allow from all"
          reference   : "800-53|SI-9,800-53r5|SI-9,CSCv6|18.3,CSCv7|18.2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-9,ITSG-33|SI-9a.,LEVEL|2S,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T7.3.1,NESA|T7.3.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>
      </else>
    </if>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "5.11 Ensure Access to Inappropriate File Extensions Is Restricted - 'httpd.conf approved extention FileMatch directive exists'"
      info        : "Restrict access to inappropriate file extensions that are not expected to be a legitimate part of web sites using the 'FilesMatch' directive.

Rationale:

There are many files that are often left within the web server document root that could provide an attacker with sensitive information. Most often these files are mistakenly left behind after installation, troubleshooting, or backing up files before editing. Regardless of the reason for their creation, these files can still be served by Apache even when there is no hyperlink pointing to them. The web administrators should use the 'FilesMatch' directive to restrict access to only those file extensions that are appropriate for the web server. Rather than create a blacklist of potentially inappropriate file extensions such as '.bak', '.config', '.old', etc., it is recommended instead that a whitelist of the appropriate and expected file extensions for the web server be created, reviewed, and enforced with a 'FilesMatch' directive."
      solution    : "Perform the following to implement the recommended state:

1. Compile a list of existing file extensions on the web server. The following 'find/awk' command may be useful but is likely to need some customization according to the appropriate webroot directories for your web server. Please note that the find command skips over any files without a dot (.) in the filename, as these are not expected to be appropriate web content.

 find */htdocs -type f -name '*.*' | awk -F. '{print $NF }' | sort -u

2. Review the list of existing file extensions. Remove those that are inappropriate and add any appropriate file extensions expected to be added to the web server in the near future.
3. Add the 'FilesMatch' directive below, which denies access to all files by default.

 # Block all files by default, unless specifically allowed.

 Order Deny,Allow
 Deny from all

4. Add another 'FilesMatch' directive that allows access to those file extensions specifically allowed from the review process in step 2. An example 'FilesMatch' directive is below. The file extensions in the regular expression should match your approved list, and not necessarily the expression below.

 # Allow files with specifically approved file extensions
 # Such as (css, htm; html; js; pdf; txt; xml; xsl; ...),
 # images (gif; ico; jpeg; jpg; png; ...), multimedia

 Order Deny,Allow
 Allow from all"
      reference   : "800-53|SI-9,800-53r5|SI-9,CSCv6|18.3,CSCv7|18.2,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-9,ITSG-33|SI-9a.,LEVEL|2S,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T7.3.1,NESA|T7.3.2"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*<FilesMatch \"\\^\\.\\*\\\\\.\\(@APPROVED_EXTENSIONS@\\)\\\$\""
      expect      : "^[\\s]*<FilesMatch \"\\^\\.\\*\\\\\.\\(@APPROVED_EXTENSIONS@\\)\\\$\""
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "5.12 Check for Apache Rewrite module"
          cmd         : "@APP_Binary_catalog@/apachectl -M | grep 'rewrite_module'"
          expect      : "^[\\s]*rewrite_module[\\s]*\\((shared|static)\\)[\\s]*$"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : CMD_EXEC
          description : "5.12 Ensure IP Address Based Requests Are Disallowed - 'httpd.conf RewriteEngine = on'"
          info        : "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.

Refer to the Apache 2.2 documentation for details:
[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)

Rationale:

A common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure."
          solution    : "Perform the following to implement the recommended state:

1. Load the 'mod_rewrite' module for Apache by doing either one of the following:
 - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.

 /configure --enable-rewrite

 - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.

 LoadModule rewrite_module modules/mod_rewrite.so

2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.

 RewriteEngine On

3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.

 RewriteCond %{HTTP_HOST} !^www\.example\.com [NC]
 RewriteCond %{REQUEST_URI} !^/error [NC]
 RewriteRule ^.(.*) - [L,F]"
          reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "egrep -o '</([^>]*)>' @APP_Config_files@ /dev/null | sort -u | sed -e 's/[<>\\/]//g' | awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | awk -f - @APP_Config_files@ | grep '^[ 	]*[Rr]ewrite[Ee]ngine.*'"
          expect      : "^[\\s]*[Rr]ewrite[Ee]ngine[\\s]+[Oo][Nn][\\s]*$"
        </custom_item>

        <custom_item>
          type        : CMD_EXEC
          description : "5.12 Ensure IP Address Based Requests Are Disallowed - 'httpd.conf RewriteCond %{HTTP_HOST} exists'"
          info        : "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.

Refer to the Apache 2.2 documentation for details:
[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)

Rationale:

A common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure."
          solution    : "Perform the following to implement the recommended state:

1. Load the 'mod_rewrite' module for Apache by doing either one of the following:
 - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.

 /configure --enable-rewrite

 - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.

 LoadModule rewrite_module modules/mod_rewrite.so

2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.

 RewriteEngine On

3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.

 RewriteCond %{HTTP_HOST} !^www\.example\.com [NC]
 RewriteCond %{REQUEST_URI} !^/error [NC]
 RewriteRule ^.(.*) - [L,F]"
          reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "egrep -o '</([^>]*)>' @APP_Config_files@ /dev/null | sort -u | sed -e 's/[<>\\/]//g' | awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | awk -f - @APP_Config_files@ | grep '^[ 	]*[Rr]ewrite[Cc]ond[ 	]*%{HTTP_HOST}.*'"
          expect      : "^[\\s]*[Rr]ewrite[Cc]ond[\\s]+%{HTTP_HOST}[\\s]+!\\^.*[A-z]+.*[\\s]+[\\[][Nn][Cc][\\]]"
        </custom_item>

        <custom_item>
          type        : CMD_EXEC
          description : "5.12 Ensure IP Address Based Requests Are Disallowed - 'httpd.conf RewriteCond %{REQUEST_URI} exists'"
          info        : "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.

Refer to the Apache 2.2 documentation for details:
[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)

Rationale:

A common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure."
          solution    : "Perform the following to implement the recommended state:

1. Load the 'mod_rewrite' module for Apache by doing either one of the following:
 - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.

 /configure --enable-rewrite

 - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.

 LoadModule rewrite_module modules/mod_rewrite.so

2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.

 RewriteEngine On

3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.

 RewriteCond %{HTTP_HOST} !^www\.example\.com [NC]
 RewriteCond %{REQUEST_URI} !^/error [NC]
 RewriteRule ^.(.*) - [L,F]"
          reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "egrep -o '</([^>]*)>' @APP_Config_files@ /dev/null | sort -u | sed -e 's/[<>\\/]//g' | awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | awk -f - @APP_Config_files@ | grep '^[ 	]*[Rr]ewrite[Cc]ond[ 	]*%{REQUEST_URI}'"
          expect      : "^[\\s]*[Rr]ewrite[Cc]ond[\\s]+%{REQUEST_URI}[\\s]+!\\^\\/error[\\s]+[[][Nn][Cc][]]"
        </custom_item>

        <custom_item>
          type        : CMD_EXEC
          description : "5.12 Ensure IP Address Based Requests Are Disallowed - 'httpd.conf RewriteRule ^.(.*) - [L,F] exists'"
          info        : "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.

Refer to the Apache 2.2 documentation for details:
[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)

Rationale:

A common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure."
          solution    : "Perform the following to implement the recommended state:

1. Load the 'mod_rewrite' module for Apache by doing either one of the following:
 - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.

 /configure --enable-rewrite

 - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.

 LoadModule rewrite_module modules/mod_rewrite.so

2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.

 RewriteEngine On

3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.

 RewriteCond %{HTTP_HOST} !^www\.example\.com [NC]
 RewriteCond %{REQUEST_URI} !^/error [NC]
 RewriteRule ^.(.*) - [L,F]"
          reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "egrep -o '</([^>]*)>' @APP_Config_files@ /dev/null | sort -u | sed -e 's/[<>\\/]//g' | awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | awk -f - @APP_Config_files@ | grep '^[ 	]*[Rr]ewrite[Rr]ule[ 	]*\^\.\(\.\*\)'"
          expect      : "^[\\s]*[Rr]ewrite[Rr]ule[\\s]+\\^\\\.\\(\\\.\\*\\)[\\s]+-[\\s]+[[][Ll],[Ff][]]"
        </custom_item>

        <report type:"PASSED">
          description : "5.12 Ensure IP Address Based Requests Are Disallowed - Rewrite module not loaded"
          info        : "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.

Refer to the Apache 2.2 documentation for details:
[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)

Rationale:

A common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure."
          solution    : "Perform the following to implement the recommended state:

1. Load the 'mod_rewrite' module for Apache by doing either one of the following:
 - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.

 /configure --enable-rewrite

 - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.

 LoadModule rewrite_module modules/mod_rewrite.so

2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.

 RewriteEngine On

3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.

 RewriteCond %{HTTP_HOST} !^www\.example\.com [NC]
 RewriteCond %{REQUEST_URI} !^/error [NC]
 RewriteRule ^.(.*) - [L,F]"
          reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>
      </then>

      <else>
        <custom_item>
          type        : CMD_EXEC
          description : "5.12 Ensure IP Address Based Requests Are Disallowed - Rewrite module not loaded"
          info        : "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.

Refer to the Apache 2.2 documentation for details:
[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)

Rationale:

A common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure."
          solution    : "Perform the following to implement the recommended state:

1. Load the 'mod_rewrite' module for Apache by doing either one of the following:
 - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.

 /configure --enable-rewrite

 - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.

 LoadModule rewrite_module modules/mod_rewrite.so

2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.

 RewriteEngine On

3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.

 RewriteCond %{HTTP_HOST} !^www\.example\.com [NC]
 RewriteCond %{REQUEST_URI} !^/error [NC]
 RewriteRule ^.(.*) - [L,F]"
          reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "@APP_Binary_catalog@/apachectl -M | grep 'rewrite_module'"
          expect      : "^[\\s]*rewrite_module[\\s]*\\((shared|static)\\)[\\s]*$"
        </custom_item>

        <report type:"PASSED">
          description : "5.12 Ensure IP Address Based Requests Are Disallowed - 'httpd.conf RewriteEngine = on'"
          info        : "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.

Refer to the Apache 2.2 documentation for details:
[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)

Rationale:

A common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure."
          solution    : "Perform the following to implement the recommended state:

1. Load the 'mod_rewrite' module for Apache by doing either one of the following:
 - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.

 /configure --enable-rewrite

 - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.

 LoadModule rewrite_module modules/mod_rewrite.so

2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.

 RewriteEngine On

3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.

 RewriteCond %{HTTP_HOST} !^www\.example\.com [NC]
 RewriteCond %{REQUEST_URI} !^/error [NC]
 RewriteRule ^.(.*) - [L,F]"
          reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>

        <report type:"PASSED">
          description : "5.12 Ensure IP Address Based Requests Are Disallowed - 'httpd.conf RewriteCond %{HTTP_HOST} exists'"
          info        : "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.

Refer to the Apache 2.2 documentation for details:
[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)

Rationale:

A common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure."
          solution    : "Perform the following to implement the recommended state:

1. Load the 'mod_rewrite' module for Apache by doing either one of the following:
 - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.

 /configure --enable-rewrite

 - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.

 LoadModule rewrite_module modules/mod_rewrite.so

2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.

 RewriteEngine On

3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.

 RewriteCond %{HTTP_HOST} !^www\.example\.com [NC]
 RewriteCond %{REQUEST_URI} !^/error [NC]
 RewriteRule ^.(.*) - [L,F]"
          reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>

        <report type:"PASSED">
          description : "5.12 Ensure IP Address Based Requests Are Disallowed - 'httpd.conf RewriteCond %{REQUEST_URI} exists'"
          info        : "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.

Refer to the Apache 2.2 documentation for details:
[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)

Rationale:

A common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure."
          solution    : "Perform the following to implement the recommended state:

1. Load the 'mod_rewrite' module for Apache by doing either one of the following:
 - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.

 /configure --enable-rewrite

 - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.

 LoadModule rewrite_module modules/mod_rewrite.so

2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.

 RewriteEngine On

3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.

 RewriteCond %{HTTP_HOST} !^www\.example\.com [NC]
 RewriteCond %{REQUEST_URI} !^/error [NC]
 RewriteRule ^.(.*) - [L,F]"
          reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>

        <report type:"PASSED">
          description : "5.12 Ensure IP Address Based Requests Are Disallowed - 'httpd.conf RewriteRule ^.(.*) - [L,F] exists'"
          info        : "The Apache module 'mod_rewrite' should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header.

Refer to the Apache 2.2 documentation for details:
[http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html](http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html)

Rationale:

A common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure."
          solution    : "Perform the following to implement the recommended state:

1. Load the 'mod_rewrite' module for Apache by doing either one of the following:
 - Build Apache with 'mod_rewrite' statically loaded during the build by adding the '--enable-rewrite'option to the './configure' script.

 /configure --enable-rewrite

 - Or, dynamically load the module with the 'LoadModule' directive in the 'httpd.conf' configuration file.

 LoadModule rewrite_module modules/mod_rewrite.so

2. Add the 'RewriteEngine' directive to the configuration within the global server context with the value of 'on' so the rewrite engine is enabled.

 RewriteEngine On

3. Locate the Apache configuration file such as 'httpd.conf' and add the following rewrite condition to match the expected host name of the top server level configuration.

 RewriteCond %{HTTP_HOST} !^www\.example\.com [NC]
 RewriteCond %{REQUEST_URI} !^/error [NC]
 RewriteRule ^.(.*) - [L,F]"
          reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>
      </else>
    </if>

    <custom_item>
      type        : FILE_CONTENT_CHECK_NOT
      description : "5.13 Ensure the IP Addresses for Listening for Requests Are Specified - 'httpd.conf Listen 0.0.0.0:80 does not exists'"
      info        : "The Apache 'Listen' directive specifies the IP addresses and port numbers the Apache web server will listen on for requests. Rather than be unrestricted to listen on all IP addresses available to the system, the specific IP address or addresses intended should be explicitly specified. Specifically, a 'Listen' directive with no IP address specified or with an IP address of all zeroes should not be used.

Rationale:

Having multiple interfaces on web servers is fairly common, and without explicit 'Listen' directives, the web server is likely to be listening on an IP address or interface that was not intended for the web server. Single-homed systems with a single IP address are also required to have an explicit IP address in the 'Listen' directive, in case additional interfaces are added to the system at a later date."
      solution    : "Perform the following to implement the recommended state:

1. Find any 'Listen' directives in the Apache configuration file with no IP address specified or with an IP address of all zeroes similar to the examples below. Keep in mind there may be both IPv4 and IPv6 addresses on the system.

 Listen 80
 Listen 0.0.0.0:80
 Listen [::ffff:0.0.0.0]:80

2. Modify the 'Listen' directives in the Apache configuration file to have explicit IP addresses according to the intended usage. Multiple 'Listen' directives may be specified for each IP address and port.

 Listen 10.1.2.3:80
 Listen 192.168.4.5:80
 Listen [2001:db8::a00:20ff:fea7:ccea]:80"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*[Ll]isten[\\s]+"
      expect      : "^[\\s]*[Ll]isten[\\s]+0\\\.0\\\.0\\\.0:80[\\s]*$"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK_NOT
      description : "5.13 Ensure the IP Addresses for Listening for Requests Are Specified - 'httpd.conf Listen [::ffff:0.0.0.0]:80 does not exists'"
      info        : "The Apache 'Listen' directive specifies the IP addresses and port numbers the Apache web server will listen on for requests. Rather than be unrestricted to listen on all IP addresses available to the system, the specific IP address or addresses intended should be explicitly specified. Specifically, a 'Listen' directive with no IP address specified or with an IP address of all zeroes should not be used.

Rationale:

Having multiple interfaces on web servers is fairly common, and without explicit 'Listen' directives, the web server is likely to be listening on an IP address or interface that was not intended for the web server. Single-homed systems with a single IP address are also required to have an explicit IP address in the 'Listen' directive, in case additional interfaces are added to the system at a later date."
      solution    : "Perform the following to implement the recommended state:

1. Find any 'Listen' directives in the Apache configuration file with no IP address specified or with an IP address of all zeroes similar to the examples below. Keep in mind there may be both IPv4 and IPv6 addresses on the system.

 Listen 80
 Listen 0.0.0.0:80
 Listen [::ffff:0.0.0.0]:80

2. Modify the 'Listen' directives in the Apache configuration file to have explicit IP addresses according to the intended usage. Multiple 'Listen' directives may be specified for each IP address and port.

 Listen 10.1.2.3:80
 Listen 192.168.4.5:80
 Listen [2001:db8::a00:20ff:fea7:ccea]:80"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*[Ll]isten[\\s]+"
      expect      : "^[\\s]*[Ll]isten[\\s]+[[]::ffff:0\\\.0\\\.0\\\.0[]]:80[\\s]*$"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK_NOT
      description : "5.13 Ensure the IP Addresses for Listening for Requests Are Specified - 'httpd.conf Listen 80 does not exists'"
      info        : "The Apache 'Listen' directive specifies the IP addresses and port numbers the Apache web server will listen on for requests. Rather than be unrestricted to listen on all IP addresses available to the system, the specific IP address or addresses intended should be explicitly specified. Specifically, a 'Listen' directive with no IP address specified or with an IP address of all zeroes should not be used.

Rationale:

Having multiple interfaces on web servers is fairly common, and without explicit 'Listen' directives, the web server is likely to be listening on an IP address or interface that was not intended for the web server. Single-homed systems with a single IP address are also required to have an explicit IP address in the 'Listen' directive, in case additional interfaces are added to the system at a later date."
      solution    : "Perform the following to implement the recommended state:

1. Find any 'Listen' directives in the Apache configuration file with no IP address specified or with an IP address of all zeroes similar to the examples below. Keep in mind there may be both IPv4 and IPv6 addresses on the system.

 Listen 80
 Listen 0.0.0.0:80
 Listen [::ffff:0.0.0.0]:80

2. Modify the 'Listen' directives in the Apache configuration file to have explicit IP addresses according to the intended usage. Multiple 'Listen' directives may be specified for each IP address and port.

 Listen 10.1.2.3:80
 Listen 192.168.4.5:80
 Listen [2001:db8::a00:20ff:fea7:ccea]:80"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|9.1,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*[Ll]isten[\\s]+"
      expect      : "^[\\s]*[Ll]isten[\\s]+80[\\s]*$"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "5.14 Ensure Browser Framing Is Restricted"
      info        : "The Header directive allows server HTTP response headers to be added, replaced, or merged. Use the directive to add a server HTTP response header to tell browsers to restrict all the web pages from being framed by other web sites.

Rationale:

Using iframes and regular web frames to embed malicious content along with expected web content has been a favored attack vector for attacking web clients for a long time. This can happen when the attacker lures the victim to a malicious web site, which uses frames to include the expected content from the legitimate site. The attack can also be performed via XSS (either reflected, DOM or stored XSS) to add the malicious content to the legitimate web site. To combat this vector, an HTTP Response header, X-Frame-Options, has been introduced that allows a server to specify whether a web page may be loaded in any frame ('DENY') or only those frames that share the page's origin ('SAMEORIGIN')."
      solution    : "Perform the following to implement the recommended state:

Add or modify the 'Header' directive for the 'X-Frame-Options' header in the Apache configuration to have the condition 'always', an action of 'append', and a value of 'SAMEORIGIN', as shown below.

Header always append X-Frame-Options SAMEORIGIN"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|18,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*.+[Xx]-[Ff]rame-[Oo]ptions[\\s]+"
      expect      : "^[\\s]*[Hh]eader[\\s]+[Aa]lways[\\s]+[Aa]ppend[\\s]+[Xx]-[Ff]rame-[Oo]ptions[\\s]+SAMEORIGIN[\\s]*$"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "6.2 Ensure a Syslog Facility Is Configured for Error Logging - 'httpd.conf Syslog is configured'"
      info        : "The 'ErrorLog' directive should be configured to send web server error logs to a 'syslog' facility so the logs can be processed and monitored along with the system logs.

Rationale:

It is easy for web server error logs to be overlooked in the log monitoring process, and yet the application-level attacks have become the most common and are extremely important for detecting attacks early, as well as detecting non-malicious problems such as a broken link, or internal errors. By including the Apache error logs with the system logging facility, the application logs are more likely to be included in the established log monitoring process."
      solution    : "Perform the following to implement the recommended state:

1. Add an 'ErrorLog' directive if not already configured. Any appropriate 'syslog' facility may be used in place of 'local1'.

 ErrorLog 'syslog:local1'

2. Add a similar 'ErrorLog' directive for each virtual host if necessary."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-6,800-53r5|AU-6,CN-L3|7.1.3.3(d),CSCv6|6.6,CSCv7|6.6,CSCv7|6.8,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.DP-4,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-2,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-6,LEVEL|2S,NESA|M5.2.5,QCSC-v1|5.2.3,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*ErrorLog[\\s]+"
      expect      : "^[\\s]*ErrorLog[\\s]+\"syslog:.*\"[\\s]*$"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "6.2 Ensure a Syslog Facility Is Configured for Error Logging - 'httpd.conf <VirtualHost> Syslog is configured'"
      info        : "The 'ErrorLog' directive should be configured to send web server error logs to a 'syslog' facility so the logs can be processed and monitored along with the system logs.

Rationale:

It is easy for web server error logs to be overlooked in the log monitoring process, and yet the application-level attacks have become the most common and are extremely important for detecting attacks early, as well as detecting non-malicious problems such as a broken link, or internal errors. By including the Apache error logs with the system logging facility, the application logs are more likely to be included in the established log monitoring process.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Perform the following to implement the recommended state:

1. Add an 'ErrorLog' directive if not already configured. Any appropriate 'syslog' facility may be used in place of 'local1'.

 ErrorLog 'syslog:local1'

2. Add a similar 'ErrorLog' directive for each virtual host if necessary."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-6,800-53r5|AU-6,CN-L3|7.1.3.3(d),CSCv6|6.6,CSCv7|6.6,CSCv7|6.8,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.DP-4,CSF|PR.PT-1,CSF|RS.AN-1,CSF|RS.CO-2,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-6,LEVEL|2S,NESA|M5.2.5,QCSC-v1|5.2.3,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      cmd         : "sed -n '/<VirtualHost /,/<\\/VirtualHost>/p' @APP_Config_files@ /dev/null | grep '^[\\s*]*ErrorLog.*'"
      expect      : ""
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "6.6 Ensure ModSecurity Is Installed and Enabled"
      info        : "'ModSecurity' is an open source web application firewall (WAF) for real-time web application monitoring, logging, and access control. It does not include a powerful customizable rule set, which may be used to detect and block common web application attacks. Installation of 'ModSecurity' without a rule set does not provide additional security for the protected web applications. Refer to the benchmark recommendation '_Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled_' for details on a recommended rule set.

**Note:** Like other application security/application firewall systems, 'ModSecurity' requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing 'ModSecurity' may NOT be effective and may provide a false sense of security.

Rationale:

Installation of the 'ModSecurity' Apache module enables a customizable web application firewall rule set which may be configured to detect and block common attack patterns as well as block outbound data leakage."
      solution    : "Perform the following to enable the module:

1. Install the 'ModSecurity' module if it is not already installed in modules/mod_security2.so. It may be installed via OS package installation (such as apt-get or yum) or built from the source files. See [https://www.modsecurity.org/download.html](https://www.modsecurity.org/download.html) for details.
2. Add or modify the 'LoadModule' directive if not already present in the Apache configuration as shown below. Typically, the 'LoadModule' directive is placed in the file named 'mod_security.conf', which is included in the Apache configuration:

 LoadModule security2_module modules/mod_security2.so"
      reference   : "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      cmd         : "@APP_Binary_catalog@/apachectl -M | grep 'security2_module'"
      expect      : "^[\\s]*security2_module[\\s]*\\((shared|static)\\)[\\s]*$"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check if OWASP CRS 3"
          cmd         : "echo '@MOD_SEC_RULE_PATH@'"
          expect      : "crs-3"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Active Rules"
          info        : "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:
- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.
- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation
- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.
- Common Web Attacks Protection - detecting common web application security attack.
- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.
- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.
- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.
- Trojan Protection - Detecting access to Trojans horses.
- Identification of Application Defects - alerts on application misconfigurations.
- Error Detection and Hiding - Disguising error messages sent by the server.

**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.

Rationale:

Installing, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks."
          solution    : "Install, configure and test the OWASP ModSecurity Core Rule Set:
1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).
2. Unbundle the archive and follow the instructions in the 'INSTALL' file.
3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.
4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.
5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes."
          reference   : "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "find '@MOD_SEC_RULE_PATH@' -name '*.conf' | xargs grep '^SecRule ' | wc -l"
          expect      : "(32[5-9]|3[3-9][0-9]|[4-9][0-9][0-9])"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Inbound Anomaly Threshold"
          info        : "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:
- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.
- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation
- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.
- Common Web Attacks Protection - detecting common web application security attack.
- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.
- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.
- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.
- Trojan Protection - Detecting access to Trojans horses.
- Identification of Application Defects - alerts on application misconfigurations.
- Error Detection and Hiding - Disguising error messages sent by the server.

**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.

Rationale:

Installing, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks."
          solution    : "Install, configure and test the OWASP ModSecurity Core Rule Set:
1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).
2. Unbundle the archive and follow the instructions in the 'INSTALL' file.
3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.
4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.
5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes."
          reference   : "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "find '@MOD_SEC_RULE_PATH@' -name '*.conf' | xargs egrep -v '^\s*#' | grep 'setvar:tx.inbound_anomaly_score_threshold'"
          expect      : "setvar:tx.inbound_anomaly_score_threshold[\\s]*=[\\s]*[2-5][^0-9]"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Outbound Anomaly Threshold"
          info        : "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:
- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.
- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation
- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.
- Common Web Attacks Protection - detecting common web application security attack.
- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.
- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.
- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.
- Trojan Protection - Detecting access to Trojans horses.
- Identification of Application Defects - alerts on application misconfigurations.
- Error Detection and Hiding - Disguising error messages sent by the server.

**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.

Rationale:

Installing, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks."
          solution    : "Install, configure and test the OWASP ModSecurity Core Rule Set:
1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).
2. Unbundle the archive and follow the instructions in the 'INSTALL' file.
3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.
4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.
5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes."
          reference   : "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "find '@MOD_SEC_RULE_PATH@' -name '*.conf' | xargs egrep -v '^\s*#' | grep 'setvar:tx.outbound_anomaly_score_threshold'"
          expect      : "setvar:tx.outbound_anomaly_score_threshold[\\s]*=[\\s]*[2-4][^0-9]"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Paranoia Level"
          info        : "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:
- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.
- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation
- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.
- Common Web Attacks Protection - detecting common web application security attack.
- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.
- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.
- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.
- Trojan Protection - Detecting access to Trojans horses.
- Identification of Application Defects - alerts on application misconfigurations.
- Error Detection and Hiding - Disguising error messages sent by the server.

**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.

Rationale:

Installing, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks."
          solution    : "Install, configure and test the OWASP ModSecurity Core Rule Set:
1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).
2. Unbundle the archive and follow the instructions in the 'INSTALL' file.
3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.
4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.
5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes."
          reference   : "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "find '@MOD_SEC_RULE_PATH@' -name '*.conf' | xargs egrep -v '^\s*#' | grep 'setvar:tx.paranoia_level'"
          expect      : "setvar:tx.paranoia_level[\\s]*=[\\s]*1[^0-9]"
        </custom_item>
      </then>

      <else>
        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Active Rules"
          info        : "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:
- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.
- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation
- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.
- Common Web Attacks Protection - detecting common web application security attack.
- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.
- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.
- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.
- Trojan Protection - Detecting access to Trojans horses.
- Identification of Application Defects - alerts on application misconfigurations.
- Error Detection and Hiding - Disguising error messages sent by the server.

**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.

Rationale:

Installing, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks."
          solution    : "Install, configure and test the OWASP ModSecurity Core Rule Set:
1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).
2. Unbundle the archive and follow the instructions in the 'INSTALL' file.
3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.
4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.
5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes."
          reference   : "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "find '@MOD_SEC_RULE_PATH@' -name 'modsecurity_crs_*.conf' | xargs grep '^SecRule ' | wc -l"
          expect      : "[2-9][0-9][0-9]"
        </custom_item>

        <report type:"PASSED">
          description : "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Inbound Anomaly Threshold"
          info        : "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:
- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.
- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation
- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.
- Common Web Attacks Protection - detecting common web application security attack.
- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.
- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.
- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.
- Trojan Protection - Detecting access to Trojans horses.
- Identification of Application Defects - alerts on application misconfigurations.
- Error Detection and Hiding - Disguising error messages sent by the server.

**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.

Rationale:

Installing, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks."
          solution    : "Install, configure and test the OWASP ModSecurity Core Rule Set:
1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).
2. Unbundle the archive and follow the instructions in the 'INSTALL' file.
3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.
4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.
5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes."
          reference   : "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>

        <report type:"PASSED">
          description : "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Outbound Anomaly Threshold"
          info        : "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:
- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.
- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation
- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.
- Common Web Attacks Protection - detecting common web application security attack.
- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.
- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.
- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.
- Trojan Protection - Detecting access to Trojans horses.
- Identification of Application Defects - alerts on application misconfigurations.
- Error Detection and Hiding - Disguising error messages sent by the server.

**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.

Rationale:

Installing, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks."
          solution    : "Install, configure and test the OWASP ModSecurity Core Rule Set:
1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).
2. Unbundle the archive and follow the instructions in the 'INSTALL' file.
3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.
4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.
5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes."
          reference   : "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>

        <report type:"PASSED">
          description : "6.7 Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled - Paranoia Level"
          info        : "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories:
- HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy.
- Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation
- HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks.
- Common Web Attacks Protection - detecting common web application security attack.
- Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity.
- Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application.
- Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages.
- Trojan Protection - Detecting access to Trojans horses.
- Identification of Application Defects - alerts on application misconfigurations.
- Error Detection and Hiding - Disguising error messages sent by the server.

**Note:** Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.

Rationale:

Installing, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks."
          solution    : "Install, configure and test the OWASP ModSecurity Core Rule Set:
1. Download the OWASP ModSecurity CRS from the project page [https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project](https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project).
2. Unbundle the archive and follow the instructions in the 'INSTALL' file.
3. The 'modsecurity_crs_10_setup.conf' file is required, and rules in the 'base_rules' directory are intended as a baseline useful for most applications.
4. Test the application for correct functionality after installing the CRS. Check web server error logs and the 'modsec_audit.log' file for blocked requests due to false positives.
5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and 'modsec_audit.log' files should show logs of the attacks and the server's response codes."
          reference   : "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv6|18.2,CSCv7|18.10,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2S,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>
      </else>
    </if>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "7.10 Ensure the TLSv1.0 and TLSv1.1 Protocols are Disabled"
      info        : "The TLSv1.0 and TLSv1.1 protocols should be disabled via the 'SSLProtocol' directive. The TLSv1.0 protocol is vulnerable to information disclosure and both protocols lack support for modern cryptographic algorithms including authenticated encryption. The only SSL/TLS protocols that should be allowed is TLSv1.2 along with the new TLSv1.3 protocol when it is supported.

Rationale:

The TLSv1.0 protocol is vulnerable to the BEAST attack when used in CBC mode (October 2011). Unfortunately, the TLSv1.0 uses CBC modes for all of the block mode ciphers, which only leaves the RC4 streaming cipher which is also weak and is not recommended. Therefore, it is recommended that the TLSv1.0 protocol be disabled. The TLSv1.1 protocol does not support Authenticated Encryption with Associated Data (AEAD) which is designed to simultaneously provide confidentiality, integrity, and authenticity. All major up-to-date browsers support TLSv1.2, and most recent versions of FireFox and Chrome support the newer TLSv1.3 protocol, since 2017.

The NIST SP 800-52r2 guidelines for TLS configuration require that TLS 1.2 is configured with FIPS-based cipher suites be supported by all government TLS servers and clients and requires support of TLS 1.3 by January 1, 2024. A September 2018 IETF draft also depreciates the usage of TLSv1.0 and TLSv1.1 as shown in the references."
      solution    : "Perform the following to implement the recommended state:

1. Check if the TLSv1.3 protocol is supported by the Apache server by either checking that the version of OpenSSL is 1.1.1 or later or place the 'TLSv1.3' value in the 'SSLProtocol' string of a configuration file and check the syntax with the 'httpd -t' command before using the file in production. Two examples below are shown of servers that do support the TLSv1.3 protocol.

 $ openssl version
 OpenSSL 1.1.1a 20 Nov 2018

 ### _(Add TLSv1.3 to the SSLProtocol directive)_
 # httpd -t
 Syntax OK

2. Search the Apache configuration files for the 'SSLProtocol' directive; add the directive, if not present, or change the value to 'TLSv1.2' or 'TLSv1.2 TLSv1.3' if the TLSv1.3 protocol is supported."
      reference   : "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "/etc/httpd/conf.d/ssl.conf"
      regex       : "^[\\s]*[Ss][Ss][Ll][Pp]rotocol[\\s]+"
      expect      : "^[\\s]*[Ss][Ss][Ll][Pp]rotocol[\\s]+[Tt][Ll][Ss][Vv]1\\.1[\\s]+[Tt][Ll][Ss][Vv]1\\.2[\\s]*$"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "7.11 Ensure HTTP Strict Transport Security Is Enabled - 'httpd.conf Strict-Transport-Security 'max-age=480'"
      info        : "HTTP Strict Transport Security (HSTS) is an optional web server security policy mechanism specified by an HTTP Server header. The HSTS header allows a server declaration that only HTTPS communication should be used rather than clear text HTTP communication.

Rationale:

Usage of HTTP Strict Transport Security (HSTS) helps protect HSTS-compliant browsers and other agents from HTTP downgrade attacks. Downgrade attacks include a variety of man-in-the-middle attacks which leave the web communication vulnerable to disclosure and modification by forcing the usage of HTTP rather than HTTPS communication. The 'sslstrip' attack tool by Moxie Marlinspike released in 2009 is one such attack, which works when a server allows both HTTP and HTTPS communication. However, a man-in-the-middle HTTP-to-HTTPS proxy would be effective in cases where the server required HTTPS but did not publish an HSTS policy to the browser. This attack would also be effective on browsers which were not compliant with HSTS. All current up-to-date browsers support HSTS.

The HSTS header specifies a length of time in seconds that the browser/user agent should access the server only using HTTPS. The header may also specify if all subdomains should also be included in the same policy. Once a compliant browser receives the HSTS header, it will not allow access to the server via HTTP. Therefore, it is important you ensure there is no portion of the web site or web application that requires HTTP prior to enabling the HSTS protocol.

If all subdomains are to be included via the _includeSubDomains_ option, carefully consider all various hostnames, web applications, and third-party services used to include any DNS CNAME values that may be impacted. An overly broad _includeSubDomains_ policy will disable access to HTTP websites for all websites with the same domain name. Also consider that the access will be disabled for the number of seconds given in the max-age value, so in the event a mistake is made, a large value, such as a year, could create significant support issues. An optional flag of preload may be added if the website name is to be submitted to be preloaded in Chrome, Firefox and Safari browsers. See [https://hstspreload.appspot.com/](https://hstspreload.appspot.com/) for details."
      solution    : "Perform the following to implement the recommended state:

Add a 'Header' directive as shown below in the Apache server level configuration and every virtual host that is SSL enabled. The 'includeSubDomains' and 'preload' flags may be included in the header, but are not required.

Header always set Strict-Transport-Security 'max-age=600; includeSubDomains; preload
- or -
Header always set Strict-Transport-Security 'max-age=600"
      reference   : "CSCv6|14.2,LEVEL|2S"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      cmd         : "egrep -o '</([^>]*)>' @APP_Config_files@ /dev/null | sort -u | sed -e 's/[<>\\/]//g' | awk 'BEGIN { print \"{ p = 1 }\" } { print \"/^ *<\"$1\"[ >]/,/^ *<\\\\/\"$1\">/ { p = 0 }\" } END { print \"p == 1 { print }\" }' | awk -f - @APP_Config_files@ | grep -i '.*strict-transport-security.*'"
      expect      : "^[\\s]*[Hh]eader[\\s]+[Aa]lways[\\s]+[Ss]et[\\s]+[Ss]trict-[Tt]ransport-[Ss]ecurity[\\s]+\"max-age=(48[0-9]|49[0-9]|[5-9][0-9]{2})\".*"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "7.11 Ensure HTTP Strict Transport Security Is Enabled - 'httpd.conf Strict-Transport-Security configuration'"
      info        : "HTTP Strict Transport Security (HSTS) is an optional web server security policy mechanism specified by an HTTP Server header. The HSTS header allows a server declaration that only HTTPS communication should be used rather than clear text HTTP communication.

Rationale:

Usage of HTTP Strict Transport Security (HSTS) helps protect HSTS-compliant browsers and other agents from HTTP downgrade attacks. Downgrade attacks include a variety of man-in-the-middle attacks which leave the web communication vulnerable to disclosure and modification by forcing the usage of HTTP rather than HTTPS communication. The 'sslstrip' attack tool by Moxie Marlinspike released in 2009 is one such attack, which works when a server allows both HTTP and HTTPS communication. However, a man-in-the-middle HTTP-to-HTTPS proxy would be effective in cases where the server required HTTPS but did not publish an HSTS policy to the browser. This attack would also be effective on browsers which were not compliant with HSTS. All current up-to-date browsers support HSTS.

The HSTS header specifies a length of time in seconds that the browser/user agent should access the server only using HTTPS. The header may also specify if all subdomains should also be included in the same policy. Once a compliant browser receives the HSTS header, it will not allow access to the server via HTTP. Therefore, it is important you ensure there is no portion of the web site or web application that requires HTTP prior to enabling the HSTS protocol.

If all subdomains are to be included via the _includeSubDomains_ option, carefully consider all various hostnames, web applications, and third-party services used to include any DNS CNAME values that may be impacted. An overly broad _includeSubDomains_ policy will disable access to HTTP websites for all websites with the same domain name. Also consider that the access will be disabled for the number of seconds given in the max-age value, so in the event a mistake is made, a large value, such as a year, could create significant support issues. An optional flag of preload may be added if the website name is to be submitted to be preloaded in Chrome, Firefox and Safari browsers. See [https://hstspreload.appspot.com/](https://hstspreload.appspot.com/) for details."
      solution    : "Perform the following to implement the recommended state:

Add a 'Header' directive as shown below in the Apache server level configuration and every virtual host that is SSL enabled. The 'includeSubDomains' and 'preload' flags may be included in the header, but are not required.

Header always set Strict-Transport-Security 'max-age=600; includeSubDomains; preload
- or -
Header always set Strict-Transport-Security 'max-age=600"
      reference   : "CSCv6|14.2,LEVEL|2S"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      cmd         : "sed -n '/<VirtualHost /,/<\\/VirtualHost>/p' @APP_Config_files@ /dev/null | egrep -i 'strict-transport-security'"
      expect      : "^[\\s]*[Hh]eader[\\s]+[Aa]lways[\\s]+[Ss]et[\\s]+[Ss]trict-[Tt]ransport-[Ss]ecurity[\\s]+\"max-age=(48[0-9]|49[0-9]|[5-9][0-9]{2})\".*"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "7.12 Ensure Only Cipher Suites That Provide Forward Secrecy Are Enabled"
      info        : "In cryptography, _forward secrecy_ (FS), which is also known as _perfect forward secrecy_ (PFS), is a feature of specific key exchange protocols that give assurance that your session keys will not be compromised even if the private key of the server is compromised. Protocols such as RSA do not provide the forward secrecy, while the protocols 'ECDHE' (Elliptic-Curve Diffie-Hellman Ephemeral) and the 'DHE' (Diffie-Hellman Ephemeral) will provide forward secrecy. The 'ECDHE' is the stronger protocol and should be preferred, while the 'DHE' may be allowed for greater compatibility with older clients. The TLS ciphers should be configured to require either the 'ECDHE' or the 'DHE' ephemeral key exchange, while not allowing other cipher suites.

Rationale:

During the TLS handshake, after the initial client & server Hello, there is a pre-master secret generated, which is used to generate the master secret, and in turn generates the session key. When using protocols that do not provide forward secrecy, such as RSA, the pre-master secret is encrypted by the client with the server's public key and sent over the network. However, with protocols such as 'ECDHE' (Elliptic-Curve Diffie-Hellman Ephemeral) the pre-master secret is not sent over the wire, even in encrypted format. The key exchange arrives at the shared secret in the clear using ephemeral keys that are not stored or used again. With FS, each session has a unique key exchange, so that future sessions are protected."
      solution    : "Perform one of the following to implement the recommended state:
- Add or modify the following line in the Apache server level configuration and every virtual host that is SSL/TLS enabled:

 SSLCipherSuite EECDH:EDH:!NULL:!SSLv2:!RC4:!aNULL:!3DES:!IDEA

- The more recent versions of openssl (such as 1.0.2 and newer) will support the usage of 'ECDHE' as a synonym for EECDH and 'DHE' as a synonym for EDH in the cipher specification. The usage of 'ECDHE' and 'DHE' are preferred so that the specification matches the expected output. So the cipher specification could be:

 SSLCipherSuite ECDHE:DHE:!NULL:!SSLv2:!RC4:!aNULL:!3DES:!IDEA"
      reference   : "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv6|14.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|2S,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*.+Strict-Transport-Security[\\s]+"
      expect      : "^[\\s]*Header[\\s]+[Aa]lways[\\s]+[Ss]et[\\s]+Strict-Transport-Security[\\s]+[Mm]ax-[Aa]ge=(4[8-9][0-9]|[5-9][0-9][0-9])[\\s]*$"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK_NOT
      description : "8.3 Ensure All Default Apache Content Is Removed - 'httpd.conf Include conf/extra/httpd-autoindex.conf does not exists'"
      info        : "In previous recommendations, we have removed default content such as the Apache manuals and default CGI programs. However, if you want to further restrict information leakage about the web server, it is important that default content such as icons are not left on the web server.

Rationale:

To identify the type of web servers and versions software installed, it is common for attackers to scan for icons or special content specific to the server type and version. A simple request like [http://example.com/icons/apache\_pb2.png](http://example.com/icons/apache_pb2.png) may tell the attacker that the server is Apache 2.2. Many icons are used primarily for auto indexing, which is recommended to be disabled."
      solution    : "Perform either of the following to implement the recommended state:

1. The default source build places the auto-index and icon configurations in the 'extra/httpd-autoindex.conf' file, so it can be disabled by leaving the include line commented out in the main 'httpd.conf' file, as shown below.

 # Fancy directory listings
 #Include conf/extra/httpd-autoindex.conf

2. Alternatively, the icon 'alias' directive and the directory access control configuration can be commented out as shown:

 # We include the /icons/ alias for FancyIndexed directory listings. If
 # you do not use FancyIndexing, you may comment this out.
 #
 #Alias /icons/ '/var/www/icons/'

 #
 # Options Indexes MultiViews FollowSymLinks
 # AllowOverride None
 # Order allow,deny
 # Allow from all
 #"
      reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,800-53r5|CM-7,CSCv6|18.9,CSCv7|13.2,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*[Ii]nclude[\\s]+conf\\/extra\\/httpd-autoindex\\\.conf[\\s]*"
      expect      : "^[\\s]*[Ii]nclude[\\s]+conf\\/extra\\/httpd-autoindex\\\.conf[\\s]*"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK_NOT
      description : "8.3 Ensure All Default Apache Content Is Removed - 'httpd.conf Alias /icons/ /var/www/icons/ does not exists'"
      info        : "In previous recommendations, we have removed default content such as the Apache manuals and default CGI programs. However, if you want to further restrict information leakage about the web server, it is important that default content such as icons are not left on the web server.

Rationale:

To identify the type of web servers and versions software installed, it is common for attackers to scan for icons or special content specific to the server type and version. A simple request like [http://example.com/icons/apache\_pb2.png](http://example.com/icons/apache_pb2.png) may tell the attacker that the server is Apache 2.2. Many icons are used primarily for auto indexing, which is recommended to be disabled."
      solution    : "Perform either of the following to implement the recommended state:

1. The default source build places the auto-index and icon configurations in the 'extra/httpd-autoindex.conf' file, so it can be disabled by leaving the include line commented out in the main 'httpd.conf' file, as shown below.

 # Fancy directory listings
 #Include conf/extra/httpd-autoindex.conf

2. Alternatively, the icon 'alias' directive and the directory access control configuration can be commented out as shown:

 # We include the /icons/ alias for FancyIndexed directory listings. If
 # you do not use FancyIndexing, you may comment this out.
 #
 #Alias /icons/ '/var/www/icons/'

 #
 # Options Indexes MultiViews FollowSymLinks
 # AllowOverride None
 # Order allow,deny
 # Allow from all
 #"
      reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,800-53r5|CM-7,CSCv6|18.9,CSCv7|13.2,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*[Aa]lias[\\s]+\\/icons\\/[\\s]+\"\\/var\\/www\\/icons\\/\"[\\s]*"
      expect      : "^[\\s]*[Aa]lias[\\s]+\\/icons\\/[\\s]+\"\\/var\\/www\\/icons\\/\"[\\s]*"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK_NOT
      description : "8.4 Ensure ETag Response Header Fields Do Not Include Inodes"
      info        : "The FileETag directive configures the file attributes that are used to create the ETag (entity tag) response header field when the document is based on a static file. The ETag value is used in cache management to save network bandwidth. The value returned may be based on combinations of the file inode, the modification time, and the file size.

Rationale:

When the FileETag is configured to include the file inode number, a remote attacker may be able to discern the inode number from returned values. The inode is considered sensitive information, as it could be useful in assisting in other attacks."
      solution    : "Perform the following to implement the recommended state:

Add or modify the 'FileETag' directive in the server and each virtual host configuration to have the value 'None' or 'MTime Size'."
      reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7,800-53r5|CM-7,CSCv6|18.9,CSCv7|13.2,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*FileETag[\\s]+.*([Aa]ll|[Ii][Nn]ode).*"
      expect      : "^[\\s]*FileETag[\\s]+.*([Aa]ll|[Ii][Nn]ode).*"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "10.1 Ensure the LimitRequestLine directive is Set to 512 or less"
      info        : "Buffer Overflow attacks attempt to exploit an application by providing more data than the application buffer can contain. If the application allows copying data to the buffer to overflow the boundaries of the buffer, then the application is vulnerable to a buffer overflow. The results of Buffer overflow vulnerabilities vary, and may result in the application crashing, or may allow the attacker to execute instructions provided in the data. The Apache 'LimitRequest*' directives allow the Apache web server to limit the sizes of requests and request fields and can be used to help protect programs and applications processing those requests.

Specifically, the 'LimitRequestLine' directive limits the allowed size of a client's HTTP request-line, which consists of the HTTP method, URI, and protocol version.

Rationale:

The limiting of the size of the request line is helpful so that the web server can prevent an unexpectedly long or large request from being passed to a potentially vulnerable CGI program, module or application that would have attempted to process the request. Of course, the underlying dependency is that we need to set the limits high enough to not interfere with any one application on the server, while setting them low enough to be of value in protecting the applications. Since the configuration directive is available only at the server configuration level, it is not possible to tune the value for different portions of the same web server. Please read the Apache documentation carefully, as these requests may interfere with the expected functionality of some web applications."
      solution    : "Perform the following to implement the recommended state:

Add or modify the 'LimitRequestLine' directive in the Apache configuration to have a value of '512' or less.

LimitRequestLine 512"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*[Ll]imit[Rr]equest[Ll]ine[\\s]*"
      expect      : "^[\\s]*[Ll]imit[Rr]equest[Ll]ine[\\s]+(51[0-2]|50[0-9]|[1-4][0-9][0-9]|[1-9][0-9]|[1-9])[\\s]*$"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "10.2 Ensure the LimitRequestFields Directive is Set to 100 or Less"
      info        : "The 'LimitRequestFields' directive limits the number of fields allowed in an HTTP request.

Rationale:

The limiting of the number of fields is helpful so that the web server can prevent an unexpectedly high number of fields from being passed to a potentially vulnerable CGI program, module or application that would have attempted to process the request. Of course, the underlying dependency is that we need to set the limits high enough to not interfere with any one application on the server, while setting them low enough to be of value in protecting the applications. Since the configuration directives are available only at the server configuration level, it is not possible to tune the value for different portions of the same web server. Please read the Apache documentation carefully, as these requests may interfere with the expected functionality of some web applications."
      solution    : "Perform the following to implement the recommended state:

Add or modify the 'LimitRequestFields' directive in the Apache configuration to have a value of '100' or less. If the directive is not present, the default depends on a compile time configuration, but defaults to a value of '100'.

LimitRequestFields 100"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*[Ll]imit[Rr]equest[Ff]ields[\\s]+"
      expect      : "^[\\s]*[Ll]imit[Rr]equest[Ff]ields[\\s]+(100|[1-9][0-9]|[1-9])[\\s]*$"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "10.3 Ensure the LimitRequestFieldsize Directive is Set to 1024 or Less"
      info        : "The 'LimitRequestFieldSize' directive sets the maximum size of an HTTP request header field. It is recommended that the 'LimitRequestFieldSize' directive be set to '1024' or less.

Rationale:

By limiting of the size of request headers is helpful so that the web server can prevent an unexpectedly long or large value from being passed to exploit a potentially vulnerable program. Of course, the underlying dependency is that we need to set the limits high enough to not interfere with any one application on the server, while setting them low enough to be of value in protecting the applications. Since the configuration directives are available only at the server configuration level, it is not possible to tune the value for different portions of the same web server. Please read the Apache documentation carefully, as these requests may interfere with the expected functionality of some web applications."
      solution    : "Perform the following to implement the recommended state:

Add or modify the 'LimitRequestFieldSize' directive in the Apache configuration to have a value of '1024' or less.

LimitRequestFieldsize 1024"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*[Ll]imit[Rr]equest[Ff]ieldsize[\\s]*"
      expect      : "^[\\s]*[Ll]imit[Rr]equest[Ff]ieldsize[\\s]+(102[0-4]|10[0-1][0-9]|[1-9][0-9][0-9]|[1-9][0-9]|[1-9])[\\s]*$"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "10.4 Ensure the LimitRequestBody Directive is Set to 102400 or Less"
      info        : "The 'LimitRequestBody' directive limits the number of bytes that are allowed in a request body. Size of requests may vary greatly; for example, during a file upload the size of the file must fit within this limit.

Rationale:

The limiting of the size of the request body is helpful so that the web server can prevent an unexpectedly long or large request from being passed to a potentially vulnerable program. Of course, the underlying dependency is that we need to set the limits high enough to not interfere with any one application on the server, while setting them low enough to be of value in protecting the applications. The 'LimitRequestBody' may be configured on a per directory, or per location context.
Please read the Apache documentation carefully, as these requests may interfere with the expected functionality of some web applications."
      solution    : "Perform the following to implement the recommended state:

Add or modify the 'LimitRequestBody' directive in the Apache configuration to have a value of '102400' (100K) or less. Please read the Apache documentation so it is understood this directive will limit the size of file uploads to the web server.

LimitRequestBody 102400"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|9,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2S,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/2378"
      file        : "@APP_Config_files@"
      regex       : "^[\\s]*[Ll]imit[Rr]equest[Bb]ody[\\s]*"
      expect      : "^[\\s]*[Ll]imit[Rr]equest[Bb]ody[\\s]+(102400|102[1-3][0-9][0-9]|10[0-1][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9]|[1-9])[\\s]*$"
    </custom_item>

    <if>
      <condition type:"OR">
        <custom_item>
          type        : RPM_CHECK
          description : "Check for SELinux - RPM"
          rpm         : "libselinux-0.0.0-0"
          operator    : "gt"
          required    : YES
        </custom_item>

        <custom_item>
          type        : RPM_CHECK
          description : "Check for SELinux1 - RPM"
          rpm         : "libselinux1-0.0.0-0"
          operator    : "gt"
          required    : YES
        </custom_item>

        <custom_item>
          type        : CMD_EXEC
          description : "Check for SELinux - dpkg"
          cmd         : "dpkg -s libselinux1 2>&1"
          expect      : "^[\\s]*Status: install ok installed[\\s]*"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "11.1 Ensure SELinux Is Enabled in Enforcing Mode"
          info        : "SELinux (Security-Enhanced Linux) is a Linux kernel security module that provides mandatory access control security policies with type enforcement that are checked after the traditional discretionary access controls. It was created by the US National Security Agency and can enforce rules on files and processes in a Linux system, and restrict actions, based on defined policies.

Rationale:

Web applications and services continue to be one of the leading attack vectors for black-hat criminals to gain access to information and servers. The threat is high because web servers are often externally accessible and typically have the greatest share of server-side vulnerabilities. The SELinux mandatory access controls provide a much stronger security model which can be used to implement a deny-by-default model only allowing what is explicitly permitted."
          solution    : "Perform the following to implement the recommended state:

If SELinux is not enabled in the configuration file, edit the file '/etc/selinux/config' and set the value of SELINUX as 'enforcing'. Reboot the system for the new configuration to be effective.

SELINUX=enforcing

If the current mode is not 'enforcing' and an immediate reboot is not possible, the current mode can be set to 'enforcing' with the command shown below.

# setenforce 1"
          reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.7,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          file        : "/etc/selinux/config"
          regex       : "^[\\s]*[sS][eE][lL][iI][nN][uU][xX][\\s]*="
          expect      : "^[\\s]*[sS][eE][lL][iI][nN][uU][xX][\\s]*=[\\s]*[eE][nN][fF][oO][rR][cC][iI][nN][gG][\\s]*$"
        </custom_item>

        <custom_item>
          type        : CMD_EXEC
          description : "11.2 Ensure Apache Processes Run in the httpd_t Confined Context"
          info        : "SELinux includes customizable targeted policies that may be used to confine the Apache httpd server to enforce least privileges so the httpd server has only the minimal access to specified directories, files, and network ports. Access is controlled by process types (domains) defined for the httpd process. There are over a hundred individual httpd related types defined in a default Apache SELinux policy, which includes many of the common Apache add-ons and applications such as php, nagios, and smokeping. The default SELinux policies work well for a default Apache installation, but implementation of SELinux targeted policies on a complex or highly customized web server requires a rather significant development and testing effort which comprehends both the workings of SELinux and the detailed operations and requirements of the web application.

All directories and files to be accessed by the web server process must have security labels with appropriate types. The following types are a sample of the most commonly used:
- 'http_port_t' - Network ports allowed for listening
- 'httpd_sys_content_t' - Read access to directories and files with web content
- 'httpd_log_t' - Directories and files to be used for writable log data
- 'httpd_sys_script_exec_t' - Directories and files for executable content.

Rationale:

With the proper implementation of SELinux, vulnerabilities in the web application may be prevented from being exploited due to the additional restrictions. For example, a vulnerability that allows an attacker to read inappropriate system files may be prevented from execution by SELinux because the inappropriate files are not labeled as 'httpd_sys_content_t'. Likewise, writing to an unexpected directory or execution of unexpected content can be prevented by similar mandatory security labels enforced by SELinux."
          solution    : "Perform the following to implement the recommended state:

If the running httpd processes are not confined to the 'httpd_t' SELinux context, check the context for the httpd binary and the 'apachectl' binary, and set the httpd binary to have a context of 'httpd_exec_t' and the 'apachectl' executable to have a context of 'initrc_exec_t', as shown below. Also note that on some platforms, such as Ubuntu, the Apache executable is named apache2 instead of httpd.

# ls -alZ /usr/sbin/httpd /usr/sbin/httpd.* /usr/sbin/apachectl
-rwxr-xr-x. root root system_u:object_r:initrc_exec_t:s0 /usr/sbin/apachectl
-rwxr-xr-x. root root system_u:object_r:httpd_exec_t:s0 /usr/sbin/httpd
-rwxr-xr-x. root root system_u:object_r:httpd_exec_t:s0 /usr/sbin/httpd.worker
-rwxr-xr-x. root root system_u:object_r:httpd_exec_t:s0 /usr/sbin/httpd.event

If the executable files are not labeled correctly, they may be relabeled with the 'chcon' command, as shown; however, the file system labeling is based on the SELinux file context policies, and the file systems will on some occasions be relabeled according to the policy.

# chcon -t initrc_exec_t /usr/sbin/apachectl
# chcon -t httpd_exec_t /usr/sbin/httpd /usr/sbin/httpd.*

Since the file system may be relabeled based on SELinux policy, it's best to check the SELinux policy with the 'semanage fcontext -l' option. If the policy is not present, add the pattern to the policy using the '-a' option. The 'restorecon' command shown below will restore the file context label according to the current policy, and is required if a pattern was added.

# ### Check the Policy
# semanage fcontext -l | fgrep 'apachectl'
# /usr/sbin/apachectl regular file system_u:object_r:initrc_exec_t:s0
# semanage fcontext -l | fgrep '/usr/sbin/httpd'
# /usr/sbin/httpd regular file system_u:object_r:httpd_exec_t:s0
# /usr/sbin/httpd.worker regular file system_u:object_r:httpd_exec_t:s0
# /usr/sbin/httpd.event regular file system_u:object_r:httpd_exec_t:s0
# ### Add to the policy, if not present
# semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd'
# semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd.worker'
# semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd.event'
# semanage fcontext -f -- -a -t initrc_exec_t /usr/sbin/apachectl

# ### Restore the file labeling accord to the SELinux policy
# restorecon -v /usr/sbin/httpd /usr/sbin/httpd.* /usr/sbin/apachectl"
          reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "ps -eZ | grep $(basename @APP_Binary_catalog@/apachectl)"
          expect      : ":httpd_t:"
        </custom_item>

        <custom_item>
          type        : CMD_EXEC
          description : "11.3 Ensure the httpd_t Type Is Not in Permissive Mode"
          info        : "In addition to setting the entire SELinux configuration in permissive mode, it is possible to set individual process types (domains) such as 'httpd_t' into permissive mode as well. Permissive mode will not prevent any access or actions; instead, any actions that would have been denied are simply logged.

Rationale:

Usage of permissive mode is helpful for testing and ensuring that SELinux will not prevent access that is necessary for the proper function of a web application. However, all access is allowed in permissive mode by SELinux."
          solution    : "Perform the following to implement the recommended state:

If the 'httpd_t' type is in permissive mode, the customized permissive mode should be deleted with the following 'semanage' command.

# semanage permissive -d httpd_t"
          reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "semodule -l | egrep 'permissive_httpd_t' | awk '{print} END {if (NR == 0) print \"none\"}'"
          expect      : "none"
        </custom_item>

        <custom_item>
          type        : CMD_EXEC
          description : "11.4 Ensure Only the Necessary SELinux Booleans Are Enabled"
          info        : "SELinux booleans allow or disallow behavior specific to the Apache web server. Common examples include whether CGI execution is allowed, or if the httpd server is allowed to communicate with the current terminal ('tty'). Communication with the terminal may be necessary for entering a passphrase during startup to decrypt a private key.

Rationale:

Enabling only the necessary httpd related booleans provides a defense in depth approach that will deny actions that are not in use or expected.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution    : "Perform the following to implement the recommended state:

To disable the SELinux httpd booleans that are determined to be unnecessary, use the 'setsebool' command as shown below with the '-P' option to make the change persistent.

# setsebool -P httpd_enable_cgi off
# getsebool httpd_enable_cgi
httpd_enable_cgi --> off"
          reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|18,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "getsebool -a | grep httpd_ | grep '> on'"
          severity    : MEDIUM
        </custom_item>

        <report type:"PASSED">
          description : "12.1 Ensure the AppArmor Framework Is Enabled"
          info        : "AppArmor is a Linux kernel security module that provides a named based mandatory access control with security policies. AppArmor can enforce rules on programs for file access and network connections and restrict actions based on defined policies.

Rationale:

Web applications and web services continue to be one of the leading attack vectors for criminals to gain access to information and servers. The threat is high because web servers are often externally accessible and typically have the greatest share of server-side vulnerabilities. The AppArmor mandatory access controls provide a much stronger security model which can be used to implement a deny-by-default model only allowing what is explicitly permitted.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Perform the following to implement the recommended state:

- If the 'aa-status' command is not found, then the AppArmor package is not installed and needs to be installed using the appropriate Linux distribution package management. For example:

 # apt-get install apparmor
 # apt-get install libapache2-mod-apparmor

- To enable the AppArmor framework, run the 'init.d' script as shown below.

 # /etc/init.d/apparmor start"
          reference   : "800-171|3.4.8,800-53|CM-7(5),800-53r5|CM-7(5),CSCv6|2.2,CSCv7|2.7,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>

        <report type:"PASSED">
          description : "12.2 Ensure the Apache AppArmor Profile Is Configured Properly"
          info        : "AppArmor includes customizable profiles that may be used to confine the Apache web server to enforce least privileges so the server has only the minimal access to specified directories, files, and network ports. Access is controlled by a profile defined for the apache2 process. The default AppArmor profile is typically a very permissive profile that allows read-write access to all system files. Therefore, it's important that the default profile be customized to enforce least privileges. The AppArmor utilities such as 'aa-autodep', 'aa-complain', and 'aa-logprof' can be used to generate an initial profile based on actual usage. However, thorough testing, review, and customization will be necessary to ensure the Apache profile restrictions allow the necessary functionality while implementing least privilege.

Rationale:

With the proper implementation of an AppArmor profile, vulnerabilities in the web application may be prevented from being exploited due to the additional restrictions. For example, a vulnerability that allows an attacker to read an inappropriate system files may be prevented from execution by AppArmor because the inappropriate files are not allowed by the profile. Likewise, writing to an unexpected directory or executing unexpected content can be prevented by similar mandatory security controls enforced by AppArmor.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Perform the following to implement the recommended state:

1. Stop the Apache server.

 # service apache2 stop

2. Create a mostly empty apache2 profile based on program dependencies.

 # aa-autodep apache2
 Writing updated profile for /usr/sbin/apache2.

3. Set the apache2 profile in complain mode so access violations will be allowed and will be logged.

 # aa-complain apache2
 Setting /usr/sbin/apache2 to complain mode.

4. Start the apache2 service.

 # service apache2 start

5. Thoroughly test the web application, attempting to exercise all intended functionality so AppArmor will generate the necessary logs of all resources accessed. The logs are sent via the system syslog utility and are typically found in either the '/var/log/syslog' or '/var/log/messages' files. Also stop and restart the web server as part of the testing process.
6. Use 'aa-logprof' to update the profile based on logs generated during the testing. The tool will prompt for suggested modifications to the profile, based on the logs. The logs may also be reviewed manually in order to update the profile.

 # aa-logprof

7. Review and edit the profile, removing any inappropriate content and adding appropriate access rules. Directories with multiple files accessed with the same permission can be simplified with the usage of wild-cards when appropriate. Reload the updated profile using the 'apparmor_parser' command.

 # apparmor_parser -r /etc/apparmor.d/usr.sbin.apache2

8. Test the new updated profile again and check for any new AppArmor denied logs generated. Update and reload the profile as necessary. Repeat the application tests until no new AppArmor deny logs are created, except for access which should be prohibited.

 # tail -f /var/log/syslog

9. Set the apache2 profile to enforce mode, reload AppArmor, and test the web site functionality again.

 # aa-enforce /usr/sbin/apache2
 # /etc/init.d/apparmor reload"
          reference   : "CSCv6|2,LEVEL|2S"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>

        <report type:"PASSED">
          description : "12.3 Ensure the Apache AppArmor Profile Is in Enforce Mode"
          info        : "AppArmor profiles may be in one of three modes: disabled, complain, or enforce. In the complain mode, any violations of the access controls are logged but the restrictions are not enforced. Also, once a profile mode has been changed, it is recommended to restart the Apache server, otherwise the currently running process may not be confined by the policy.

Rationale:

The complain mode is useful for testing and debugging a profile but is not appropriate for production. Only the confined process running in enforce mode will prevent attacks that violate the configured access controls.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Perform the following to implement the recommended state:

1. Set the profile state to enforce mode.

 # aa-enforce apache2
 Setting /usr/sbin/apache2 to enforce mode.

2. Stop the Apache server and confirm that is it not running. In some cases, the AppArmor controls may prevent the web server from stopping properly, and it may be necessary to stop the process manually or even reboot the server.

 # service apache2 stop
 * Stopping web server apache2
 # service apache2 status
 * apache2 is not running

3. Restart the Apache service.

 # service apache2 start
 * Starting web server apache2"
          reference   : "800-171|3.4.8,800-53|CM-7(5),800-53r5|CM-7(5),CSCv6|2.2,CSCv7|2.7,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>
      </then>

      <else>
        <report type:"PASSED">
          description : "11.1 Ensure SELinux Is Enabled in Enforcing Mode"
          info        : "SELinux (Security-Enhanced Linux) is a Linux kernel security module that provides mandatory access control security policies with type enforcement that are checked after the traditional discretionary access controls. It was created by the US National Security Agency and can enforce rules on files and processes in a Linux system, and restrict actions, based on defined policies.

Rationale:

Web applications and services continue to be one of the leading attack vectors for black-hat criminals to gain access to information and servers. The threat is high because web servers are often externally accessible and typically have the greatest share of server-side vulnerabilities. The SELinux mandatory access controls provide a much stronger security model which can be used to implement a deny-by-default model only allowing what is explicitly permitted."
          solution    : "Perform the following to implement the recommended state:

If SELinux is not enabled in the configuration file, edit the file '/etc/selinux/config' and set the value of SELINUX as 'enforcing'. Reboot the system for the new configuration to be effective.

SELINUX=enforcing

If the current mode is not 'enforcing' and an immediate reboot is not possible, the current mode can be set to 'enforcing' with the command shown below.

# setenforce 1"
          reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.7,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>

        <report type:"PASSED">
          description : "11.2 Ensure Apache Processes Run in the httpd_t Confined Context"
          info        : "SELinux includes customizable targeted policies that may be used to confine the Apache httpd server to enforce least privileges so the httpd server has only the minimal access to specified directories, files, and network ports. Access is controlled by process types (domains) defined for the httpd process. There are over a hundred individual httpd related types defined in a default Apache SELinux policy, which includes many of the common Apache add-ons and applications such as php, nagios, and smokeping. The default SELinux policies work well for a default Apache installation, but implementation of SELinux targeted policies on a complex or highly customized web server requires a rather significant development and testing effort which comprehends both the workings of SELinux and the detailed operations and requirements of the web application.

All directories and files to be accessed by the web server process must have security labels with appropriate types. The following types are a sample of the most commonly used:
- 'http_port_t' - Network ports allowed for listening
- 'httpd_sys_content_t' - Read access to directories and files with web content
- 'httpd_log_t' - Directories and files to be used for writable log data
- 'httpd_sys_script_exec_t' - Directories and files for executable content.

Rationale:

With the proper implementation of SELinux, vulnerabilities in the web application may be prevented from being exploited due to the additional restrictions. For example, a vulnerability that allows an attacker to read inappropriate system files may be prevented from execution by SELinux because the inappropriate files are not labeled as 'httpd_sys_content_t'. Likewise, writing to an unexpected directory or execution of unexpected content can be prevented by similar mandatory security labels enforced by SELinux."
          solution    : "Perform the following to implement the recommended state:

If the running httpd processes are not confined to the 'httpd_t' SELinux context, check the context for the httpd binary and the 'apachectl' binary, and set the httpd binary to have a context of 'httpd_exec_t' and the 'apachectl' executable to have a context of 'initrc_exec_t', as shown below. Also note that on some platforms, such as Ubuntu, the Apache executable is named apache2 instead of httpd.

# ls -alZ /usr/sbin/httpd /usr/sbin/httpd.* /usr/sbin/apachectl
-rwxr-xr-x. root root system_u:object_r:initrc_exec_t:s0 /usr/sbin/apachectl
-rwxr-xr-x. root root system_u:object_r:httpd_exec_t:s0 /usr/sbin/httpd
-rwxr-xr-x. root root system_u:object_r:httpd_exec_t:s0 /usr/sbin/httpd.worker
-rwxr-xr-x. root root system_u:object_r:httpd_exec_t:s0 /usr/sbin/httpd.event

If the executable files are not labeled correctly, they may be relabeled with the 'chcon' command, as shown; however, the file system labeling is based on the SELinux file context policies, and the file systems will on some occasions be relabeled according to the policy.

# chcon -t initrc_exec_t /usr/sbin/apachectl
# chcon -t httpd_exec_t /usr/sbin/httpd /usr/sbin/httpd.*

Since the file system may be relabeled based on SELinux policy, it's best to check the SELinux policy with the 'semanage fcontext -l' option. If the policy is not present, add the pattern to the policy using the '-a' option. The 'restorecon' command shown below will restore the file context label according to the current policy, and is required if a pattern was added.

# ### Check the Policy
# semanage fcontext -l | fgrep 'apachectl'
# /usr/sbin/apachectl regular file system_u:object_r:initrc_exec_t:s0
# semanage fcontext -l | fgrep '/usr/sbin/httpd'
# /usr/sbin/httpd regular file system_u:object_r:httpd_exec_t:s0
# /usr/sbin/httpd.worker regular file system_u:object_r:httpd_exec_t:s0
# /usr/sbin/httpd.event regular file system_u:object_r:httpd_exec_t:s0
# ### Add to the policy, if not present
# semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd'
# semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd.worker'
# semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd.event'
# semanage fcontext -f -- -a -t initrc_exec_t /usr/sbin/apachectl

# ### Restore the file labeling accord to the SELinux policy
# restorecon -v /usr/sbin/httpd /usr/sbin/httpd.* /usr/sbin/apachectl"
          reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>

        <report type:"PASSED">
          description : "11.3 Ensure the httpd_t Type Is Not in Permissive Mode"
          info        : "In addition to setting the entire SELinux configuration in permissive mode, it is possible to set individual process types (domains) such as 'httpd_t' into permissive mode as well. Permissive mode will not prevent any access or actions; instead, any actions that would have been denied are simply logged.

Rationale:

Usage of permissive mode is helpful for testing and ensuring that SELinux will not prevent access that is necessary for the proper function of a web application. However, all access is allowed in permissive mode by SELinux."
          solution    : "Perform the following to implement the recommended state:

If the 'httpd_t' type is in permissive mode, the customized permissive mode should be deleted with the following 'semanage' command.

# semanage permissive -d httpd_t"
          reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>

        <report type:"PASSED">
          description : "11.4 Ensure Only the Necessary SELinux Booleans Are Enabled"
          info        : "SELinux booleans allow or disallow behavior specific to the Apache web server. Common examples include whether CGI execution is allowed, or if the httpd server is allowed to communicate with the current terminal ('tty'). Communication with the terminal may be necessary for entering a passphrase during startup to decrypt a private key.

Rationale:

Enabling only the necessary httpd related booleans provides a defense in depth approach that will deny actions that are not in use or expected.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
          solution    : "Perform the following to implement the recommended state:

To disable the SELinux httpd booleans that are determined to be unnecessary, use the 'setsebool' command as shown below with the '-P' option to make the change persistent.

# setsebool -P httpd_enable_cgi off
# getsebool httpd_enable_cgi
httpd_enable_cgi --> off"
          reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv6|18,CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "12.1 Ensure the AppArmor Framework Is Enabled"
          info        : "AppArmor is a Linux kernel security module that provides a named based mandatory access control with security policies. AppArmor can enforce rules on programs for file access and network connections and restrict actions based on defined policies.

Rationale:

Web applications and web services continue to be one of the leading attack vectors for criminals to gain access to information and servers. The threat is high because web servers are often externally accessible and typically have the greatest share of server-side vulnerabilities. The AppArmor mandatory access controls provide a much stronger security model which can be used to implement a deny-by-default model only allowing what is explicitly permitted."
          solution    : "Perform the following to implement the recommended state:

- If the 'aa-status' command is not found, then the AppArmor package is not installed and needs to be installed using the appropriate Linux distribution package management. For example:

 # apt-get install apparmor
 # apt-get install libapache2-mod-apparmor

- To enable the AppArmor framework, run the 'init.d' script as shown below.

 # /etc/init.d/apparmor start"
          reference   : "800-171|3.4.8,800-53|CM-7(5),800-53r5|CM-7(5),CSCv6|2.2,CSCv7|2.7,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "aa-status"
          expect      : "^[\\s]*apparmor[\\s]+module[\\s]+is[\\s]+loaded"
        </custom_item>

        <report type:"WARNING">
          description : "12.2 Ensure the Apache AppArmor Profile Is Configured Properly"
          info        : "AppArmor includes customizable profiles that may be used to confine the Apache web server to enforce least privileges so the server has only the minimal access to specified directories, files, and network ports. Access is controlled by a profile defined for the apache2 process. The default AppArmor profile is typically a very permissive profile that allows read-write access to all system files. Therefore, it's important that the default profile be customized to enforce least privileges. The AppArmor utilities such as 'aa-autodep', 'aa-complain', and 'aa-logprof' can be used to generate an initial profile based on actual usage. However, thorough testing, review, and customization will be necessary to ensure the Apache profile restrictions allow the necessary functionality while implementing least privilege.

Rationale:

With the proper implementation of an AppArmor profile, vulnerabilities in the web application may be prevented from being exploited due to the additional restrictions. For example, a vulnerability that allows an attacker to read an inappropriate system files may be prevented from execution by AppArmor because the inappropriate files are not allowed by the profile. Likewise, writing to an unexpected directory or executing unexpected content can be prevented by similar mandatory security controls enforced by AppArmor.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Perform the following to implement the recommended state:

1. Stop the Apache server.

 # service apache2 stop

2. Create a mostly empty apache2 profile based on program dependencies.

 # aa-autodep apache2
 Writing updated profile for /usr/sbin/apache2.

3. Set the apache2 profile in complain mode so access violations will be allowed and will be logged.

 # aa-complain apache2
 Setting /usr/sbin/apache2 to complain mode.

4. Start the apache2 service.

 # service apache2 start

5. Thoroughly test the web application, attempting to exercise all intended functionality so AppArmor will generate the necessary logs of all resources accessed. The logs are sent via the system syslog utility and are typically found in either the '/var/log/syslog' or '/var/log/messages' files. Also stop and restart the web server as part of the testing process.
6. Use 'aa-logprof' to update the profile based on logs generated during the testing. The tool will prompt for suggested modifications to the profile, based on the logs. The logs may also be reviewed manually in order to update the profile.

 # aa-logprof

7. Review and edit the profile, removing any inappropriate content and adding appropriate access rules. Directories with multiple files accessed with the same permission can be simplified with the usage of wild-cards when appropriate. Reload the updated profile using the 'apparmor_parser' command.

 # apparmor_parser -r /etc/apparmor.d/usr.sbin.apache2

8. Test the new updated profile again and check for any new AppArmor denied logs generated. Update and reload the profile as necessary. Repeat the application tests until no new AppArmor deny logs are created, except for access which should be prohibited.

 # tail -f /var/log/syslog

9. Set the apache2 profile to enforce mode, reload AppArmor, and test the web site functionality again.

 # aa-enforce /usr/sbin/apache2
 # /etc/init.d/apparmor reload"
          reference   : "CSCv6|2,LEVEL|2S"
          see_also    : "https://workbench.cisecurity.org/files/2378"
        </report>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "12.3 Ensure the Apache AppArmor Profile Is in Enforce Mode"
          info        : "AppArmor profiles may be in one of three modes: disabled, complain, or enforce. In the complain mode, any violations of the access controls are logged but the restrictions are not enforced. Also, once a profile mode has been changed, it is recommended to restart the Apache server, otherwise the currently running process may not be confined by the policy.

Rationale:

The complain mode is useful for testing and debugging a profile but is not appropriate for production. Only the confined process running in enforce mode will prevent attacks that violate the configured access controls."
          solution    : "Perform the following to implement the recommended state:

1. Set the profile state to enforce mode.

 # aa-enforce apache2
 Setting /usr/sbin/apache2 to enforce mode.

2. Stop the Apache server and confirm that is it not running. In some cases, the AppArmor controls may prevent the web server from stopping properly, and it may be necessary to stop the process manually or even reboot the server.

 # service apache2 stop
 * Stopping web server apache2
 # service apache2 status
 * apache2 is not running

3. Restart the Apache service.

 # service apache2 start
 * Starting web server apache2"
          reference   : "800-171|3.4.8,800-53|CM-7(5),800-53r5|CM-7(5),CSCv6|2.2,CSCv7|2.7,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,ITSG-33|CM-7,LEVEL|2S,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3"
          see_also    : "https://workbench.cisecurity.org/files/2378"
          cmd         : "aa-unconfined --paranoid | grep apache2 | awk '{print} END {if (NR == 0) print \"none\"}'"
          expect      : "none"
        </custom_item>
      </else>
    </if>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_Apache_HTTP_Server_2.2_Benchmark_v3.6.0_Level_2_Middleware.audit from CIS Apache HTTP Server 2.2 Benchark v3.6.0"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
    </report>
  </else>
</if>

</check_type>
