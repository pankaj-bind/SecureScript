#TRUSTED 43b5bad9cd3e9ecaee9f7ac369212d026c5097abe0d7648b8bbb1fd332e9bc4a8ae3c6ec35f04ac21fa500f13a43c19489b8435bb6e0ff3ae1bc64435cfcced2fa24ee668330e26c5099a3fe1167c2b039d8a93f706e6e58a878b21674683a6cb87685a7a0e51a1faecaf9f930258bc70c6cffa760328547e3fe3b40cfa96a23b142edb457f0394c5b2c577405f6abc4e3e1f12be1faab4adedc565ceb3c71c81cd104149675bc13bd96200caecd9866e954b25612c4bc2c9ed13009505bf270d435bc59c57fc7bf5aa4abcbb9d140f85e7df8f05385354fb0245c792ec2626f70803015ec427d2d88d37faa4ec55e55155a5eb82b3a25299f8cc7a16d489dc5358c9c0b98b7301c200916edfdf8fc47b08c3f92ae67b7589bbe95afb06a05bca62457d6527cb277db25a00857a5f33831b5f181108f040dab7164185b9407d7fce94162a5b85048b7c8b156cee13b43cefc9b67228ca5e1f93162afa26b7331b8fbdd73fe9009ca1b393d313bf063ebee8d0dc758c257bc00c4ec09b7146d8f122368c268c68cbf0a0b4cba71ba1eed4f9b334c2e564b3b0b4d9e4af231e1491582a7c82364212c38c66e7e7b3991f0bfc505f8cc42ec1436945679321248a047b403bda4315a058cb71cdd7a9161ec11394b54779171b4493e5b40f680e11e8b37b1e88ca09af2cecf0afc763e78679f85fc006e2a4bc7bb04e36bf31542fd
#TRUST-RSA-SHA256 82992e11e6c0176911452bc6d03199e00ae7ceb9fe9fbd5784d81f740eefa49f818a4d07cbd2d144f6595f95a29d123e2521c9cd85d1d0d70809709c4236e135bee9f343f78b9abba2d4b0c550125a867cda2b3aed7dde64c42208dde4398d1dadc4ced0e9a86acfc5872e081784964ca2579e5b624b7a86297c2e8106583efb81941bace8d7b46bd5375bc6587c3fba5910b1496fef508f5990a2e706a80a333d2698455c0842ae1698a5e80e1754473ff431cbb4319ec9bfff51b61271feb2d456a623800e83be404226d4e78368b1460f12fbbd67ded3b02c2531313634a567a8f3a2f868307cc40f93cc964b8e61fb5bdd5088698666b07dedceb0219714159c70bbb47548d1f68e500ef373102270e5e2d1bff4d397a50411756d147d004550cc6d0c70c5257b705369000b31d177a6e827b2dc7853000f0d5c3b123f470d71266ad54696bcbe57b145049db4f019121554be4aaf0d5762b4e0e29a800f0b1fc4a5927b461a06894ee01da5d6bd6e6034cbbc2ce4330ba5b850fa98beb25d08bdac06f5a7a07a408136d53b63454d053f427e00fc82a6682e338b9df6af1d8a0485746ab4f808bf0d3bd56a383f393a60743776c21212e7e30838bf1b9dd9fafc5fd3fbefedb3a713f38cf74628fe2ac42618a171499a7d1c58380c9d25f12cdd0d4f17a00530f94bb908f61904471fe8acf060184e4625414fb07a181d
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.16 $
# $Date: 2024/06/17 $
#
# Description			: This .audit is designed against the CIS Docker Community Edition Benchmark v1.1.0 07-06-2017
#
#
# Many commands use unqualified paths to be flexible in executing on different docker vessel linux distributions
#
#<ui_metadata>
#<display_name>CIS Docker Community Edition v1.1.0 L2 Docker</display_name>
#<spec>
#  <type>CIS</type>
#  <name>Docker Community Edition</name>
#  <profile>L2 Docker</profile>
#  <version>1.1.0</version>
#  <link>https://workbench.cisecurity.org/files/1726</link>
#</spec>
#<labels>cis,docker_community_edition_linux,agent,update_20230227</labels>
#<benchmark_refs>CCE,CIS_Recommendation,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>PATH_TO_TLS_CA_FILE</name>
#    <default>/etc/docker/certs.d/CA_CERT</default>
#    <description>CA Cert file path</description>
#    <info>CA Cert file path</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>AUTH_PLUGIN_ID</name>
#    <default>1234</default>
#    <description>AUTH Plugin ID</description>
#    <info>2.11 - value of --authorization-plugin=</info>
#    <value_type>INTEGER</value_type>
#  </variable>
#  <variable>
#    <name>CGROUP_PARENT</name>
#    <default>/foobar</default>
#    <description>CGROUP Parent</description>
#    <info>2.9 - value of --cgroup-parent=/foobar</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>LOG_DRIVER</name>
#    <default>syslog</default>
#    <description>Logging Driver</description>
#    <info>2.12 - value of --log-driver=</info>
#    <value_type>STRING</value_type>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "Check if this is a Docker Vessel/Host"
      cmd         : "/usr/bin/docker info"
      expect      : "Containers"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS Docker Community Edition v1.1.0 L2 Docker"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "2.8 Enable user namespace support --userns-remap=default"
      info        : "Enable user namespace support in Docker daemon to utilize container user to host user re-mapping. This recommendation is beneficial where containers you are using do not have an explicit container user defined in the container image. If container images that you are using have a pre-defined non-root user, this recommendation may be skipped since this feature is still in its infancy and might give you unpredictable issues and complexities.
Rationale:
The Linux kernel user namespace support in Docker daemon provides additional security for the Docker host system. It allows a container to have a unique range of user and group IDs which are outside the traditional user and group range utilized by the host system.
For example, the root user will have expected administrative privilege inside the container but can effectively be mapped to an unprivileged UID on the host system."
      solution    : "Please consult Docker documentation for various ways in which this can be configured depending upon your requirements. Your steps might also vary based on platform - For example, on Red Hat, sub-UIDs and sub-GIDs mapping creation does not work automatically. You might have to create your own mapping.
However, the high-level steps are as below:
Step 1: Ensure that the files /etc/subuid and /etc/subgid exist.
touch /etc/subuid /etc/subgid
Step 2: Start the docker daemon with --userns-remap flag
dockerd --userns-remap=default
Impact:
User namespace remapping makes quite a few Docker features incompatible and also currently breaks a few functionalities. Check out the Docker documentation and referenced links for details.
Default Value:
By default, user namespace is not remapped."
      reference   : "800-171|3.13.1,800-171|3.13.5,800-53|SC-7a.,800-53r5|SC-7a.,CN-L3|8.1.10.6(j),CSCv6|18,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7a.,LEVEL|2A,NESA|T3.4.1,NESA|T3.6.3,NESA|T4.2.1,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "ps -ef | grep docker | grep [\-][\-]userns-remap=default"
      expect      : "--userns-remap=default"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "2.8 Enable user namespace support - /etc/subuid"
      info        : "Enable user namespace support in Docker daemon to utilize container user to host user re-mapping. This recommendation is beneficial where containers you are using do not have an explicit container user defined in the container image. If container images that you are using have a pre-defined non-root user, this recommendation may be skipped since this feature is still in its infancy and might give you unpredictable issues and complexities.
Rationale:
The Linux kernel user namespace support in Docker daemon provides additional security for the Docker host system. It allows a container to have a unique range of user and group IDs which are outside the traditional user and group range utilized by the host system.
For example, the root user will have expected administrative privilege inside the container but can effectively be mapped to an unprivileged UID on the host system."
      solution    : "Please consult Docker documentation for various ways in which this can be configured depending upon your requirements. Your steps might also vary based on platform - For example, on Red Hat, sub-UIDs and sub-GIDs mapping creation does not work automatically. You might have to create your own mapping.
However, the high-level steps are as below:
Step 1: Ensure that the files /etc/subuid and /etc/subgid exist.
touch /etc/subuid /etc/subgid
Step 2: Start the docker daemon with --userns-remap flag
dockerd --userns-remap=default
Impact:
User namespace remapping makes quite a few Docker features incompatible and also currently breaks a few functionalities. Check out the Docker documentation and referenced links for details.
Default Value:
By default, user namespace is not remapped."
      reference   : "CSCv6|18,LEVEL|2A"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      file        : "/etc/subuid"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "2.8 Enable user namespace support - /etc/subgid"
      info        : "Enable user namespace support in Docker daemon to utilize container user to host user re-mapping. This recommendation is beneficial where containers you are using do not have an explicit container user defined in the container image. If container images that you are using have a pre-defined non-root user, this recommendation may be skipped since this feature is still in its infancy and might give you unpredictable issues and complexities.
Rationale:
The Linux kernel user namespace support in Docker daemon provides additional security for the Docker host system. It allows a container to have a unique range of user and group IDs which are outside the traditional user and group range utilized by the host system.
For example, the root user will have expected administrative privilege inside the container but can effectively be mapped to an unprivileged UID on the host system."
      solution    : "Please consult Docker documentation for various ways in which this can be configured depending upon your requirements. Your steps might also vary based on platform - For example, on Red Hat, sub-UIDs and sub-GIDs mapping creation does not work automatically. You might have to create your own mapping.
However, the high-level steps are as below:
Step 1: Ensure that the files /etc/subuid and /etc/subgid exist.
touch /etc/subuid /etc/subgid
Step 2: Start the docker daemon with --userns-remap flag
dockerd --userns-remap=default
Impact:
User namespace remapping makes quite a few Docker features incompatible and also currently breaks a few functionalities. Check out the Docker documentation and referenced links for details.
Default Value:
By default, user namespace is not remapped."
      reference   : "CSCv6|18,LEVEL|2A"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      file        : "/etc/subgid"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "2.9 Ensure the default cgroup usage has been confirmed"
      info        : "The --cgroup-parent option allows you to set the default cgroup parent to use for all the containers. If there is no specific use case, this setting should be left at its default.
Rationale:
System administrators typically define cgroups under which containers are supposed to run. Even if cgroups are not explicitly defined by the system administrators, containers run under docker cgroup by default.
It is possible to attach to a different cgroup other than that is the default. This usage should be monitored and confirmed. By attaching to a different cgroup than the one that is a default, it is possible to share resources unevenly and thus might starve the host for resources."
      solution    : "The default setting is good enough and can be left as-is. If you want to specifically set a non-default cgroup, pass --cgroup-parent parameter to the docker daemon when starting it.
For Example,
dockerd --cgroup-parent=/foobar
Impact:
None.


Default Value:
By default, docker daemon uses /docker for fs cgroup driver and system.slice for systemd cgroup driver."
      reference   : "800-53|SC-39,800-53r5|SC-39,CSCv6|18,GDPR|32.1.b,HIPAA|164.306(a)(1),LEVEL|2A,QCSC-v1|5.2.1"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "ps -ef | grep docker | grep [\-][\-]cgroup-parent | /usr/bin/awk \'{print} END {if (NR == 0) print \"none\"}\'"
      expect      : "(--cgroup-parent=@CGROUP_PARENT@|none)"
    </custom_item>

    <report type:"WARNING">
      description : "2.10 Ensure base device size is not changed until needed"
      info        : "In certain circumstances, you might need containers bigger than 10G in size. In these cases, carefully choose the base device size.
Rationale:
The base device size can be increased at daemon restart. Increasing the base device size allows all future images and containers to be of the new base device size. A user can use this option to expand the base device size however shrinking is not permitted. This value affects the system-wide base empty filesystem that may already be initialized and inherited by pulled images.
Though the file system does not allot the increased size if it is empty, it will use more space for the empty case depending upon the device size. This may cause a denial of service by ending up in file system being over-allocated or full.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Do not set --storage-opt dm.basesize until needed.
Impact:
None.
Default Value:
The default base device size is 10G."
      reference   : "CSCv6|18,LEVEL|2A"
      see_also    : "https://workbench.cisecurity.org/files/1726"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "2.11 Ensure that authorization for Docker client commands is enabled"
      info        : "Use native Docker authorization plugins or a third party authorization mechanism with Docker daemon to manage access to Docker client commands.
Rationale:
Dockers out-of-the-box authorization model is all or nothing. Any user with permission to access the Docker daemon can run any Docker client command. The same is true for callers using Dockers remote API to contact the daemon. If you require greater access control, you can create authorization plugins and add them to your Docker daemon configuration. Using an authorization plugin, a Docker administrator can configure granular access policies for managing access to Docker daemon.
Third party integrations of Docker may implement their own authorization models to require authorization with the Docker daemon outside of docker's native authorization plugin (i.e. Kubernetes, Cloud Foundry, Openshift)."
      solution    : "Step 1: Install/Create an authorization plugin.
Step 2: Configure the authorization policy as desired.
Step 3: Start the docker daemon as below:
dockerd --authorization-plugin=<PLUGIN_ID>
Impact:
Each docker command specifically passes through authorization plugin mechanism. This might introduce a slight performance drop.
Third party use of alternative container engines that utilize the docker daemon may provide alternative mechanisms to provide this security control.
Default Value:
By default, authorization plugins are not set up."
      reference   : "800-171|3.5.1,800-53|IA-2,800-53r5|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv6|16,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2,ITSG-33|IA-2a.,LEVEL|2A,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "ps -ef | grep docker | grep [\-][\-]authorization-plugin"
      expect      : "authorization-plugin=@AUTH_PLUGIN_ID@"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "2.12 Ensure centralized and remote logging is configured"
      info        : "Docker now supports various log drivers. A preferable way to store logs is the one that supports centralized and remote logging.
Rationale:
Centralized and remote logging ensures that all important log records are safe despite catastrophic events. Docker now supports various such logging drivers. Use the one that suits your environment the best."
      solution    : "Step 1: Setup the desired log driver by following its documentation.
Step 2: Start the docker daemon with that logging driver.
For example,
dockerd --log-driver=syslog --log-opt syslog-address=tcp://192.xxx.xxx.xxx
Impact:
None.
Default Value:
By default, container logs are maintained as json files"
      reference   : "800-171|3.3.8,800-53|AU-9(2),800-53r5|AU-9(2),CN-L3|8.1.3.5(d),CN-L3|8.1.4.3(c),CSCv6|6.6,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9(2),LEVEL|2A,NESA|M5.2.3,NESA|M5.5.2,NIAv2|SS13e,PCI-DSSv3.2.1|10.5.3,PCI-DSSv3.2.1|10.5.4,PCI-DSSv4.0|10.3.3,QCSC-v1|8.2.1,QCSC-v1|13.2"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "ps -ef | grep docker | grep [\-][\-]log-driver"
      expect      : "log-driver=@LOG_DRIVER@"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "2.16 Ensure daemon-wide custom seccomp profile is applied, if needed"
      info        : "You can choose to apply your custom seccomp profile at the daemon-wide level if needed and override Docker's default seccomp profile.
Rationale:
A large number of system calls are exposed to every userland process with many of them going unused for the entire lifetime of the process. Most of the applications do not need all the system calls and thus benefit by having a reduced set of available system calls. The reduced set of system calls reduces the total kernel surface exposed to the application and thus improvises application security.
You could apply your own custom seccomp profile instead of Docker's default seccomp profile. Alternatively, if Docker's default profile is good for your environment, you can choose to ignore this recommendation.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "By default, Docker's default seccomp profile is applied. If this is good for your environment, no action is necessary. Alternatively, if you choose to apply your own seccomp profile, use the --seccomp-profile flag at daemon start or put it in the daemon runtime parameters file.
dockerd --seccomp-profile </path/to/seccomp/profile>
Impact:
A misconfigured seccomp profile could possibly interrupt your container environment. Docker-default blocked calls have been carefully scrutinized. These address some critical vulnerabilities/issues within container environments (for example, kernel key ring calls). So, you should be very careful while overriding the defaults.
Default Value:
By default, Docker applies a seccomp profile."
      reference   : "800-53|SC-39,800-53r5|SC-39,CSCv6|18,GDPR|32.1.b,HIPAA|164.306(a)(1),LEVEL|2M,QCSC-v1|5.2.1"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "docker info --format '{{ .SecurityOptions }}'"
      expect      : ""
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "4.5 Ensure Content trust for Docker is Enabled"
      info        : "Content trust is disabled by default. You should enable it.
Rationale:
Content trust provides the ability to use digital signatures for data sent to and received from remote Docker registries. These signatures allow client-side verification of the integrity and publisher of specific image tags. This ensures provenance of container images."
      solution    : "To enable content trust in a bash shell, enter the following command:
export DOCKER_CONTENT_TRUST=1
Alternatively, set this environment variable in your profile file so that content trust in enabled on every login.
Impact:
In an environment where DOCKER_CONTENT_TRUST is set, you are required to follow trust procedures while working with images - build, create, pull, pushand run. You can use the --disable-content-trust flag to run individual operations on tagged images without content trust on an as-needed basis but that defeats the purpose of enabling content trust and hence, should be avoided wherever possible.
Note: Content trust is currently only available for users of the public Docker Hub. It is currently not available for the Docker Trusted Registry or for private registries.
Default Value:
By default, content trust is disabled."
      reference   : "800-53|SI-7(6),800-53r5|SI-7(6),CSCv6|18,CSF|PR.DS-6,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(c)(1),HIPAA|164.312(c)(2),HIPAA|164.312(e)(2)(i),ITSG-33|SI-7,ITSG-33|SI-7a.,LEVEL|2A,NESA|T3.4.1,NESA|T7.3.2,NESA|T7.3.3,PCI-DSSv3.2.1|10.5.5,QCSC-v1|3.2,SWIFT-CSCv1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "echo $DOCKER_CONTENT_TRUST"
      expect      : "1"
    </custom_item>

    <report type:"WARNING">
      description : "4.8 Ensure setuid and setgid permissions are removed in the images"
      info        : "Removing setuid and setgid permissions in the images would prevent privilege escalation attacks in the containers.
Rationale:
setuid and setgid permissions could be used for elevating privileges. While these permissions are at times legitimately needed, these could potentially be used in privilege escalation attacks. Thus, you should consider dropping these permissions for the packages which do not need them within the images.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Allow setuid and setgid permissions only on executables which need them. You could remove these permissions during build time by adding the following command in your Dockerfile, preferably towards the end of the Dockerfile:
RUN find / -perm +6000 -type f -exec chmod a-s {} \; || true
Impact:
Above command breaks all the executables that depend on setuid or setgid permissions including the legitimate ones. Hence, be careful to modify the command to suit your requirements so that it does not drop the permissions of legitimate programs. This requires a careful examination of each executable and fine tuning the permissions.


Default Value:
Not Applicable"
      reference   : "CSCv6|5.1,LEVEL|2M"
      see_also    : "https://workbench.cisecurity.org/files/1726"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "4.11 Ensure verified packages are only Installed"
      info        : "Verify authenticity of the packages before installing them in the image.
Rationale:
Verifying authenticity of the packages is essential for building a secure container image. Tampered packages could potentially be malicious or have some known vulnerabilities that could be exploited.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Use GPG keys for downloading and verifying packages or any other secure package distribution mechanism of your choice.
Impact:
None
Default Value:
Not Applicable"
      reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|18.1,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "for image in $(docker images|awk {\'print $3\'}); do docker history $image;done"
      expect      : ""
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "5.2 Ensure SELinux security options are set, if applicable"
      info        : "SELinux is an effective and easy-to-use Linux application security system. It is available on quite a few Linux distributions by default such as Red Hat and Fedora.
Rationale:
SELinux provides a Mandatory Access Control (MAC) system that greatly augments the default Discretionary Access Control (DAC) model. You can thus add an extra layer of safety by enabling SELinux on your Linux host, if applicable.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "If SELinux is applicable for your Linux OS, use it. You may have to follow below set of steps:
1. Set the SELinux State.
2. Set the SELinux Policy.
3. Create or import a SELinux policy template for Docker containers.
4. Start Docker in daemon mode with SELinux enabled. For example,
docker daemon --selinux-enabled
5. Start your Docker container using the security options. For example,
docker run --interactive --tty --security-opt label=level:TopSecret centos /bin/bash
Impact:
The container (process) would have set of restrictions as defined in SELinux policy. If your SELinux policy is mis-configured, then the container may not entirely work as expected.
Default Value:
By default, no SELinux security options are applied on containers."
      reference   : "800-171|3.1.1,800-171|3.1.2,800-53|AC-3(3),800-53r5|AC-3(3),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3(3),LEVEL|2A,NESA|T5.5.4,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,PCI-DSSv3.2.1|7.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "/usr/bin/docker ps -q | xargs /usr/bin/docker inspect --format \'{{ .Id }}: SecurityOpt={{json .HostConfig.SecurityOpt }}\'"
      expect      : ""
      severity    : MEDIUM
    </custom_item>

    <report type:"WARNING">
      description : "5.22 Ensure docker exec commands are not used with privileged option"
      info        : "Do not docker exec with --privileged option.
Rationale:
Using --privileged option in docker exec gives extended Linux capabilities to the command. This could potentially be insecure and unsafe to do especially when you are running containers with dropped capabilities or with enhanced restrictions.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Do not use --privileged option in docker exec command.
Impact:
None. If you need enhanced capabilities within the container, then run the container with the needed capabilities.
Default Value:
By default, docker exec command runs without --privileged option."
      reference   : "CSCv6|5.1,LEVEL|2A"
      see_also    : "https://workbench.cisecurity.org/files/1726"
    </report>

    <report type:"WARNING">
      description : "5.23 Ensure docker exec commands are not used with user option"
      info        : "Do not docker exec with --user option.
Rationale:
Using --user option in docker exec executes the command within the container as that user. This could potentially be insecure and unsafe to do especially when you are running containers with dropped capabilities or with enhanced restrictions.
For example, suppose your container is running as tomcat user (or any other non-root user), it would be possible to run a command through docker exec as rootwith --user=root option. This could potentially be dangerous.
NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Do not use --user option in docker exec command.
Impact:
None.
Default Value:
By default, docker exec command runs without --user option."
      reference   : "CSCv6|5,LEVEL|2A"
      see_also    : "https://workbench.cisecurity.org/files/1726"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "5.29 Ensure Docker's default bridge docker0 is not used"
      info        : "Do not use Docker's default bridge docker0. Use docker's user-defined networks for container networking.
Rationale:
Docker connects virtual interfaces created in the bridge mode to a common bridge called docker0. This default networking model is vulnerable to ARP spoofing and MAC flooding attacks since there is no filtering applied.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Follow Docker documentation and setup a user-defined network. Run all the containers in the defined network.
Impact:
You have to manage the user-defined networks.
Default Value:
By default, docker runs containers on its docker0 bridge."
      reference   : "800-171|3.4.6,800-171|3.4.7,800-53|CM-7b.,800-53r5|CM-7b.,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv6|9,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7a.,LEVEL|2M,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,PCI-DSSv3.2.1|2.2.2,PCI-DSSv4.0|2.2.4,QCSC-v1|3.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "for net_id in $(docker network ls|awk {\'print $1\'}); do docker network inspect $net_id;done"
      expect      : ""
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "7.5 Ensure Docker's secret management commands are used for managing secrets in a Swarm cluster"
      info        : "Use Docker's in-built secret management command.
Rationale:
Docker has various commands for managing secrets in a Swarm cluster. This is the foundation for future secret support in Docker with potential improvements such as Windows support, different backing stores, etc.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Follow docker secret documentation and use it to manage secrets effectively.
Impact:
None
Default Value:
Not Applicable"
      reference   : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|18,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "docker secret ls"
      expect      : ".*"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "7.8 Ensure node certificates are rotated as appropriate"
      info        : "Rotate swarm node certificates as appropriate.
Rationale:
Docker Swarm uses mutual TLS for clustering operations amongst its nodes. Certificate rotation ensures that in an event such as compromised node or key, it is difficult to impersonate a node. By default, node certificates are rotated every 90 days. You should rotate it more often or as appropriate in your environment.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Run the below command to set the desired expiry time.
For example,
docker swarm update --cert-expiry 48h
Impact:
None
Default Value:
By default, node certificates are rotated automatically every 90 days."
      reference   : "800-171|3.13.10,800-53|SC-12,800-53r5|SC-12,CSCv6|14.2,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.10.1.2,ITSG-33|SC-12,ITSG-33|SC-12a.,LEVEL|2M,NESA|T7.4.1,NESA|T7.4.2,NIAv2|CY2,NIAv2|CY8,NIAv2|CY9,QCSC-v1|5.2.2,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "docker info | grep -i 'Expiry Duration'"
      expect      : ".*"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "7.9 Ensure CA certificates are rotated as appropriate"
      info        : "Rotate root CA certificates as appropriate.
Rationale:
Docker Swarm uses mutual TLS for clustering operations amongst its nodes. Certificate rotation ensures that in an event such as compromised node or key, it is difficult to impersonate a node. Node certificates depend upon root CA certificates. For operational security, it is important to rotate these frequently. Currently, root CA certificates are not rotated automatically. You should thus establish a process to rotate it at the desired frequency.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Run the below command to rotate the certificate.
docker swarm ca --rotate
Impact:
None
Default Value:
By default, root CA certificates are not rotated."
      reference   : "800-171|3.5.2,800-53|IA-5(2),800-53r5|IA-5(2),CSCv6|14.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2),LEVEL|2M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "ls -l @PATH_TO_TLS_CA_FILE@"
      expect      : ".*"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "7.10 Ensure management plane traffic has been separated from data plane traffic"
      info        : "Separate management plane traffic from data plane traffic.
Rationale:
Separating the management plane traffic from data plane traffic ensures that these traffics are on their respective paths. These paths could then be individually monitored and could be tied to different traffic control policies and monitoring. It also ensures that management plane is always reachable despite the huge volume of data flow.
NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Initialize Swarm with dedicated interfaces for management and data planes respectively.
For example,
docker swarm init --advertise-addr=192.168.0.1 --data-path-addr=17.1.0.3
Impact:
You would require 2 network interface cards per node.
Default Value:
By default, the data plane traffic is not separated from management plane traffic."
      reference   : "800-171|3.13.2,800-171|3.13.5,800-53|SC-7(13),800-53r5|SC-7(13),CN-L3|8.1.10.6(h),CSCv6|18,CSF|PR.AC-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(13),LEVEL|2M,NESA|T4.5.4,NIAv2|GS7d,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,SWIFT-CSCv1|3.1,TBA-FIISB|43.1"
      see_also    : "https://workbench.cisecurity.org/files/1726"
      cmd         : "docker node inspect  --format '{{ .Status.Addr }}' self"
      expect      : ".*"
      severity    : MEDIUM
    </custom_item>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS Docker Community Edition v1.1.0 L2 Docker"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://workbench.cisecurity.org/files/1726"
    </report>
  </else>
</if>

</check_type>
