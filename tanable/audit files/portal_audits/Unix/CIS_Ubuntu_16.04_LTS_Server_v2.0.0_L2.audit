#TRUSTED 882401608a6a6cf0a9f9f02c06f0788dce51894518c842c0e994f9def0236326cc0957ba7016681e41d29c5a6e88f78354e7c02c2e8e7891b9c230ca8bf64ff1da83759cf1e27a34743cc2cec4c4e34d7f9bb483e20b0b0c3b61d439be6125f96de60b9e78a939d46fa79eec59697030f87dcf1ded7fb2952c3d7d1f225cf7fc676b882a1f91290ed6d22d5a19e997d927549e4c05654b32116416855f92e5e42e16dbd88a6a0114b7c4519a38328fb17966e372eb24575843f525a243f556c126da44e3edaeac35204993d0f4187d83422286fc375eccf36c77e351016033c92273411384c93026825a94c92120663143116bbc40d80fd0c527d6021cfb42612c6c3473d077c6c464bcc8da1f708d706e771ae0c8e4ac8a870e7febac618e06d874bc0313e793df3f743a000b6bb00e6ec748649fb2e5cd032a650f62c966f3cd07ab836204c64929e491a5de12e8c0beec045c693f02f0dde8c1c782397e51ae0932ecb00a31b8f0d4dab0868cde83a3a0300ee26bf9c0f830c4035799a194f7d76a05f3d960379f9f6c6ca0991742fd02b54d3b3028fb1161a8f238dc533ff7dd1c1e85d3d7cee24a6a926dd49fda55740d43d04136d6c65474685e3d98a145db58bcd9aa628d9e521a24ef328b8fb7242f3e5d2a2a3e58e1f0cd6e169832945f526755da92189d4a50ec594daa621463337f7313a61cf33a7628f142e1a2
#TRUST-RSA-SHA256 4aa6396b81db6baacdddca4ecc759c4225b4974cb81b36121da9bc306c070da3ad6f30264f54051e3bdb2163c73397d07c6b1b7fb090721f5f02d8477697261ee18a9fb091602c7ef4f1307ca05b4a6c87c216d54db198b30a4acde3d190f2ad63fca17cc163c3ddad52e66b0bab0ad92017cd0d80238da5f5833ca92247d0416f17d4312c93b534fb579cbe5afd2808a2d7aba3f528fc0e323a0a9131d53d1bd5f7f0be874fd98936508cc293d4736aceff9ac8f6aa487b4a3277b296f86d3af204602c4cae883da7d017e7de3742acbcd757cbb23ab6f7a29b169098293c22a80456bd8f342dd6fae0ca8d49a9558acda861a8a158d1cb6bc527077a0bab0612c2c05f820196e1e65fb7f495f26f55100c36d1f555fe5706cc4ae19d01b179d6f96844c4c4eb2e6ca4f7c00cf54a939db2a4443f792b75e54535a7a2aebbfd3b93deed5cfc0b4707e47103ad0b6897f225f0e9f5432b0993e9280c0d5c89a1c0e2606dd8ca76cfaa09c4ca7495fb3af4b24cd48e144447e4eaf7a865d346c6d6ed77e5a0e94a835a925d338e50057fd11aa140262108727ae0a5fce2265706d6ac0923cc7ffe4caa8bcc453afd89913f77219cf3bb69058b990a560dbd5eea88c4f226ab99bb45ec005a7e205f8f3b7e806896e3be325c883d981bd835864d4ce792d978d2d580040d5717aa44b1a5634ba6e8e4c5e244d568cfc026e09913
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.14 $
# $Date: 2024/06/17 $
#
# description : This .audit is designed to query targets against the CIS Ubuntu 16.04 LTS Server Benchmark Level 2 Server Profile
#
#<ui_metadata>
#<display_name>CIS Ubuntu Linux 16.04 LTS Server L2 v2.0.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>Ubuntu Linux 16.04 LTS</name>
#  <profile>L2 Server</profile>
#  <version>2.0.0</version>
#  <link>https://workbench.cisecurity.org/files/3219</link>
#</spec>
#<labels>cis,ubuntu_linux_16.04,agent,update_20230227</labels>
#<benchmark_refs>CCE,CIS_Recommendation,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>MAX_AUDIT_LOG_FILE_SIZE</name>
#    <default>32</default>
#    <description>Log file size</description>
#    <info>The max size, in MBs, each audit log can be before log file rotation.</info>
#    <value_type>INTEGER</value_type>
#  </variable>
#  <variable>
#    <name>MIN_UID</name>
#    <default>1000</default>
#    <description>Minimum UID</description>
#    <info>The minimum UID for user accounts. Legacy systems may need to adjust this value to match the value of /etc/login.defs</info>
#    <value_type>INTEGER</value_type>
#  </variable>
#  <variable>
#    <name>PLATFORM_VERSION</name>
#    <default>16.04</default>
#    <description>Ubuntu Version</description>
#    <info>Ubuntu Version</info>
#    <value_type>STRING</value_type>
#  </variable>
#  <variable>
#    <name>FIND_TIMEOUT</name>
#    <default>7200</default>
#    <description>Timeout for checks that search for files</description>
#    <info>Timeout, in seconds, for checks that search for files. Range of 1-7200.</info>
#    <value_type>INTEGER</value_type>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"AND">
    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "Ubuntu 16.04 is installed"
      file        : "/etc/lsb-release"
      regex       : "^[\\s]*DISTRIB_RELEASE[\\s]*="
      expect      : "^[\\s]*DISTRIB_RELEASE[\\s]*=[\\s]*@PLATFORM_VERSION@[\\s]*$"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_Ubuntu_16.04_LTS_Server_v2.0.0_L2.audit from CIS Ubuntu 16.04 LTS Server Benchmark L2 v2.0.0"
      see_also    : "https://workbench.cisecurity.org/files/3219"
    </report>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "1.1.10 Ensure separate partition exists for /var"
      info        : "The /var directory is used by daemons and other system services to temporarily store dynamic data. Some directories created by these processes may be world-writable.

    Rationale:

    Since the /var directory may contain world-writable files and directories, there is a risk of resource exhaustion if it is not bound to a separate partition.

    Impact:

    Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations."
      solution    : "For new installations, during installation create a custom partition setup and specify a separate partition for /var .
    For systems that were previously installed, create a new partition and configure /etc/fstab as appropriate."
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv6|6.3,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/bin/findmnt /var"
      expect      : "^[\\s]*/var[\\s]+.+[\\s]+.+"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "1.1.11 Ensure separate partition exists for /var/tmp"
      info        : "The /var/tmp directory is a world-writable directory used for temporary storage by all users and some applications.

    Rationale:

    Since the /var/tmp directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to a separate partition. In addition, making /var/tmp its own file system allows an administrator to set the noexec option on the mount, making /var/tmp useless for an attacker to install executable code. It would also prevent an attacker from establishing a hardlink to a system setuid program and wait for it to be updated. Once the program was updated, the hardlink would be broken and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw.

    Impact:

    Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations."
      solution    : "For new installations, during installation create a custom partition setup and specify a separate partition for /var/tmp .
    For systems that were previously installed, create a new partition and configure /etc/fstab as appropriate."
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/bin/findmnt /var/tmp"
      expect      : "^[\\s]*/var/tmp[\\s]+.+[\\s]+.+"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "1.1.15 Ensure separate partition exists for /var/log"
      info        : "The /var/log directory is used by system services to store log data.

    Rationale:

    There are two important reasons to ensure that system logs are stored on a separate partition: protection against resource exhaustion (since logs can grow quite large) and protection of audit data.

    Impact:

    Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations."
      solution    : "For new installations, during installation create a custom partition setup and specify a separate partition for /var/log .
    For systems that were previously installed, create a new partition and configure /etc/fstab as appropriate."
      reference   : "800-53|AU-4,800-53r5|AU-4,CSCv7|6.4,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|2A,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/bin/findmnt /var/log"
      expect      : "^[\\s]*/var/log[\\s]+.+[\\s]+.+"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "1.1.16 Ensure separate partition exists for /var/log/audit"
      info        : "The auditing daemon, auditd, stores log data in the /var/log/audit directory.

    Rationale:

    There are two important reasons to ensure that data gathered by auditd is stored on a separate partition: protection against resource exhaustion (since the audit.log file can grow quite large) and protection of audit data. The audit daemon calculates how much free space is left and performs actions based on the results. If other processes (such as syslog ) consume space in the same partition as auditd , it may not perform as desired.

    Impact:

    Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations."
      solution    : "For new installations, during installation create a custom partition setup and specify a separate partition for /var/log/audit .
    For systems that were previously installed, create a new partition and configure /etc/fstab as appropriate."
      reference   : "800-53|AU-4,800-53r5|AU-4,CSCv7|6.4,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|2A,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/bin/findmnt /var/log/audit"
      expect      : "^[\\s]*/var/log/audit[\\s]+.+[\\s]+.+"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "1.1.17 Ensure separate partition exists for /home"
      info        : "The /home directory is used to support disk storage needs of local users.

    Rationale:

    If the system is intended to support local users, create a separate partition for the /home directory to protect against resource exhaustion and restrict the type of files that can be stored under /home .

    Impact:

    Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations."
      solution    : "For new installations, during installation create a custom partition setup and specify a separate partition for /home .
    For systems that were previously installed, create a new partition and configure /etc/fstab as appropriate."
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/bin/findmnt /home"
      expect      : "^[\\s]*/home[\\s]+.+[\\s]+.+"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "1.6.1.4 Ensure all AppArmor Profiles are enforcing - loaded"
      info        : "AppArmor profiles define what resources applications are able to access.

    Rationale:

    Security configuration requirements vary from site to site. Some sites may mandate a policy that is stricter than the default policy, which is perfectly acceptable. This item is intended to ensure that any policies that exist on the system are activated."
      solution    : "Run the following command to set all profiles to enforce mode:

    # aa-enforce /etc/apparmor.d/*

    Note: Any unconfined processes may need to have a profile created or activated for them and then be restarted"
      reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2A,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/usr/sbin/apparmor_status"
      expect      : "^[\\s]*[1-9][0-9]*[\\s]+profiles[\\s]+are[\\s]+loaded"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "1.6.1.4 Ensure all AppArmor Profiles are enforcing - complain"
      info        : "AppArmor profiles define what resources applications are able to access.

    Rationale:

    Security configuration requirements vary from site to site. Some sites may mandate a policy that is stricter than the default policy, which is perfectly acceptable. This item is intended to ensure that any policies that exist on the system are activated."
      solution    : "Run the following command to set all profiles to enforce mode:

    # aa-enforce /etc/apparmor.d/*

    Note: Any unconfined processes may need to have a profile created or activated for them and then be restarted"
      reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2A,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/usr/sbin/apparmor_status"
      expect      : "^[\\s]*0[\\s]+profiles[\\s]+are[\\s]+in[\\s]+complain[\\s]+mode"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "1.6.1.4 Ensure all AppArmor Profiles are enforcing - unconfined"
      info        : "AppArmor profiles define what resources applications are able to access.

    Rationale:

    Security configuration requirements vary from site to site. Some sites may mandate a policy that is stricter than the default policy, which is perfectly acceptable. This item is intended to ensure that any policies that exist on the system are activated."
      solution    : "Run the following command to set all profiles to enforce mode:

    # aa-enforce /etc/apparmor.d/*

    Note: Any unconfined processes may need to have a profile created or activated for them and then be restarted"
      reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2A,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/usr/sbin/apparmor_status"
      expect      : "^[\\s]*0[\\s]+processes[\\s]+are[\\s]+unconfined"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "1.8.1 Ensure GNOME Display Manager is removed"
      info        : "The GNOME Display Manager (GDM) is a program that manages graphical display servers and handles graphical user logins.

    Rationale:

    If a Graphical User Interface (GUI) is not required, it should be removed to reduce the attack surface of the system.

    Impact:

    Removing the GNOME Display manager will remove the Graphical User Interface (GUI) from the system."
      solution    : "Run the following command to uninstall gdm3:

    # apt purge gdm3"
      reference   : "800-171|3.4.9,800-53|CM-11,800-53r5|CM-11,CSCv7|2.6,CSF|DE.CM-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.6.2,LEVEL|2M,QCSC-v1|8.2.1,SWIFT-CSCv1|5.1"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/usr/bin/dpkg -s gdm3 2>&1"
      expect      : "package \'gdm3\' is not installed"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "3.1.1 Disable IPv6"
      info        : "Although IPv6 has many advantages over IPv4, not all organizations have IPv6 or dual stack configurations implemented.

    Rationale:

    If IPv6 or dual stack is not to be used, it is recommended that IPv6 be disabled to reduce the attack surface of the system.

    Impact:

    If IPv6 is disabled through sysctl config, SSH X11forwarding may no longer function as expected. We recommend that SSH X11fowarding be disabled, but if required, the following will allow for SSH X11forwarding with IPv6 disabled through sysctl config:

    Add the following line the /etc/ssh/sshd_config file:

    AddressFamily inet

    Run the following command to re-start the openSSH server:

    # systemctl restart sshd"
      solution    : "Use one of the two following methods to disable IPv6 on the system:
    To disable IPv6 through the GRUB2 config:
    Edit /etc/default/grub and add ipv6.disable=1 to the GRUB_CMDLINE_LINUX parameters:

    GRUB_CMDLINE_LINUX='ipv6.disable=1'

    Run the following command to update the grub2 configuration:

    # update-grub

    OR
    To disable IPv6 through sysctl settings:
    Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:

    net.ipv6.conf.all.disable_ipv6 = 1
    net.ipv6.conf.default.disable_ipv6 = 1

    Run the following commands to set the active kernel parameters:

    # sysctl -w net.ipv6.conf.all.disable_ipv6=1
    # sysctl -w net.ipv6.conf.default.disable_ipv6=1
    # sysctl -w net.ipv6.route.flush=1"
      reference   : "800-171|3.13.1,800-53|SC-7(12),800-53r5|SC-7(12),CN-L3|8.1.10.6(j),CSCv7|9.4,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(12),LEVEL|2M,NESA|T4.5.4,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26,PCI-DSSv3.2.1|1.4,PCI-DSSv4.0|1.5.1,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|43.1"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/usr/bin/grep -Pqs '^\\h*1\\b' /sys/module/ipv6/parameters/disable && echo -e 'IPv6 is not enabled' || echo -e 'IPv6 is enabled'"
      expect      : "IPv6 is not enabled"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "3.4.1 Ensure DCCP is disabled - modprobe"
      info        : "The Datagram Congestion Control Protocol (DCCP) is a transport layer protocol that supports streaming media and telephony. DCCP provides a way to gain access to congestion control, without having to do it at the application layer, but does not provide in-sequence delivery.

    Rationale:

    If the protocol is not required, it is recommended that the drivers not be installed to reduce the potential attack surface."
      solution    : "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf
    Example: vi /etc/modprobe.d/dccp.conf
    Add the following line:

    install dccp /bin/true"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/modprobe -n -v dccp"
      expect      : "install /bin/(true|false)"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "3.4.1 Ensure DCCP is disabled - lsmod"
      info        : "The Datagram Congestion Control Protocol (DCCP) is a transport layer protocol that supports streaming media and telephony. DCCP provides a way to gain access to congestion control, without having to do it at the application layer, but does not provide in-sequence delivery.

    Rationale:

    If the protocol is not required, it is recommended that the drivers not be installed to reduce the potential attack surface."
      solution    : "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf
    Example: vi /etc/modprobe.d/dccp.conf
    Add the following line:

    install dccp /bin/true"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/lsmod | /bin/grep dccp | /usr/bin/awk \'{print} END {if (NR == 0) print \"pass\"; else print \"fail\"}\'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "3.4.2 Ensure SCTP is disabled - modprobe"
      info        : "The Stream Control Transmission Protocol (SCTP) is a transport layer protocol used to support message oriented communication, with several streams of messages in one connection. It serves a similar function as TCP and UDP, incorporating features of both. It is message-oriented like UDP, and ensures reliable in-sequence transport of messages with congestion control like TCP.

    Rationale:

    If the protocol is not being used, it is recommended that kernel module not be loaded, disabling the service to reduce the potential attack surface."
      solution    : "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf
    Example: vi /etc/modprobe.d/sctp.conf
    and add the following line:

    install sctp /bin/true"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/modprobe -n -v sctp"
      expect      : "install /bin/(true|false)"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "3.4.2 Ensure SCTP is disabled - lsmod"
      info        : "The Stream Control Transmission Protocol (SCTP) is a transport layer protocol used to support message oriented communication, with several streams of messages in one connection. It serves a similar function as TCP and UDP, incorporating features of both. It is message-oriented like UDP, and ensures reliable in-sequence transport of messages with congestion control like TCP.

    Rationale:

    If the protocol is not being used, it is recommended that kernel module not be loaded, disabling the service to reduce the potential attack surface."
      solution    : "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf
    Example: vi /etc/modprobe.d/sctp.conf
    and add the following line:

    install sctp /bin/true"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/lsmod | /bin/grep sctp | /usr/bin/awk \'{print} END {if (NR == 0) print \"pass\"; else print \"fail\"}\'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "3.4.3 Ensure RDS is disabled - modprobe"
      info        : "The Reliable Datagram Sockets (RDS) protocol is a transport layer protocol designed to provide low-latency, high-bandwidth communications between cluster nodes. It was developed by the Oracle Corporation.

    Rationale:

    If the protocol is not being used, it is recommended that kernel module not be loaded, disabling the service to reduce the potential attack surface."
      solution    : "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf
    Example: vi /etc/modprobe.d/rds.conf
    and add the following line:

    install rds /bin/true"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/modprobe -n -v rds"
      expect      : "install /bin/(true|false)"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "3.4.3 Ensure RDS is disabled - lsmod"
      info        : "The Reliable Datagram Sockets (RDS) protocol is a transport layer protocol designed to provide low-latency, high-bandwidth communications between cluster nodes. It was developed by the Oracle Corporation.

    Rationale:

    If the protocol is not being used, it is recommended that kernel module not be loaded, disabling the service to reduce the potential attack surface."
      solution    : "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf
    Example: vi /etc/modprobe.d/rds.conf
    and add the following line:

    install rds /bin/true"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/lsmod | /bin/grep rds | /usr/bin/awk \'{print} END {if (NR == 0) print \"pass\"; else print \"fail\"}\'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "3.4.4 Ensure TIPC is disabled - modprobe"
      info        : "The Transparent Inter-Process Communication (TIPC) protocol is designed to provide communication between cluster nodes.

    Rationale:

    If the protocol is not being used, it is recommended that kernel module not be loaded, disabling the service to reduce the potential attack surface."
      solution    : "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf
    Example: vi /etc/modprobe.d/tipc.conf
    and add the following line:

    install tipc /bin/true"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/modprobe -n -v tipc"
      expect      : "install /bin/(true|false)"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "3.4.4 Ensure TIPC is disabled - lsmod"
      info        : "The Transparent Inter-Process Communication (TIPC) protocol is designed to provide communication between cluster nodes.

    Rationale:

    If the protocol is not being used, it is recommended that kernel module not be loaded, disabling the service to reduce the potential attack surface."
      solution    : "Edit or create a file in the /etc/modprobe.d/ directory ending in .conf
    Example: vi /etc/modprobe.d/tipc.conf
    and add the following line:

    install tipc /bin/true"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/lsmod | /bin/grep tipc | /usr/bin/awk \'{print} END {if (NR == 0) print \"pass\"; else print \"fail\"}\'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.1.1 Ensure auditd is installed"
      info        : "auditd is the userspace component to the Linux Auditing System. It's responsible for writing audit records to the disk

    Rationale:

    The capturing of system events provides system administrators with information to allow them to determine if unauthorized access to their system is occurring."
      solution    : "Run the following command to Install auditd

    # apt install auditd audispd-plugins"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/usr/bin/dpkg -s auditd audispd-plugins 2>&1"
      expect      : "install[\\s]+ok[\\s]+installed"
    </custom_item>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "4.1.1.2 Ensure auditd service is enabled"
      info          : "Enable and start the auditd daemon to record system events.

    Rationale:

    The capturing of system events provides system administrators with information to allow them to determine if unauthorized access to their system is occurring."
      solution      : "Run the following command to enable auditd :

    # systemctl --now enable auditd"
      reference     : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also      : "https://workbench.cisecurity.org/files/3219"
      cmd           : "/bin/systemctl is-enabled auditd | /usr/bin/awk '{print} END {if(NR==0) print \"disabled\" }'"
      expect        : "enabled"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.1.3 Ensure auditing for processes that start prior to auditd is enabled"
      info        : "Configure grub so that processes that are capable of being audited can be audited even if they start up prior to auditd startup.

    Note: This recommendation is designed around the grub bootloader, if LILO or another bootloader is in use in your environment enact equivalent settings. Replace /boot/grub/grub.cfg with the appropriate grub configuration file for your environment.

    Rationale:

    Audit events need to be captured on processes that start up prior to auditd , so that potential malicious activity cannot go undetected."
      solution    : "Edit /etc/default/grub and add audit=1 to GRUB_CMDLINE_LINUX:

    GRUB_CMDLINE_LINUX='audit=1'

    Run the following command to update the grub2 configuration:

    # update-grub"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/boot/grub/grub.cfg"
      regex       : "^[\\s]*linux[\\s]+"
      expect      : "^[\\s]*linux[\\s]+.*audit=1.*[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.1.4 Ensure audit_backlog_limit is sufficient"
      info        : "The backlog limit has a default setting of 64

    Rationale:

    during boot if audit=1, then the backlog will hold 64 records. If more that 64 records are created during boot, auditd records will be lost and potential malicious activity could go undetected."
      solution    : "Edit /etc/default/grub and add audit_backlog_limit=<BACKLOG SIZE> to GRUB_CMDLINE_LINUX:
    Example:

    GRUB_CMDLINE_LINUX='audit_backlog_limit=8192'

    Run the following command to update the grub2 configuration:

    # update-grub"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/boot/grub/grub.cfg"
      regex       : "^[\\s]*linux[\\s]+"
      expect      : "^[\\s]*linux[\\s]+.*audit_backlog_limit=(819[2-9]|8[2-9][0-9]{2}|9[0-9]{3}|[1-9][0-9]{4,}).*[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.2.1 Ensure audit log storage size is configured"
      info        : "Configure the maximum size of the audit log file. Once the log reaches the maximum size, it will be rotated and a new log file will be started.

      Notes:

      The max_log_file parameter is measured in megabytes

      Other methods of log rotation may be appropriate based on site policy. One example is time-based rotation strategies which don't have native support in auditd configurations

      Manual audit of custom configurations should be evaluated for effectiveness and completeness

      Rationale:

      It is important that an appropriate size is determined for log files so that they do not impact the system and audit data is not lost."
      solution    : "Set the following parameter in /etc/audit/auditd.conf in accordance with site policy:

      max_log_file = <MB>"
      reference   : "800-53|AU-4,800-53r5|AU-4,CSCv7|6.4,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|2A,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/auditd.conf"
      regex       : "^[\\s]*max_log_file[\\s]*="
      expect      : "^[\\s]*max_log_file[\\s]*=[\\s]*@MAX_AUDIT_LOG_FILE_SIZE@[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.2.2 Ensure audit logs are not automatically deleted"
      info        : "The max_log_file_action setting determines how to handle the audit log file reaching the max file size. A value of keep_logs will rotate the logs but never delete old logs.

      Rationale:

      In high security contexts, the benefits of maintaining a long audit history exceed the cost of storing the audit history."
      solution    : "Set the following parameter in /etc/audit/auditd.conf:

      max_log_file_action = keep_logs"
      reference   : "800-53|AU-4,800-53r5|AU-4,CSCv7|6.4,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|2A,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/auditd.conf"
      regex       : "^[\\s]*max_log_file_action[\\s]*="
      expect      : "^[\\s]*max_log_file_action[\\s]*=[\\s]*[Kk][Ee][Ee][Pp]_[Ll][Oo][Gg][Ss][\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.2.3 Ensure system is disabled when audit logs are full - 'space_left_action = email'"
      info        : "The auditd daemon can be configured to halt the system when the audit logs are full.

      Rationale:

      In high security contexts, the risk of detecting unauthorized access or nonrepudiation exceeds the benefit of the system's availability."
      solution    : "Set the following parameters in /etc/audit/auditd.conf:

      space_left_action = email
      action_mail_acct = root
      admin_space_left_action = halt"
      reference   : "800-53|AU-4,800-53r5|AU-4,CSCv7|6.4,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|2A,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/auditd.conf"
      regex       : "^[\\s]*(?i)space_left_action(?-i)[\\s]*=[\\s]*"
      expect      : "^[\\s]*(?i)space_left_action(?-i)[\\s]*=[\\s]*(?i)email(?-i)[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.2.3 Ensure system is disabled when audit logs are full - 'action_mail_acct = root'"
      info        : "The auditd daemon can be configured to halt the system when the audit logs are full.

      Rationale:

      In high security contexts, the risk of detecting unauthorized access or nonrepudiation exceeds the benefit of the system's availability."
      solution    : "Set the following parameters in /etc/audit/auditd.conf:

      space_left_action = email
      action_mail_acct = root
      admin_space_left_action = halt"
      reference   : "800-53|AU-4,800-53r5|AU-4,CSCv7|6.4,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|2A,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/auditd.conf"
      regex       : "^[\\s]*(?i)action_mail_acct(?-i)[\\s]*="
      expect      : "^[\\s]*(?i)action_mail_acct(?-i)[\\s]*=[\\s]*(?i)root(?-i)[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.2.3 Ensure system is disabled when audit logs are full - 'admin_space_left_action = halt'"
      info        : "The auditd daemon can be configured to halt the system when the audit logs are full.

      Rationale:

      In high security contexts, the risk of detecting unauthorized access or nonrepudiation exceeds the benefit of the system's availability."
      solution    : "Set the following parameters in /etc/audit/auditd.conf:

      space_left_action = email
      action_mail_acct = root
      admin_space_left_action = halt"
      reference   : "800-53|AU-4,800-53r5|AU-4,CSCv7|6.4,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|2A,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/auditd.conf"
      regex       : "^[\\s]*(?i)admin_space_left_action(?-i)[\\s]*="
      expect      : "^[\\s]*(?i)admin_space_left_action(?-i)[\\s]*=[\\s]*(?i)halt(?-i)[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.3 Ensure events that modify date and time information are collected - auditctl adjtimex (32-bit)"
      info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b64 -S clock_settime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+(?=.*adjtimex)(?=.*settimeofday).*-F[\\s]+key=time-change$'  | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.3 Ensure events that modify date and time information are collected - adjtimex (32-bit)"
      info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b64 -S clock_settime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+.*adjtimex"
      expect      : "-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+.*adjtimex"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.3 Ensure events that modify date and time information are collected - auditctl clock_settime (32-bit)"
      info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b64 -S clock_settime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+clock_settime[\\s]+-F[\\s]+key=time-change$'  | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.3 Ensure events that modify date and time information are collected - clock_settime (32-bit)"
      info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b64 -S clock_settime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+.*clock_settime"
      expect      : "-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+.*clock_settime"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.3 Ensure events that modify date and time information are collected - auditctl /etc/localtime"
      info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b64 -S clock_settime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+\\/etc\\/localtime[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+time-change$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.3 Ensure events that modify date and time information are collected - /etc/localtime"
      info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b64 -S clock_settime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "-w[\\s]+/etc/localtime[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+.*time-change"
      expect      : "-w[\\s]+/etc/localtime[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+.*time-change"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "OS is 64 bit"
          cmd         : "/bin/uname -m"
          expect      : "^x86_64$"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.1.3 Ensure events that modify date and time information are collected - auditctl adjtimex (64-bit)"
          info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-time-change.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
        -a always,exit -F arch=b32 -S clock_settime -k time-change
        -w /etc/localtime -p wa -k time-change

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-time-change.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
        -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
        -a always,exit -F arch=b64 -S clock_settime -k time-change
        -a always,exit -F arch=b32 -S clock_settime -k time-change
        -w /etc/localtime -p wa -k time-change"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+(?=.*adjtimex)(?=.*settimeofday).*-F[\\s]+key=time-change$'  | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
          expect      : "pass"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.1.3 Ensure events that modify date and time information are collected - auditctl clock_settime (64-bit)"
          info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-time-change.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
        -a always,exit -F arch=b32 -S clock_settime -k time-change
        -w /etc/localtime -p wa -k time-change

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-time-change.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
        -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
        -a always,exit -F arch=b64 -S clock_settime -k time-change
        -a always,exit -F arch=b32 -S clock_settime -k time-change
        -w /etc/localtime -p wa -k time-change"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+clock_settime[\\s]+-F[\\s]+key=time-change$'  | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
          expect      : "pass"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "4.1.3 Ensure events that modify date and time information are collected - adjtimex (64-bit)"
          info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-time-change.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
        -a always,exit -F arch=b32 -S clock_settime -k time-change
        -w /etc/localtime -p wa -k time-change

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-time-change.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
        -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
        -a always,exit -F arch=b64 -S clock_settime -k time-change
        -a always,exit -F arch=b32 -S clock_settime -k time-change
        -w /etc/localtime -p wa -k time-change"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          file        : "/etc/audit/audit.rules"
          regex       : "-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+.*adjtimex"
          expect      : "-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+.*adjtimex"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "4.1.3 Ensure events that modify date and time information are collected - clock_settime (64-bit)"
          info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-time-change.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
        -a always,exit -F arch=b32 -S clock_settime -k time-change
        -w /etc/localtime -p wa -k time-change

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-time-change.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
        -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
        -a always,exit -F arch=b64 -S clock_settime -k time-change
        -a always,exit -F arch=b32 -S clock_settime -k time-change
        -w /etc/localtime -p wa -k time-change"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          file        : "/etc/audit/audit.rules"
          regex       : "-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+.*clock_settime"
          expect      : "-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+.*clock_settime"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "4.1.3 Ensure events that modify date and time information are collected - adjtimex (64-bit)"
          info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b64 -S clock_settime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.3 Ensure events that modify date and time information are collected - auditctl clock_settime (64-bit)"
          info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b64 -S clock_settime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.3 Ensure events that modify date and time information are collected - auditctl adjtimex (64-bit)"
          info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b64 -S clock_settime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.3 Ensure events that modify date and time information are collected - clock_settime (64-bit)"
          info        : "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the adjtimex (tune kernel clock), settimeofday (Set time, using timeval and timezone structures) stime (using seconds since 1/1/1970) or clock_settime (allows for the setting of several internal clocks and timers) system calls have been executed and always write an audit record to the /var/log/audit.log file upon exit, tagging the records with the identifier 'time-change'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes in system date and/or time could be a sign of malicious activity on the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-time-change.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
      -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
      -a always,exit -F arch=b64 -S clock_settime -k time-change
      -a always,exit -F arch=b32 -S clock_settime -k time-change
      -w /etc/localtime -p wa -k time-change"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>
      </else>
    </if>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.4 Ensure events that modify user/group information are collected - /etc/group"
      info        : "Record events affecting the group , passwd (user IDs), shadow and gshadow (passwords) or /etc/security/opasswd (old passwords, based on remember parameter in the PAM configuration) files. The parameters in this section will watch the files to see if they have been opened for write or have had attribute changes (e.g. permissions) and tag them with the identifier 'identity' in the audit log file.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-identity.rules
      Add the following lines:

      -w /etc/group -p wa -k identity
      -w /etc/passwd -p wa -k identity
      -w /etc/gshadow -p wa -k identity
      -w /etc/shadow -p wa -k identity
      -w /etc/security/opasswd -p wa -k identity"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+\\/etc\\/group[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+\\/etc\\/group[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.4 Ensure events that modify user/group information are collected - auditctl /etc/group"
      info        : "Record events affecting the group , passwd (user IDs), shadow and gshadow (passwords) or /etc/security/opasswd (old passwords, based on remember parameter in the PAM configuration) files. The parameters in this section will watch the files to see if they have been opened for write or have had attribute changes (e.g. permissions) and tag them with the identifier 'identity' in the audit log file.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-identity.rules
      Add the following lines:

      -w /etc/group -p wa -k identity
      -w /etc/passwd -p wa -k identity
      -w /etc/gshadow -p wa -k identity
      -w /etc/shadow -p wa -k identity
      -w /etc/security/opasswd -p wa -k identity"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/etc/group[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.4 Ensure events that modify user/group information are collected - /etc/passwd"
      info        : "Record events affecting the group , passwd (user IDs), shadow and gshadow (passwords) or /etc/security/opasswd (old passwords, based on remember parameter in the PAM configuration) files. The parameters in this section will watch the files to see if they have been opened for write or have had attribute changes (e.g. permissions) and tag them with the identifier 'identity' in the audit log file.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-identity.rules
      Add the following lines:

      -w /etc/group -p wa -k identity
      -w /etc/passwd -p wa -k identity
      -w /etc/gshadow -p wa -k identity
      -w /etc/shadow -p wa -k identity
      -w /etc/security/opasswd -p wa -k identity"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+\\/etc\\/passwd[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+\\/etc\\/passwd[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.4 Ensure events that modify user/group information are collected - auditctl /etc/passwd"
      info        : "Record events affecting the group , passwd (user IDs), shadow and gshadow (passwords) or /etc/security/opasswd (old passwords, based on remember parameter in the PAM configuration) files. The parameters in this section will watch the files to see if they have been opened for write or have had attribute changes (e.g. permissions) and tag them with the identifier 'identity' in the audit log file.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-identity.rules
      Add the following lines:

      -w /etc/group -p wa -k identity
      -w /etc/passwd -p wa -k identity
      -w /etc/gshadow -p wa -k identity
      -w /etc/shadow -p wa -k identity
      -w /etc/security/opasswd -p wa -k identity"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/etc/passwd[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.4 Ensure events that modify user/group information are collected - /etc/gshadow"
      info        : "Record events affecting the group , passwd (user IDs), shadow and gshadow (passwords) or /etc/security/opasswd (old passwords, based on remember parameter in the PAM configuration) files. The parameters in this section will watch the files to see if they have been opened for write or have had attribute changes (e.g. permissions) and tag them with the identifier 'identity' in the audit log file.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-identity.rules
      Add the following lines:

      -w /etc/group -p wa -k identity
      -w /etc/passwd -p wa -k identity
      -w /etc/gshadow -p wa -k identity
      -w /etc/shadow -p wa -k identity
      -w /etc/security/opasswd -p wa -k identity"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+\\/etc\\/gshadow[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+\\/etc\\/gshadow[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.4 Ensure events that modify user/group information are collected - auditctl /etc/gshadow"
      info        : "Record events affecting the group , passwd (user IDs), shadow and gshadow (passwords) or /etc/security/opasswd (old passwords, based on remember parameter in the PAM configuration) files. The parameters in this section will watch the files to see if they have been opened for write or have had attribute changes (e.g. permissions) and tag them with the identifier 'identity' in the audit log file.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-identity.rules
      Add the following lines:

      -w /etc/group -p wa -k identity
      -w /etc/passwd -p wa -k identity
      -w /etc/gshadow -p wa -k identity
      -w /etc/shadow -p wa -k identity
      -w /etc/security/opasswd -p wa -k identity"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/etc/gshadow[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.4 Ensure events that modify user/group information are collected - /etc/shadow"
      info        : "Record events affecting the group , passwd (user IDs), shadow and gshadow (passwords) or /etc/security/opasswd (old passwords, based on remember parameter in the PAM configuration) files. The parameters in this section will watch the files to see if they have been opened for write or have had attribute changes (e.g. permissions) and tag them with the identifier 'identity' in the audit log file.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-identity.rules
      Add the following lines:

      -w /etc/group -p wa -k identity
      -w /etc/passwd -p wa -k identity
      -w /etc/gshadow -p wa -k identity
      -w /etc/shadow -p wa -k identity
      -w /etc/security/opasswd -p wa -k identity"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+\\/etc\\/shadow[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+\\/etc\\/shadow[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.4 Ensure events that modify user/group information are collected - auditctl /etc/shadow"
      info        : "Record events affecting the group , passwd (user IDs), shadow and gshadow (passwords) or /etc/security/opasswd (old passwords, based on remember parameter in the PAM configuration) files. The parameters in this section will watch the files to see if they have been opened for write or have had attribute changes (e.g. permissions) and tag them with the identifier 'identity' in the audit log file.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-identity.rules
      Add the following lines:

      -w /etc/group -p wa -k identity
      -w /etc/passwd -p wa -k identity
      -w /etc/gshadow -p wa -k identity
      -w /etc/shadow -p wa -k identity
      -w /etc/security/opasswd -p wa -k identity"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/etc/shadow[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.4 Ensure events that modify user/group information are collected - /etc/security/opasswd"
      info        : "Record events affecting the group , passwd (user IDs), shadow and gshadow (passwords) or /etc/security/opasswd (old passwords, based on remember parameter in the PAM configuration) files. The parameters in this section will watch the files to see if they have been opened for write or have had attribute changes (e.g. permissions) and tag them with the identifier 'identity' in the audit log file.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-identity.rules
      Add the following lines:

      -w /etc/group -p wa -k identity
      -w /etc/passwd -p wa -k identity
      -w /etc/gshadow -p wa -k identity
      -w /etc/shadow -p wa -k identity
      -w /etc/security/opasswd -p wa -k identity"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+\\/etc\\/security\\/opasswd[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+\\/etc\\/security\\/opasswd[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.4 Ensure events that modify user/group information are collected - auditctl /etc/security/opasswd"
      info        : "Record events affecting the group , passwd (user IDs), shadow and gshadow (passwords) or /etc/security/opasswd (old passwords, based on remember parameter in the PAM configuration) files. The parameters in this section will watch the files to see if they have been opened for write or have had attribute changes (e.g. permissions) and tag them with the identifier 'identity' in the audit log file.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-identity.rules
      Add the following lines:

      -w /etc/group -p wa -k identity
      -w /etc/passwd -p wa -k identity
      -w /etc/gshadow -p wa -k identity
      -w /etc/shadow -p wa -k identity
      -w /etc/security/opasswd -p wa -k identity"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/etc/security/opasswd[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+identity$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.5 Ensure events that modify the system's network environment are collected - sethostname (32-bit)"
      info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+sethostname[\\s]+-S[\\s]+setdomainname[\\s]+-k[\\s]+system-locale[\\s]*$"
      expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+sethostname[\\s]+-S[\\s]+setdomainname[\\s]+-k[\\s]+system-locale[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.5 Ensure events that modify the system's network environment are collected - auditctl sethostname (32-bit)"
      info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+(?=.*sethostname)(?=.*setdomainname).*-F[\\s]+key=system-locale$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.5 Ensure events that modify the system's network environment are collected - issue"
      info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+\\/etc\\/issue[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+\\/etc\\/issue[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.5 Ensure events that modify the system's network environment are collected - auditctl issue"
      info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/etc/issue[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.5 Ensure events that modify the system's network environment are collected - issue.net"
      info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/etc/issue\\.net[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+/etc/issue\\.net[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.5 Ensure events that modify the system's network environment are collected - auditctl issue.net"
      info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/etc/issue.net[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.5 Ensure events that modify the system's network environment are collected - /etc/hosts"
      info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/etc/hosts[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+/etc/hosts[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.5 Ensure events that modify the system's network environment are collected - auditctl /etc/hosts"
      info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/etc/hosts[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.5 Ensure events that modify the system's network environment are collected - /etc/network"
      info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/etc/network[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+/etc/network[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.5 Ensure events that modify the system's network environment are collected - auditctl network"
      info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/etc/network[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "OS is 64 bit"
          cmd         : "/bin/uname -m"
          expect      : "^x86_64$"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "4.1.5 Ensure events that modify the system's network environment are collected - sethostname (64-bit)"
          info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-system-locale.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
        -w /etc/issue -p wa -k system-locale
        -w /etc/issue.net -p wa -k system-locale
        -w /etc/hosts -p wa -k system-locale
        -w /etc/network -p wa -k system-locale

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-system-locale.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
        -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
        -w /etc/issue -p wa -k system-locale
        -w /etc/issue.net -p wa -k system-locale
        -w /etc/hosts -p wa -k system-locale
        -w /etc/network -p wa -k system-locale"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          file        : "/etc/audit/audit.rules"
          regex       : "^[\\s]*-w[\\s]+/etc/network[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale[\\s]*$"
          expect      : "^[\\s]*-w[\\s]+/etc/network[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+system-locale[\\s]*$"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.1.5 Ensure events that modify the system's network environment are collected - auditctl sethostname (64-bit)"
          info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-system-locale.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
        -w /etc/issue -p wa -k system-locale
        -w /etc/issue.net -p wa -k system-locale
        -w /etc/hosts -p wa -k system-locale
        -w /etc/network -p wa -k system-locale

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-system-locale.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
        -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
        -w /etc/issue -p wa -k system-locale
        -w /etc/issue.net -p wa -k system-locale
        -w /etc/hosts -p wa -k system-locale
        -w /etc/network -p wa -k system-locale"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+(?=.*sethostname)(?=.*setdomainname).*-F[\\s]+key=system-locale$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
          expect      : "pass"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "4.1.5 Ensure events that modify the system's network environment are collected - sethostname (64-bit)"
          info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.5 Ensure events that modify the system's network environment are collected - auditctl sethostname (64-bit)"
          info        : "Record changes to network environment files or system calls. The below parameters monitor the sethostname (set the systems host name) or setdomainname (set the systems domainname) system calls, and write an audit event on system call exit. The other parameters monitor the /etc/issue and /etc/issue.net files (messages displayed pre-login), /etc/hosts (file containing host names and associated IP addresses) and /etc/network (directory containing network interface scripts and configurations) files.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier 'system-locale.'"
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-system-locale.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
      -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
      -w /etc/issue -p wa -k system-locale
      -w /etc/issue.net -p wa -k system-locale
      -w /etc/hosts -p wa -k system-locale
      -w /etc/network -p wa -k system-locale"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>
      </else>
    </if>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.6 Ensure events that modify the system's Mandatory Access Controls are collected - /etc/apparmor/"
      info        : "Monitor AppArmor mandatory access controls. The parameters below monitor any write access (potential additional, deletion or modification of files in the directory) or attribute changes to /etc/apparmor and /etc/apparmor.d directories.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Changes to files in these directories could indicate that an unauthorized user is attempting to modify access controls and change security contexts, leading to a compromise of the system."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-MAC-policy.rules
      Add the following lines:

      -w /etc/apparmor/ -p wa -k MAC-policy
      -w /etc/apparmor.d/ -p wa -k MAC-policy"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/etc/apparmor/[\\s]+-p[\\s]+wa[\\s]+-k[\\s]"
      expect      : "^[\\s]*-w[\\s]+/etc/apparmor/[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+MAC-policy[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.6 Ensure events that modify the system's Mandatory Access Controls are collected - auditctl /etc/apparmor/"
      info        : "Monitor AppArmor mandatory access controls. The parameters below monitor any write access (potential additional, deletion or modification of files in the directory) or attribute changes to /etc/apparmor and /etc/apparmor.d directories.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Changes to files in these directories could indicate that an unauthorized user is attempting to modify access controls and change security contexts, leading to a compromise of the system."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-MAC-policy.rules
      Add the following lines:

      -w /etc/apparmor/ -p wa -k MAC-policy
      -w /etc/apparmor.d/ -p wa -k MAC-policy"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/etc/apparmor/?[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+MAC-policy$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.6 Ensure events that modify the system's Mandatory Access Controls are collected - /etc/apparmor.d/"
      info        : "Monitor AppArmor mandatory access controls. The parameters below monitor any write access (potential additional, deletion or modification of files in the directory) or attribute changes to /etc/apparmor and /etc/apparmor.d directories.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Changes to files in these directories could indicate that an unauthorized user is attempting to modify access controls and change security contexts, leading to a compromise of the system."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-MAC-policy.rules
      Add the following lines:

      -w /etc/apparmor/ -p wa -k MAC-policy
      -w /etc/apparmor.d/ -p wa -k MAC-policy"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/etc/apparmor.d/[\\s]+-p[\\s]+wa[\\s]+-k[\\s]"
      expect      : "^[\\s]*-w[\\s]+/etc/apparmor.d/[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+MAC-policy[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.6 Ensure events that modify the system's Mandatory Access Controls are collected - auditctl /etc/apparmor.d/"
      info        : "Monitor AppArmor mandatory access controls. The parameters below monitor any write access (potential additional, deletion or modification of files in the directory) or attribute changes to /etc/apparmor and /etc/apparmor.d directories.

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Changes to files in these directories could indicate that an unauthorized user is attempting to modify access controls and change security contexts, leading to a compromise of the system."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-MAC-policy.rules
      Add the following lines:

      -w /etc/apparmor/ -p wa -k MAC-policy
      -w /etc/apparmor.d/ -p wa -k MAC-policy"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/etc/apparmor.d[/]?[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+MAC-policy$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.7 Ensure login and logout events are collected - /var/log/lastlog"
      info        : "Monitor login and logout events. The parameters below track changes to files associated with login/logout events. The file /var/log/faillog tracks failed events from login. The file /var/log/lastlog maintain records of the last time a user successfully logged in. The file /var/log/tallylog maintains records of failures via the pam_tally2 module

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring login/logout events could provide a system administrator with information associated with brute force attacks against user logins."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-logins.rules
      Add the following lines:

      -w /var/log/faillog -p wa -k logins
      -w /var/log/lastlog -p wa -k logins
      -w /var/log/tallylog -p wa -k logins"
      reference   : "800-171|3.1.2,800-171|3.1.10,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(12),800-53|AC-11,800-53|AU-3,800-53r5|AC-2(12),800-53r5|AC-11,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|8.1.4.1(b),CN-L3|8.1.4.3(b),CSCv7|4.9,CSCv7|16.11,CSCv7|16.13,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iii),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.11.2.8,ITSG-33|AC-2,ITSG-33|AC-11,ITSG-33|AU-3,LEVEL|2A,NESA|M5.3.1,NESA|T3.6.2,NIAv2|AM23c,NIAv2|AM23d,NIAv2|AM28,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|NS5j,NIAv2|SS14e,PCI-DSSv3.2.1|8.1.8,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|8.2.8,PCI-DSSv4.0|10.2.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/var/log/lastlog[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+/var/log/lastlog[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.7 Ensure login and logout events are collected - auditctl /var/log/lastlog"
      info        : "Monitor login and logout events. The parameters below track changes to files associated with login/logout events. The file /var/log/faillog tracks failed events from login. The file /var/log/lastlog maintain records of the last time a user successfully logged in. The file /var/log/tallylog maintains records of failures via the pam_tally2 module

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring login/logout events could provide a system administrator with information associated with brute force attacks against user logins."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-logins.rules
      Add the following lines:

      -w /var/log/faillog -p wa -k logins
      -w /var/log/lastlog -p wa -k logins
      -w /var/log/tallylog -p wa -k logins"
      reference   : "800-171|3.1.2,800-171|3.1.10,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(12),800-53|AC-11,800-53|AU-3,800-53r5|AC-2(12),800-53r5|AC-11,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|8.1.4.1(b),CN-L3|8.1.4.3(b),CSCv7|4.9,CSCv7|16.11,CSCv7|16.13,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iii),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.11.2.8,ITSG-33|AC-2,ITSG-33|AC-11,ITSG-33|AU-3,LEVEL|2A,NESA|M5.3.1,NESA|T3.6.2,NIAv2|AM23c,NIAv2|AM23d,NIAv2|AM28,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|NS5j,NIAv2|SS14e,PCI-DSSv3.2.1|8.1.8,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|8.2.8,PCI-DSSv4.0|10.2.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/var/log/lastlog[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.7 Ensure login and logout events are collected - /var/log/faillog"
      info        : "Monitor login and logout events. The parameters below track changes to files associated with login/logout events. The file /var/log/faillog tracks failed events from login. The file /var/log/lastlog maintain records of the last time a user successfully logged in. The file /var/log/tallylog maintains records of failures via the pam_tally2 module

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring login/logout events could provide a system administrator with information associated with brute force attacks against user logins."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-logins.rules
      Add the following lines:

      -w /var/log/faillog -p wa -k logins
      -w /var/log/lastlog -p wa -k logins
      -w /var/log/tallylog -p wa -k logins"
      reference   : "800-171|3.1.2,800-171|3.1.10,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(12),800-53|AC-11,800-53|AU-3,800-53r5|AC-2(12),800-53r5|AC-11,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|8.1.4.1(b),CN-L3|8.1.4.3(b),CSCv7|4.9,CSCv7|16.11,CSCv7|16.13,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iii),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.11.2.8,ITSG-33|AC-2,ITSG-33|AC-11,ITSG-33|AU-3,LEVEL|2A,NESA|M5.3.1,NESA|T3.6.2,NIAv2|AM23c,NIAv2|AM23d,NIAv2|AM28,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|NS5j,NIAv2|SS14e,PCI-DSSv3.2.1|8.1.8,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|8.2.8,PCI-DSSv4.0|10.2.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/var/log/faillog[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+/var/log/faillog[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.7 Ensure login and logout events are collected - auditctl /var/log/faillog"
      info        : "Monitor login and logout events. The parameters below track changes to files associated with login/logout events. The file /var/log/faillog tracks failed events from login. The file /var/log/lastlog maintain records of the last time a user successfully logged in. The file /var/log/tallylog maintains records of failures via the pam_tally2 module

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring login/logout events could provide a system administrator with information associated with brute force attacks against user logins."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-logins.rules
      Add the following lines:

      -w /var/log/faillog -p wa -k logins
      -w /var/log/lastlog -p wa -k logins
      -w /var/log/tallylog -p wa -k logins"
      reference   : "800-171|3.1.2,800-171|3.1.10,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(12),800-53|AC-11,800-53|AU-3,800-53r5|AC-2(12),800-53r5|AC-11,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|8.1.4.1(b),CN-L3|8.1.4.3(b),CSCv7|4.9,CSCv7|16.11,CSCv7|16.13,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iii),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.11.2.8,ITSG-33|AC-2,ITSG-33|AC-11,ITSG-33|AU-3,LEVEL|2A,NESA|M5.3.1,NESA|T3.6.2,NIAv2|AM23c,NIAv2|AM23d,NIAv2|AM28,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|NS5j,NIAv2|SS14e,PCI-DSSv3.2.1|8.1.8,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|8.2.8,PCI-DSSv4.0|10.2.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/var/log/faillog[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.7 Ensure login and logout events are collected - /var/log/tallylog"
      info        : "Monitor login and logout events. The parameters below track changes to files associated with login/logout events. The file /var/log/faillog tracks failed events from login. The file /var/log/lastlog maintain records of the last time a user successfully logged in. The file /var/log/tallylog maintains records of failures via the pam_tally2 module

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring login/logout events could provide a system administrator with information associated with brute force attacks against user logins."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-logins.rules
      Add the following lines:

      -w /var/log/faillog -p wa -k logins
      -w /var/log/lastlog -p wa -k logins
      -w /var/log/tallylog -p wa -k logins"
      reference   : "800-171|3.1.2,800-171|3.1.10,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(12),800-53|AC-11,800-53|AU-3,800-53r5|AC-2(12),800-53r5|AC-11,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|8.1.4.1(b),CN-L3|8.1.4.3(b),CSCv7|4.9,CSCv7|16.11,CSCv7|16.13,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iii),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.11.2.8,ITSG-33|AC-2,ITSG-33|AC-11,ITSG-33|AU-3,LEVEL|2A,NESA|M5.3.1,NESA|T3.6.2,NIAv2|AM23c,NIAv2|AM23d,NIAv2|AM28,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|NS5j,NIAv2|SS14e,PCI-DSSv3.2.1|8.1.8,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|8.2.8,PCI-DSSv4.0|10.2.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/var/log/tallylog[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+/var/log/tallylog[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.7 Ensure login and logout events are collected - auditctl /var/log/tallylog"
      info        : "Monitor login and logout events. The parameters below track changes to files associated with login/logout events. The file /var/log/faillog tracks failed events from login. The file /var/log/lastlog maintain records of the last time a user successfully logged in. The file /var/log/tallylog maintains records of failures via the pam_tally2 module

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring login/logout events could provide a system administrator with information associated with brute force attacks against user logins."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-logins.rules
      Add the following lines:

      -w /var/log/faillog -p wa -k logins
      -w /var/log/lastlog -p wa -k logins
      -w /var/log/tallylog -p wa -k logins"
      reference   : "800-171|3.1.2,800-171|3.1.10,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(12),800-53|AC-11,800-53|AU-3,800-53r5|AC-2(12),800-53r5|AC-11,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|8.1.4.1(b),CN-L3|8.1.4.3(b),CSCv7|4.9,CSCv7|16.11,CSCv7|16.13,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iii),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.11.2.8,ITSG-33|AC-2,ITSG-33|AC-11,ITSG-33|AU-3,LEVEL|2A,NESA|M5.3.1,NESA|T3.6.2,NIAv2|AM23c,NIAv2|AM23d,NIAv2|AM28,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|NS5j,NIAv2|SS14e,PCI-DSSv3.2.1|8.1.8,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|8.2.8,PCI-DSSv4.0|10.2.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/var/log/tallylog[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.8 Ensure session initiation information is collected - utmp"
      info        : "Monitor session initiation events. The parameters in this section track changes to the files associated with session events. The file /var/run/utmp tracks all currently logged in users. All audit records will be tagged with the identifier 'session.' The /var/log/wtmp file tracks logins, logouts, shutdown, and reboot events. The file /var/log/btmp keeps track of failed login attempts and can be read by entering the command /usr/bin/last -f /var/log/btmp . All audit records will be tagged with the identifier 'logins.'

      Note:

      The last command can be used to read /var/log/wtmp (last with no parameters) and /var/run/utmp (last -f /var/run/utmp)

      Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring these files for changes could alert a system administrator to logins occurring at unusual hours, which could indicate intruder activity (i.e. a user logging in at a time when they do not normally log in)."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-session.rules
      Add the following lines:

      -w /var/run/utmp -p wa -k session
      -w /var/log/wtmp -p wa -k logins
      -w /var/log/btmp -p wa -k logins"
      reference   : "800-171|3.1.2,800-171|3.1.10,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(12),800-53|AC-11,800-53|AU-3,800-53r5|AC-2(12),800-53r5|AC-11,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|8.1.4.1(b),CN-L3|8.1.4.3(b),CSCv7|4.9,CSCv7|16.11,CSCv7|16.13,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iii),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.11.2.8,ITSG-33|AC-2,ITSG-33|AC-11,ITSG-33|AU-3,LEVEL|2A,NESA|M5.3.1,NESA|T3.6.2,NIAv2|AM23c,NIAv2|AM23d,NIAv2|AM28,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|NS5j,NIAv2|SS14e,PCI-DSSv3.2.1|8.1.8,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|8.2.8,PCI-DSSv4.0|10.2.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/var/run/utmp[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+session[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+/var/run/utmp[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+session[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.8 Ensure session initiation information is collected - auditctl utmp"
      info        : "Monitor session initiation events. The parameters in this section track changes to the files associated with session events. The file /var/run/utmp tracks all currently logged in users. All audit records will be tagged with the identifier 'session.' The /var/log/wtmp file tracks logins, logouts, shutdown, and reboot events. The file /var/log/btmp keeps track of failed login attempts and can be read by entering the command /usr/bin/last -f /var/log/btmp . All audit records will be tagged with the identifier 'logins.'

      Note:

      The last command can be used to read /var/log/wtmp (last with no parameters) and /var/run/utmp (last -f /var/run/utmp)

      Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring these files for changes could alert a system administrator to logins occurring at unusual hours, which could indicate intruder activity (i.e. a user logging in at a time when they do not normally log in)."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-session.rules
      Add the following lines:

      -w /var/run/utmp -p wa -k session
      -w /var/log/wtmp -p wa -k logins
      -w /var/log/btmp -p wa -k logins"
      reference   : "800-171|3.1.2,800-171|3.1.10,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(12),800-53|AC-11,800-53|AU-3,800-53r5|AC-2(12),800-53r5|AC-11,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|8.1.4.1(b),CN-L3|8.1.4.3(b),CSCv7|4.9,CSCv7|16.11,CSCv7|16.13,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iii),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.11.2.8,ITSG-33|AC-2,ITSG-33|AC-11,ITSG-33|AU-3,LEVEL|2A,NESA|M5.3.1,NESA|T3.6.2,NIAv2|AM23c,NIAv2|AM23d,NIAv2|AM28,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|NS5j,NIAv2|SS14e,PCI-DSSv3.2.1|8.1.8,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|8.2.8,PCI-DSSv4.0|10.2.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/var/run/utmp[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+session$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.8 Ensure session initiation information is collected - wtmp"
      info        : "Monitor session initiation events. The parameters in this section track changes to the files associated with session events. The file /var/run/utmp tracks all currently logged in users. All audit records will be tagged with the identifier 'session.' The /var/log/wtmp file tracks logins, logouts, shutdown, and reboot events. The file /var/log/btmp keeps track of failed login attempts and can be read by entering the command /usr/bin/last -f /var/log/btmp . All audit records will be tagged with the identifier 'logins.'

      Note:

      The last command can be used to read /var/log/wtmp (last with no parameters) and /var/run/utmp (last -f /var/run/utmp)

      Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring these files for changes could alert a system administrator to logins occurring at unusual hours, which could indicate intruder activity (i.e. a user logging in at a time when they do not normally log in)."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-session.rules
      Add the following lines:

      -w /var/run/utmp -p wa -k session
      -w /var/log/wtmp -p wa -k logins
      -w /var/log/btmp -p wa -k logins"
      reference   : "800-171|3.1.2,800-171|3.1.10,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(12),800-53|AC-11,800-53|AU-3,800-53r5|AC-2(12),800-53r5|AC-11,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|8.1.4.1(b),CN-L3|8.1.4.3(b),CSCv7|4.9,CSCv7|16.11,CSCv7|16.13,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iii),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.11.2.8,ITSG-33|AC-2,ITSG-33|AC-11,ITSG-33|AU-3,LEVEL|2A,NESA|M5.3.1,NESA|T3.6.2,NIAv2|AM23c,NIAv2|AM23d,NIAv2|AM28,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|NS5j,NIAv2|SS14e,PCI-DSSv3.2.1|8.1.8,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|8.2.8,PCI-DSSv4.0|10.2.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/var/log/wtmp[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+/var/log/wtmp[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.8 Ensure session initiation information is collected - auditctl wtmp"
      info        : "Monitor session initiation events. The parameters in this section track changes to the files associated with session events. The file /var/run/utmp tracks all currently logged in users. All audit records will be tagged with the identifier 'session.' The /var/log/wtmp file tracks logins, logouts, shutdown, and reboot events. The file /var/log/btmp keeps track of failed login attempts and can be read by entering the command /usr/bin/last -f /var/log/btmp . All audit records will be tagged with the identifier 'logins.'

      Note:

      The last command can be used to read /var/log/wtmp (last with no parameters) and /var/run/utmp (last -f /var/run/utmp)

      Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring these files for changes could alert a system administrator to logins occurring at unusual hours, which could indicate intruder activity (i.e. a user logging in at a time when they do not normally log in)."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-session.rules
      Add the following lines:

      -w /var/run/utmp -p wa -k session
      -w /var/log/wtmp -p wa -k logins
      -w /var/log/btmp -p wa -k logins"
      reference   : "800-171|3.1.2,800-171|3.1.10,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(12),800-53|AC-11,800-53|AU-3,800-53r5|AC-2(12),800-53r5|AC-11,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|8.1.4.1(b),CN-L3|8.1.4.3(b),CSCv7|4.9,CSCv7|16.11,CSCv7|16.13,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iii),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.11.2.8,ITSG-33|AC-2,ITSG-33|AC-11,ITSG-33|AU-3,LEVEL|2A,NESA|M5.3.1,NESA|T3.6.2,NIAv2|AM23c,NIAv2|AM23d,NIAv2|AM28,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|NS5j,NIAv2|SS14e,PCI-DSSv3.2.1|8.1.8,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|8.2.8,PCI-DSSv4.0|10.2.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/var/log/wtmp[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.8 Ensure session initiation information is collected - btmp"
      info        : "Monitor session initiation events. The parameters in this section track changes to the files associated with session events. The file /var/run/utmp tracks all currently logged in users. All audit records will be tagged with the identifier 'session.' The /var/log/wtmp file tracks logins, logouts, shutdown, and reboot events. The file /var/log/btmp keeps track of failed login attempts and can be read by entering the command /usr/bin/last -f /var/log/btmp . All audit records will be tagged with the identifier 'logins.'

      Note:

      The last command can be used to read /var/log/wtmp (last with no parameters) and /var/run/utmp (last -f /var/run/utmp)

      Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring these files for changes could alert a system administrator to logins occurring at unusual hours, which could indicate intruder activity (i.e. a user logging in at a time when they do not normally log in)."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-session.rules
      Add the following lines:

      -w /var/run/utmp -p wa -k session
      -w /var/log/wtmp -p wa -k logins
      -w /var/log/btmp -p wa -k logins"
      reference   : "800-171|3.1.2,800-171|3.1.10,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(12),800-53|AC-11,800-53|AU-3,800-53r5|AC-2(12),800-53r5|AC-11,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|8.1.4.1(b),CN-L3|8.1.4.3(b),CSCv7|4.9,CSCv7|16.11,CSCv7|16.13,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iii),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.11.2.8,ITSG-33|AC-2,ITSG-33|AC-11,ITSG-33|AU-3,LEVEL|2A,NESA|M5.3.1,NESA|T3.6.2,NIAv2|AM23c,NIAv2|AM23d,NIAv2|AM28,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|NS5j,NIAv2|SS14e,PCI-DSSv3.2.1|8.1.8,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|8.2.8,PCI-DSSv4.0|10.2.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/var/log/btmp[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+/var/log/btmp[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.8 Ensure session initiation information is collected - auditctl btmp"
      info        : "Monitor session initiation events. The parameters in this section track changes to the files associated with session events. The file /var/run/utmp tracks all currently logged in users. All audit records will be tagged with the identifier 'session.' The /var/log/wtmp file tracks logins, logouts, shutdown, and reboot events. The file /var/log/btmp keeps track of failed login attempts and can be read by entering the command /usr/bin/last -f /var/log/btmp . All audit records will be tagged with the identifier 'logins.'

      Note:

      The last command can be used to read /var/log/wtmp (last with no parameters) and /var/run/utmp (last -f /var/run/utmp)

      Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring these files for changes could alert a system administrator to logins occurring at unusual hours, which could indicate intruder activity (i.e. a user logging in at a time when they do not normally log in)."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-session.rules
      Add the following lines:

      -w /var/run/utmp -p wa -k session
      -w /var/log/wtmp -p wa -k logins
      -w /var/log/btmp -p wa -k logins"
      reference   : "800-171|3.1.2,800-171|3.1.10,800-171|3.3.1,800-171|3.3.2,800-53|AC-2(12),800-53|AC-11,800-53|AU-3,800-53r5|AC-2(12),800-53r5|AC-11,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.3(a),CN-L3|8.1.4.1(b),CN-L3|8.1.4.3(b),CSCv7|4.9,CSCv7|16.11,CSCv7|16.13,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iii),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.11.2.8,ITSG-33|AC-2,ITSG-33|AC-11,ITSG-33|AU-3,LEVEL|2A,NESA|M5.3.1,NESA|T3.6.2,NIAv2|AM23c,NIAv2|AM23d,NIAv2|AM28,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,NIAv2|NS5j,NIAv2|SS14e,PCI-DSSv3.2.1|8.1.8,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|8.2.8,PCI-DSSv4.0|10.2.2,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+/var/log/btmp[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+logins$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.9 Ensure discretionary access control permission modification events are collected - chmod/fchmod/fchmodat"
      info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+chmod[\\s]+-S[\\s]+fchmod[\\s]+-S[\\s]+fchmodat[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]"
      expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+chmod[\\s]+-S[\\s]+fchmod[\\s]+-S[\\s]+fchmodat[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+perm_mod[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.9 Ensure discretionary access control permission modification events are collected - auditctl chmod/fchmod/fchmodat"
      info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+(?=.*chmod)(?=.*fchmod)(?=.*fchmodat).*-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=perm_mod$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.9 Ensure discretionary access control permission modification events are collected - chown/fchown/fchownat/lchown"
      info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+chown[\\s]+-S[\\s]+fchown[\\s]+-S[\\s]+fchownat[\\s]+-S[\\s]+lchown[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+perm_mod[\\s]*$"
      expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+chown[\\s]+-S[\\s]+fchown[\\s]+-S[\\s]+fchownat[\\s]+-S[\\s]+lchown[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+perm_mod[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.9 Ensure discretionary access control permission modification events are collected - auditctl chown/fchown/fchownat/lchown"
      info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+(?=.*chown)(?=.*fchown)(?=.*fchownat)(?=.*lchown).*-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=perm_mod$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.9 Ensure discretionary access control permission modification events are collected - setxattr/lsetxattr/fsetxattr/removexattr"
      info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+setxattr[\\s]+-S[\\s]+lsetxattr[\\s]+-S[\\s]+fsetxattr[\\s]+-S[\\s]+removexattr[\\s]+-S[\\s]+lremovexattr[\\s]+-S[\\s]+fremovexattr[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+perm_mod[\\s]*$"
      expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+setxattr[\\s]+-S[\\s]+lsetxattr[\\s]+-S[\\s]+fsetxattr[\\s]+-S[\\s]+removexattr[\\s]+-S[\\s]+lremovexattr[\\s]+-S[\\s]+fremovexattr[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+perm_mod[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.9 Ensure discretionary access control permission modification events are collected - auditctl setxattr/lsetxattr/fsetxattr/removexattr"
      info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s](?=.*setxattr)(?=.*lsetxattr)(?=.*fsetxattr)(?=.*removexattr)(?=.*lremovexattr)(?=.*fremovexattr).*[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=perm_mod$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "OS is 64 bit"
          cmd         : "/bin/uname -m"
          expect      : "^x86_64$"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "4.1.9 Ensure discretionary access control permission modification events are collected - chmod/fchmod/fchmodat (64-bit)"
          info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
        Example: vi /etc/audit/rules.d/50-perm_mod.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-perm_mod.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          file        : "/etc/audit/audit.rules"
          regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+chmod[\\s]+-S[\\s]+fchmod[\\s]+-S[\\s]+fchmodat[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]"
          expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+chmod[\\s]+-S[\\s]+fchmod[\\s]+-S[\\s]+fchmodat[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+perm_mod[\\s]*$"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.1.9 Ensure discretionary access control permission modification events are collected - auditctl chmod/fchmod/fchmodat (64-bit)"
          info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
        Example: vi /etc/audit/rules.d/50-perm_mod.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-perm_mod.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+(?=.*chmod)(?=.*fchmod)(?=.*fchmodat).*-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=perm_mod$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
          expect      : "pass"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "4.1.9 Ensure discretionary access control permission modification events are collected - chown/fchown/fchownat/lchown (64-bit)"
          info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
        Example: vi /etc/audit/rules.d/50-perm_mod.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-perm_mod.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          file        : "/etc/audit/audit.rules"
          regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+chown[\\s]+-S[\\s]+fchown[\\s]+-S[\\s]+fchownat[\\s]+-S[\\s]+lchown[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]"
          expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+chown[\\s]+-S[\\s]+fchown[\\s]+-S[\\s]+fchownat[\\s]+-S[\\s]+lchown[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+perm_mod[\\s]*$"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.1.9 Ensure discretionary access control permission modification events are collected - auditctl chown/fchown/fchownat/lchown (64-bit)"
          info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
        Example: vi /etc/audit/rules.d/50-perm_mod.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-perm_mod.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+(?=.*chown)(?=.*fchown)(?=.*fchownat)(?=.*lchown).*-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=perm_mod$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
          expect      : "pass"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "4.1.9 Ensure discretionary access control permission modification events are collected - xattr (64-bit)"
          info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
        Example: vi /etc/audit/rules.d/50-perm_mod.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-perm_mod.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          file        : "/etc/audit/audit.rules"
          regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+setxattr[\\s]+-S[\\s]+lsetxattr[\\s]+-S[\\s]+fsetxattr[\\s]+-S[\\s]+removexattr[\\s]+-S[\\s]+lremovexattr[\\s]+-S[\\s]+fremovexattr[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]"
          expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+setxattr[\\s]+-S[\\s]+lsetxattr[\\s]+-S[\\s]+fsetxattr[\\s]+-S[\\s]+removexattr[\\s]+-S[\\s]+lremovexattr[\\s]+-S[\\s]+fremovexattr[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+perm_mod[\\s]*$"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.1.9 Ensure discretionary access control permission modification events are collected - auditctl xattr (64-bit)"
          info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
        Example: vi /etc/audit/rules.d/50-perm_mod.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-perm_mod.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
        -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+(?=.*setxattr)(?=.*lsetxattr)(?=.*fsetxattr)(?=.*removexattr)(?=.*lremovexattr)(?=.*fremovexattr).*-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=perm_mod$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
          expect      : "pass"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "4.1.9 Ensure discretionary access control permission modification events are collected - chmod/fchmod/fchmodat (64-bit)"
          info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.9 Ensure discretionary access control permission modification events are collected - auditctl chmod/fchmod/fchmodat (64-bit)"
          info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.9 Ensure discretionary access control permission modification events are collected - chown/fchown/fchownat/lchown (64-bit)"
          info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.9 Ensure discretionary access control permission modification events are collected - auditctl chown/fchown/fchownat/lchown (64-bit)"
          info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.9 Ensure discretionary access control permission modification events are collected - xattr (64-bit)"
          info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.9 Ensure discretionary access control permission modification events are collected - auditctl xattr (64-bit)"
          info        : "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The chmod , fchmod and fchmodat system calls affect the permissions associated with a file. The chown , fchown , fchownat and lchown system calls affect owner and group attributes on a file. The setxattr , lsetxattr , fsetxattr (set extended file attributes) and removexattr , lremovexattr , fremovexattr (remove extended file attributes) control extended file attributes. In all cases, an audit record will only be written for non-system user ids (auid >= 1000) and will ignore Daemon events (auid = 4294967295). All audit records will be tagged with the identifier 'perm_mod.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-perm_mod.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
      -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod




      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>
      </else>
    </if>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.10 Ensure unsuccessful unauthorized file access attempts are collected - EACCES"
      info        : "Monitor for unsuccessful attempts to access files. The parameters below are associated with system calls that control creation ( creat ), opening ( open , openat ) and truncation ( truncate , ftruncate ) of files. An audit log record will only be written if the user is a non-privileged user (auid > = 1000), is not a Daemon event (auid=4294967295) and if the system call returned EACCES (permission denied to the file) or EPERM (some other permanent error associated with the specific system call). All audit records will be tagged with the identifier 'access.'

    Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

    Rationale:

    Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
    Example: vi /etc/audit/rules.d/50-access.rules
    Add the following lines:

    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

    For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
    Example: vi /etc/audit/rules.d/50-access.rules
    Add the following lines:

    -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

    Additional Information:

    Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

    # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

    If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|14.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+creat[\\s]+-S[\\s]+open[\\s]+-S[\\s]+openat[\\s]+-S[\\s]+truncate[\\s]+-S[\\s]+ftruncate[\\s]+-F[\\s]+exit=-EACCES[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+access[\\s]*$"
      expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+creat[\\s]+-S[\\s]+open[\\s]+-S[\\s]+openat[\\s]+-S[\\s]+truncate[\\s]+-S[\\s]+ftruncate[\\s]+-F[\\s]+exit=-EACCES[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+access[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.10 Ensure unsuccessful unauthorized file access attempts are collected - auditctl EACCES"
      info        : "Monitor for unsuccessful attempts to access files. The parameters below are associated with system calls that control creation ( creat ), opening ( open , openat ) and truncation ( truncate , ftruncate ) of files. An audit log record will only be written if the user is a non-privileged user (auid > = 1000), is not a Daemon event (auid=4294967295) and if the system call returned EACCES (permission denied to the file) or EPERM (some other permanent error associated with the specific system call). All audit records will be tagged with the identifier 'access.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-access.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
      -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-access.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
      -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
      -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
      -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|14.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+(?=.*open)(?=.*truncate)(?=.*creat)(?=.*ftruncate)(?=.*openat).*-F[\\s]+exit=-EACCES[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=access$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.10 Ensure unsuccessful unauthorized file access attempts are collected - EPERM"
      info        : "Monitor for unsuccessful attempts to access files. The parameters below are associated with system calls that control creation ( creat ), opening ( open , openat ) and truncation ( truncate , ftruncate ) of files. An audit log record will only be written if the user is a non-privileged user (auid > = 1000), is not a Daemon event (auid=4294967295) and if the system call returned EACCES (permission denied to the file) or EPERM (some other permanent error associated with the specific system call). All audit records will be tagged with the identifier 'access.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-access.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
      -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-access.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
      -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
      -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
      -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|14.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+creat[\\s]+-S[\\s]+open[\\s]+-S[\\s]+openat[\\s]+-S[\\s]+truncate[\\s]+-S[\\s]+ftruncate[\\s]+-F[\\s]+exit=-EPERM[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+access[\\s]*$"
      expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+creat[\\s]+-S[\\s]+open[\\s]+-S[\\s]+openat[\\s]+-S[\\s]+truncate[\\s]+-S[\\s]+ftruncate[\\s]+-F[\\s]+exit=-EPERM[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+access[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.10 Ensure unsuccessful unauthorized file access attempts are collected - auditctl EPERM"
      info        : "Monitor for unsuccessful attempts to access files. The parameters below are associated with system calls that control creation ( creat ), opening ( open , openat ) and truncation ( truncate , ftruncate ) of files. An audit log record will only be written if the user is a non-privileged user (auid > = 1000), is not a Daemon event (auid=4294967295) and if the system call returned EACCES (permission denied to the file) or EPERM (some other permanent error associated with the specific system call). All audit records will be tagged with the identifier 'access.'

      Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-access.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
      -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-access.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
      -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
      -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
      -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|14.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=(i386|b32)[\\s]+-S[\\s]+(?=.*open)(?=.*truncate)(?=.*creat)(?=.*ftruncate)(?=.*openat).*-F[\\s]+exit=-EPERM[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=access$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "OS is 64 bit"
          cmd         : "/bin/uname -m"
          expect      : "^x86_64$"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "4.1.10 Ensure unsuccessful unauthorized file access attempts are collected - EACCES (64-bit)"
          info        : "Monitor for unsuccessful attempts to access files. The parameters below are associated with system calls that control creation ( creat ), opening ( open , openat ) and truncation ( truncate , ftruncate ) of files. An audit log record will only be written if the user is a non-privileged user (auid > = 1000), is not a Daemon event (auid=4294967295) and if the system call returned EACCES (permission denied to the file) or EPERM (some other permanent error associated with the specific system call). All audit records will be tagged with the identifier 'access.'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-access.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-access.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|14.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          file        : "/etc/audit/audit.rules"
          regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+creat[\\s]+-S[\\s]+open[\\s]+-S[\\s]+openat[\\s]+-S[\\s]+truncate[\\s]+-S[\\s]+ftruncate[\\s]+-F[\\s]+exit=-EACCES[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+access[\\s]*$"
          expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+creat[\\s]+-S[\\s]+open[\\s]+-S[\\s]+openat[\\s]+-S[\\s]+truncate[\\s]+-S[\\s]+ftruncate[\\s]+-F[\\s]+exit=-EACCES[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+access[\\s]*$"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.1.10 Ensure unsuccessful unauthorized file access attempts are collected - auditctl EACCES (64-bit)"
          info        : "Monitor for unsuccessful attempts to access files. The parameters below are associated with system calls that control creation ( creat ), opening ( open , openat ) and truncation ( truncate , ftruncate ) of files. An audit log record will only be written if the user is a non-privileged user (auid > = 1000), is not a Daemon event (auid=4294967295) and if the system call returned EACCES (permission denied to the file) or EPERM (some other permanent error associated with the specific system call). All audit records will be tagged with the identifier 'access.'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-access.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-access.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|14.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+(?=.*open)(?=.*truncate)(?=.*creat)(?=.*ftruncate)(?=.*openat).*-F[\\s]+exit=-EACCES[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=access$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
          expect      : "pass"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "4.1.10 Ensure unsuccessful unauthorized file access attempts are collected - EPERM (64-bit)"
          info        : "Monitor for unsuccessful attempts to access files. The parameters below are associated with system calls that control creation ( creat ), opening ( open , openat ) and truncation ( truncate , ftruncate ) of files. An audit log record will only be written if the user is a non-privileged user (auid > = 1000), is not a Daemon event (auid=4294967295) and if the system call returned EACCES (permission denied to the file) or EPERM (some other permanent error associated with the specific system call). All audit records will be tagged with the identifier 'access.'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-access.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-access.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|14.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          file        : "/etc/audit/audit.rules"
          regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+creat[\\s]+-S[\\s]+open[\\s]+-S[\\s]+openat[\\s]+-S[\\s]+truncate[\\s]+-S[\\s]+ftruncate[\\s]+-F[\\s]+exit=-EPERM[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+access[\\s]*$"
          expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+creat[\\s]+-S[\\s]+open[\\s]+-S[\\s]+openat[\\s]+-S[\\s]+truncate[\\s]+-S[\\s]+ftruncate[\\s]+-F[\\s]+exit=-EPERM[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+access[\\s]*$"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.1.10 Ensure unsuccessful unauthorized file access attempts are collected - auditctl EPERM (64-bit)"
          info        : "Monitor for unsuccessful attempts to access files. The parameters below are associated with system calls that control creation ( creat ), opening ( open , openat ) and truncation ( truncate , ftruncate ) of files. An audit log record will only be written if the user is a non-privileged user (auid > = 1000), is not a Daemon event (auid=4294967295) and if the system call returned EACCES (permission denied to the file) or EPERM (some other permanent error associated with the specific system call). All audit records will be tagged with the identifier 'access.'

        Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-access.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-access.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
        -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|14.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+(?=.*open)(?=.*truncate)(?=.*creat)(?=.*ftruncate)(?=.*openat).*-F[\\s]+exit=-EPERM[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=access$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
          expect      : "pass"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "4.1.10 Ensure unsuccessful unauthorized file access attempts are collected - EACCES (64-bit)"
          info        : "Monitor for unsuccessful attempts to access files. The parameters below are associated with system calls that control creation ( creat ), opening ( open , openat ) and truncation ( truncate , ftruncate ) of files. An audit log record will only be written if the user is a non-privileged user (auid > = 1000), is not a Daemon event (auid=4294967295) and if the system call returned EACCES (permission denied to the file) or EPERM (some other permanent error associated with the specific system call). All audit records will be tagged with the identifier 'access.'

    Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

    Rationale:

    Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
    Example: vi /etc/audit/rules.d/50-access.rules
    Add the following lines:

    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

    For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
    Example: vi /etc/audit/rules.d/50-access.rules
    Add the following lines:

    -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

    Additional Information:

    Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

    # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

    If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|14.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.10 Ensure unsuccessful unauthorized file access attempts are collected - auditctl EACCES (64-bit)"
          info        : "Monitor for unsuccessful attempts to access files. The parameters below are associated with system calls that control creation ( creat ), opening ( open , openat ) and truncation ( truncate , ftruncate ) of files. An audit log record will only be written if the user is a non-privileged user (auid > = 1000), is not a Daemon event (auid=4294967295) and if the system call returned EACCES (permission denied to the file) or EPERM (some other permanent error associated with the specific system call). All audit records will be tagged with the identifier 'access.'

    Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

    Rationale:

    Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
    Example: vi /etc/audit/rules.d/50-access.rules
    Add the following lines:

    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

    For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
    Example: vi /etc/audit/rules.d/50-access.rules
    Add the following lines:

    -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

    Additional Information:

    Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

    # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

    If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|14.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.10 Ensure unsuccessful unauthorized file access attempts are collected - EPERM (64-bit)"
          info        : "Monitor for unsuccessful attempts to access files. The parameters below are associated with system calls that control creation ( creat ), opening ( open , openat ) and truncation ( truncate , ftruncate ) of files. An audit log record will only be written if the user is a non-privileged user (auid > = 1000), is not a Daemon event (auid=4294967295) and if the system call returned EACCES (permission denied to the file) or EPERM (some other permanent error associated with the specific system call). All audit records will be tagged with the identifier 'access.'

    Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

    Rationale:

    Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
    Example: vi /etc/audit/rules.d/50-access.rules
    Add the following lines:

    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

    For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
    Example: vi /etc/audit/rules.d/50-access.rules
    Add the following lines:

    -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

    Additional Information:

    Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

    # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

    If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|14.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.10 Ensure unsuccessful unauthorized file access attempts are collected - auditctl EPERM (64-bit)"
          info        : "Monitor for unsuccessful attempts to access files. The parameters below are associated with system calls that control creation ( creat ), opening ( open , openat ) and truncation ( truncate , ftruncate ) of files. An audit log record will only be written if the user is a non-privileged user (auid > = 1000), is not a Daemon event (auid=4294967295) and if the system call returned EACCES (permission denied to the file) or EPERM (some other permanent error associated with the specific system call). All audit records will be tagged with the identifier 'access.'

    Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

    Rationale:

    Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
    Example: vi /etc/audit/rules.d/50-access.rules
    Add the following lines:

    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

    For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
    Example: vi /etc/audit/rules.d/50-access.rules
    Add the following lines:

    -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
    -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

    Additional Information:

    Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

    # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

    If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|14.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>
      </else>
    </if>

    <if>
      <condition auto:"FAILED" type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "on disk"
          cmd         : "for PARTITION in $(/bin/findmnt -n -l -k -it $(/bin/awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | /bin/grep -Pv \"noexec|nosuid\" | /bin/awk '{print $1}'); do for PRIVILEGED in $(/bin/find \"${PARTITION}\" -xdev -perm /6000 -type f); do /bin/grep -qr \"${PRIVILEGED}\" /etc/audit/rules.d && printf \"OK: '${PRIVILEGED}' found in auditing rules.\\n\" || printf \"Warning: '${PRIVILEGED}' not found in on disk configuration.\\n\"; done; done | /bin/awk '{print} END { if ($1 ~ \"Warning\") print \"Fail - Warnings found\"; else print \"Pass - No warning entries found\" }'"
          expect      : "^Pass - No warning entries found$"
          timeout     : "@FIND_TIMEOUT@"
        </custom_item>

        <custom_item>
          type        : CMD_EXEC
          description : "in memory"
          cmd         : "RUNNING=$(/sbin/auditctl -l); [ -n \"${RUNNING}\" ] && for PARTITION in $(/bin/findmnt -n -l -k -it $(/bin/awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | /bin/grep -Pv \"noexec|nosuid\" | /bin/awk '{print $1}'); do for PRIVILEGED in $(/bin/find \"${PARTITION}\" -xdev -perm /6000 -type f); do printf -- \"${RUNNING}\" | /bin/grep -q \"${PRIVILEGED}\" && printf \"OK: '${PRIVILEGED}' found in auditing rules.\\n\" || printf \"Warning: '${PRIVILEGED}' not found in running configuration.\\n\"; done; done | /bin/awk '{print} END { if ($1 ~ \"Warning\") print \"Fail - Warnings found\"; else print \"Pass - No warning entries found\" }'"
          expect      : "^Pass - No warning entries found$"
          timeout     : "@FIND_TIMEOUT@"
        </custom_item>
      </condition>

      <then>
        <report type:"PASSED">
          description : "4.1.11 Ensure use of privileged commands is collected"
          info        : "Monitor privileged programs (those that have the setuid and/or setgid bit set on execution) to determine if unprivileged users are running these commands.

    Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

    Rationale:

    Execution of privileged commands by non-privileged users could be an indication of someone trying to gain unauthorized access to the system."
          solution    : "To remediate this issue, the system administrator will have to execute a find command to locate all the privileged programs and then add an audit line for each one of them.
    The audit parameters associated with this are as follows:

    -F path=' $1 ' - will populate each file name found through the find command and processed by awk.

    -F perm=x - will write an audit record if the file is executed.

    -F auid>=1000 - will write a record if the user executing the command is not a privileged user.

    -F auid!= 4294967295 - will ignore Daemon events

    All audit records should be tagged with the identifier key 'privileged'.
    Run the following command replacing with a list of partitions where programs can be executed from on your system:

    # find <partition> -xdev \( -perm -4000 -o -perm -2000 \) -type f | awk '{print '-a always,exit -F path=' $1 ' -F perm=x -F auid>=''$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)'' -F auid!=4294967295 -k privileged' }'

    Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules and add all resulting lines to the file.
    Example:

    # find / -xdev \( -perm -4000 -o -perm -2000 \) -type f | awk '{print '-a always,exit -F path=' $1 ' -F perm=x -F auid>=''$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)'' -F auid!=4294967295 -k privileged' }' >> /etc/audit/rules.d/50-privileged.rules

    Additional Information:

    Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

    # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

    If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          show_output : YES
        </report>
      </then>
    </if>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.12 Ensure successful file system mounts are collected - 32-bit"
      info        : "Monitor the use of the mount system call. The mount (and umount ) system call controls the mounting and unmounting of file systems. The parameters below configure the system to create an audit record when the mount system call is used by a non-privileged user

    Note:

    This tracks successful and unsuccessful mount commands. File system mounts do not have to come from external media and this action still does not verify write (e.g. CD ROMS).

    Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

    Rationale:

    It is highly unusual for a non privileged user to mount file systems to the system. While tracking mount commands gives the system administrator evidence that external media may have been mounted (based on a review of the source of the mount and confirming it's an external media type), it does not conclusively indicate that data was exported to the media. System administrators who wish to determine if data were exported, would also have to track successful open , creat and truncate system calls requiring write access to a file under the mount point of the external media file system. This could give a fair indication that a write occurred. The only way to truly prove it, would be to track successful writes to the external media. Tracking write system calls could quickly fill up the audit log and is not recommended. Recommendations on configuration options to track data export to media is beyond the scope of this document."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
    Example: vi /etc/audit/rules.d/50-mounts.rules
    Add the following lines:

    -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

    For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
    Example: vi /etc/audit/rules.d/50-mounts.rules
    Add the following lines:

    -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
    -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

    Additional Information:

    Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

    # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

    If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+mount[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+mounts[\\s]*$"
      expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+mount[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+mounts[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.12 Ensure successful file system mounts are collected - auditctl (32-bit)"
      info        : "Monitor the use of the mount system call. The mount (and umount ) system call controls the mounting and unmounting of file systems. The parameters below configure the system to create an audit record when the mount system call is used by a non-privileged user

      Note:

      This tracks successful and unsuccessful mount commands. File system mounts do not have to come from external media and this action still does not verify write (e.g. CD ROMS).

      Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      It is highly unusual for a non privileged user to mount file systems to the system. While tracking mount commands gives the system administrator evidence that external media may have been mounted (based on a review of the source of the mount and confirming it's an external media type), it does not conclusively indicate that data was exported to the media. System administrators who wish to determine if data were exported, would also have to track successful open , creat and truncate system calls requiring write access to a file under the mount point of the external media file system. This could give a fair indication that a write occurred. The only way to truly prove it, would be to track successful writes to the external media. Tracking write system calls could quickly fill up the audit log and is not recommended. Recommendations on configuration options to track data export to media is beyond the scope of this document."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-mounts.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-mounts.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
      -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+mount[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=mounts$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "OS is 64 bit"
          cmd         : "/bin/uname -m"
          expect      : "^x86_64$"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "4.1.12 Ensure successful file system mounts are collected - 64-bit"
          info        : "Monitor the use of the mount system call. The mount (and umount ) system call controls the mounting and unmounting of file systems. The parameters below configure the system to create an audit record when the mount system call is used by a non-privileged user

        Note:

        This tracks successful and unsuccessful mount commands. File system mounts do not have to come from external media and this action still does not verify write (e.g. CD ROMS).

        Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        It is highly unusual for a non privileged user to mount file systems to the system. While tracking mount commands gives the system administrator evidence that external media may have been mounted (based on a review of the source of the mount and confirming it's an external media type), it does not conclusively indicate that data was exported to the media. System administrators who wish to determine if data were exported, would also have to track successful open , creat and truncate system calls requiring write access to a file under the mount point of the external media file system. This could give a fair indication that a write occurred. The only way to truly prove it, would be to track successful writes to the external media. Tracking write system calls could quickly fill up the audit log and is not recommended. Recommendations on configuration options to track data export to media is beyond the scope of this document."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-mounts.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-mounts.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
        -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          file        : "/etc/audit/audit.rules"
          regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+mount[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+mounts[\\s]*$"
          expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+mount[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+mounts[\\s]*$"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.1.12 Ensure successful file system mounts are collected - auditctl (64-bit)"
          info        : "Monitor the use of the mount system call. The mount (and umount ) system call controls the mounting and unmounting of file systems. The parameters below configure the system to create an audit record when the mount system call is used by a non-privileged user

        Note:

        This tracks successful and unsuccessful mount commands. File system mounts do not have to come from external media and this action still does not verify write (e.g. CD ROMS).

        Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        It is highly unusual for a non privileged user to mount file systems to the system. While tracking mount commands gives the system administrator evidence that external media may have been mounted (based on a review of the source of the mount and confirming it's an external media type), it does not conclusively indicate that data was exported to the media. System administrators who wish to determine if data were exported, would also have to track successful open , creat and truncate system calls requiring write access to a file under the mount point of the external media file system. This could give a fair indication that a write occurred. The only way to truly prove it, would be to track successful writes to the external media. Tracking write system calls could quickly fill up the audit log and is not recommended. Recommendations on configuration options to track data export to media is beyond the scope of this document."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-mounts.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-mounts.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
        -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+mount[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=mounts$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
          expect      : "pass"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "4.1.12 Ensure successful file system mounts are collected - 64-bit"
          info        : "Monitor the use of the mount system call. The mount (and umount ) system call controls the mounting and unmounting of file systems. The parameters below configure the system to create an audit record when the mount system call is used by a non-privileged user

        Note:

        This tracks successful and unsuccessful mount commands. File system mounts do not have to come from external media and this action still does not verify write (e.g. CD ROMS).

        Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        It is highly unusual for a non privileged user to mount file systems to the system. While tracking mount commands gives the system administrator evidence that external media may have been mounted (based on a review of the source of the mount and confirming it's an external media type), it does not conclusively indicate that data was exported to the media. System administrators who wish to determine if data were exported, would also have to track successful open , creat and truncate system calls requiring write access to a file under the mount point of the external media file system. This could give a fair indication that a write occurred. The only way to truly prove it, would be to track successful writes to the external media. Tracking write system calls could quickly fill up the audit log and is not recommended. Recommendations on configuration options to track data export to media is beyond the scope of this document."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-mounts.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-mounts.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
        -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.12 Ensure successful file system mounts are collected - auditctl (64-bit)"
          info        : "Monitor the use of the mount system call. The mount (and umount ) system call controls the mounting and unmounting of file systems. The parameters below configure the system to create an audit record when the mount system call is used by a non-privileged user

        Note:

        This tracks successful and unsuccessful mount commands. File system mounts do not have to come from external media and this action still does not verify write (e.g. CD ROMS).

        Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        It is highly unusual for a non privileged user to mount file systems to the system. While tracking mount commands gives the system administrator evidence that external media may have been mounted (based on a review of the source of the mount and confirming it's an external media type), it does not conclusively indicate that data was exported to the media. System administrators who wish to determine if data were exported, would also have to track successful open , creat and truncate system calls requiring write access to a file under the mount point of the external media file system. This could give a fair indication that a write occurred. The only way to truly prove it, would be to track successful writes to the external media. Tracking write system calls could quickly fill up the audit log and is not recommended. Recommendations on configuration options to track data export to media is beyond the scope of this document."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-mounts.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-mounts.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
        -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts

        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>
      </else>
    </if>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.13 Ensure file deletion events by users are collected - 32-bit"
      info        : "Monitor the use of system calls associated with the deletion or renaming of files and file attributes. This configuration statement sets up monitoring for the unlink (remove a file), unlinkat (remove a file attribute), rename (rename a file) and renameat (rename a file attribute) system calls and tags them with the identifier 'delete'.

      Note:

      At a minimum, configure the audit system to collect file deletion events for all users and root.

      Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

      Rationale:

      Monitoring these calls from non-privileged users could provide a system administrator with evidence that inappropriate removal of files and file attributes associated with protected files is occurring. While this audit option will look at all events, system administrators will want to look for specific privileged files that are being deleted or altered."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-delete.rules
      Add the following lines:

      -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete

      For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
      Example: vi /etc/audit/rules.d/50-delete.rules
      Add the following lines:

      -a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
      -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete

      Additional Information:

      Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

      # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

      If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.13.1,800-53|SC-7(10),800-53r5|SC-7(10),CN-L3|8.1.10.6(j),CSCv7|13,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(10),LEVEL|2A,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|33.1"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+unlink[\\s]+-S[\\s]+unlinkat[\\s]+-S[\\s]+rename[\\s]+-S[\\s]+renameat[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+delete[\\s]*$"
      expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+unlink[\\s]+-S[\\s]+unlinkat[\\s]+-S[\\s]+rename[\\s]+-S[\\s]+renameat[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+delete[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.13 Ensure file deletion events by users are collected - auditctl (32-bit)"
      info        : "Monitor the use of system calls associated with the deletion or renaming of files and file attributes. This configuration statement sets up monitoring for the unlink (remove a file), unlinkat (remove a file attribute), rename (rename a file) and renameat (rename a file attribute) system calls and tags them with the identifier 'delete'.

        Note:

        At a minimum, configure the audit system to collect file deletion events for all users and root.

        Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

        Rationale:

        Monitoring these calls from non-privileged users could provide a system administrator with evidence that inappropriate removal of files and file attributes associated with protected files is occurring. While this audit option will look at all events, system administrators will want to look for specific privileged files that are being deleted or altered."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-delete.rules
        Add the following lines:

        -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete

        For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
        Example: vi /etc/audit/rules.d/50-delete.rules
        Add the following lines:

        -a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
        -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete

        Additional Information:

        Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

        # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

        If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
      reference   : "800-171|3.13.1,800-53|SC-7(10),800-53r5|SC-7(10),CN-L3|8.1.10.6(j),CSCv7|13,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(10),LEVEL|2A,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|33.1"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+(?=.*rename)(?=.*unlink)(?=.*unlinkat)(?=.*renameat).*-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=delete$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "OS is 64 bit"
          cmd         : "/bin/uname -m"
          expect      : "^x86_64$"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "4.1.13 Ensure file deletion events by users are collected - 64-bit"
          info        : "Monitor the use of system calls associated with the deletion or renaming of files and file attributes. This configuration statement sets up monitoring for the unlink (remove a file), unlinkat (remove a file attribute), rename (rename a file) and renameat (rename a file attribute) system calls and tags them with the identifier 'delete'.

            Note:

            At a minimum, configure the audit system to collect file deletion events for all users and root.

            Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Monitoring these calls from non-privileged users could provide a system administrator with evidence that inappropriate removal of files and file attributes associated with protected files is occurring. While this audit option will look at all events, system administrators will want to look for specific privileged files that are being deleted or altered."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-delete.rules
            Add the following lines:

            -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-delete.rules
            Add the following lines:

            -a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
            -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete

            Additional Information:

            Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

            # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

            If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.13.1,800-53|SC-7(10),800-53r5|SC-7(10),CN-L3|8.1.10.6(j),CSCv7|13,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(10),LEVEL|2A,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|33.1"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          file        : "/etc/audit/audit.rules"
          regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+unlink[\\s]+-S[\\s]+unlinkat[\\s]+-S[\\s]+rename[\\s]+-S[\\s]+renameat[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+delete[\\s]*$"
          expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+unlink[\\s]+-S[\\s]+unlinkat[\\s]+-S[\\s]+rename[\\s]+-S[\\s]+renameat[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=4294967295[\\s]+-k[\\s]+delete[\\s]*$"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.1.13 Ensure file deletion events by users are collected - auditctl (64-bit)"
          info        : "Monitor the use of system calls associated with the deletion or renaming of files and file attributes. This configuration statement sets up monitoring for the unlink (remove a file), unlinkat (remove a file attribute), rename (rename a file) and renameat (rename a file attribute) system calls and tags them with the identifier 'delete'.

            Note:

            At a minimum, configure the audit system to collect file deletion events for all users and root.

            Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Monitoring these calls from non-privileged users could provide a system administrator with evidence that inappropriate removal of files and file attributes associated with protected files is occurring. While this audit option will look at all events, system administrators will want to look for specific privileged files that are being deleted or altered."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-delete.rules
            Add the following lines:

            -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-delete.rules
            Add the following lines:

            -a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
            -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete

            Additional Information:

            Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

            # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

            If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.13.1,800-53|SC-7(10),800-53r5|SC-7(10),CN-L3|8.1.10.6(j),CSCv7|13,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(10),LEVEL|2A,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|33.1"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+(?=.*rename)(?=.*unlink)(?=.*unlinkat)(?=.*renameat).*-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=delete$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
          expect      : "pass"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "4.1.13 Ensure file deletion events by users are collected - 64-bit"
          info        : "Monitor the use of system calls associated with the deletion or renaming of files and file attributes. This configuration statement sets up monitoring for the unlink (remove a file), unlinkat (remove a file attribute), rename (rename a file) and renameat (rename a file attribute) system calls and tags them with the identifier 'delete'.

              Note:

              At a minimum, configure the audit system to collect file deletion events for all users and root.

              Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

              Rationale:

              Monitoring these calls from non-privileged users could provide a system administrator with evidence that inappropriate removal of files and file attributes associated with protected files is occurring. While this audit option will look at all events, system administrators will want to look for specific privileged files that are being deleted or altered."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
              Example: vi /etc/audit/rules.d/50-delete.rules
              Add the following lines:

              -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete

              For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
              Example: vi /etc/audit/rules.d/50-delete.rules
              Add the following lines:

              -a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
              -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete

              Additional Information:

              Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

              # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

              If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.13.1,800-53|SC-7(10),800-53r5|SC-7(10),CN-L3|8.1.10.6(j),CSCv7|13,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(10),LEVEL|2A,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|33.1"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.13 Ensure file deletion events by users are collected - auditctl (64-bit)"
          info        : "Monitor the use of system calls associated with the deletion or renaming of files and file attributes. This configuration statement sets up monitoring for the unlink (remove a file), unlinkat (remove a file attribute), rename (rename a file) and renameat (rename a file attribute) system calls and tags them with the identifier 'delete'.

              Note:

              At a minimum, configure the audit system to collect file deletion events for all users and root.

              Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

              Rationale:

              Monitoring these calls from non-privileged users could provide a system administrator with evidence that inappropriate removal of files and file attributes associated with protected files is occurring. While this audit option will look at all events, system administrators will want to look for specific privileged files that are being deleted or altered."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
              Example: vi /etc/audit/rules.d/50-delete.rules
              Add the following lines:

              -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete

              For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
              Example: vi /etc/audit/rules.d/50-delete.rules
              Add the following lines:

              -a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
              -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete

              Additional Information:

              Systems may have been customized to change the default UID_MIN. To confirm the UID_MIN for your system, run the following command:

              # awk '/^\s*UID_MIN/{print $2}' /etc/login.defs

              If your systems' UID_MIN is not 1000, replace audit>=1000 with audit>=<UID_MIN for your system> in the Audit and Remediation procedures."
          reference   : "800-171|3.13.1,800-53|SC-7(10),800-53r5|SC-7(10),CN-L3|8.1.10.6(j),CSCv7|13,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7(10),LEVEL|2A,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,TBA-FIISB|33.1"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>
      </else>
    </if>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.14 Ensure changes to system administration scope (sudoers) is collected - sudoers"
      info        : "Monitor scope changes for system administrations. If the system has been properly configured to force system administrators to log in as themselves first and then use the sudo command to execute privileged commands, it is possible to monitor changes in scope. The file /etc/sudoers will be written to when the file or its attributes have changed. The audit records will be tagged with the identifier 'scope.'

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Changes in the /etc/sudoers file can indicate that an unauthorized change has been made to scope of system administrator activity."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-scope.rules
            Add the following lines:

            -w /etc/sudoers -p wa -k scope
            -w /etc/sudoers.d/ -p wa -k scope"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/etc\\/sudoers[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+scope[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+/etc\\/sudoers[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+scope[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.14 Ensure changes to system administration scope (sudoers) is collected - auditctl sudoers"
      info        : "Monitor scope changes for system administrations. If the system has been properly configured to force system administrators to log in as themselves first and then use the sudo command to execute privileged commands, it is possible to monitor changes in scope. The file /etc/sudoers will be written to when the file or its attributes have changed. The audit records will be tagged with the identifier 'scope.'

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Changes in the /etc/sudoers file can indicate that an unauthorized change has been made to scope of system administrator activity."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-scope.rules
            Add the following lines:

            -w /etc/sudoers -p wa -k scope
            -w /etc/sudoers.d/ -p wa -k scope"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+\\/etc\\/sudoers[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+scope$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.14 Ensure changes to system administration scope (sudoers) is collected - sudoers.d"
      info        : "Monitor scope changes for system administrations. If the system has been properly configured to force system administrators to log in as themselves first and then use the sudo command to execute privileged commands, it is possible to monitor changes in scope. The file /etc/sudoers will be written to when the file or its attributes have changed. The audit records will be tagged with the identifier 'scope.'

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Changes in the /etc/sudoers file can indicate that an unauthorized change has been made to scope of system administrator activity."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-scope.rules
            Add the following lines:

            -w /etc/sudoers -p wa -k scope
            -w /etc/sudoers.d/ -p wa -k scope"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+\\/etc\\/sudoers\\.d\\/?[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+scope[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+\\/etc\\/sudoers\\.d\\/?[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+scope[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.14 Ensure changes to system administration scope (sudoers) is collected - auditctl sudoers.d"
      info        : "Monitor scope changes for system administrations. If the system has been properly configured to force system administrators to log in as themselves first and then use the sudo command to execute privileged commands, it is possible to monitor changes in scope. The file /etc/sudoers will be written to when the file or its attributes have changed. The audit records will be tagged with the identifier 'scope.'

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Changes in the /etc/sudoers file can indicate that an unauthorized change has been made to scope of system administrator activity."
      solution    : "Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-scope.rules
            Add the following lines:

            -w /etc/sudoers -p wa -k scope
            -w /etc/sudoers.d/ -p wa -k scope"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.8,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+\\/etc\\/sudoers\\.d\\/?[\\s]+-p[\\s]+wa[\\s]+-k[\\s]+scope$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.15 Ensure system administrator command executions (sudo) are collected - b32"
      info        : "sudo provides users with temporary elevated privileges to perform operations. Monitor the administrator with temporary elevated privileges and the operation(s) they performed.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            creating an audit log of administrators with temporary elevated privileges and the operation(s) they performed is essential to reporting. Administrators will want to correlate the events written to the audit trail with the records written to sudo logfile to verify if unauthorized commands have been executed."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
            Example: 'vi /etc/audit/rules.d/50-actions.rules
            Add the following line:

            -a exit,always -F arch=b32 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
            Example: vi /etc/audit/rules.d/50-actions.rules
            Add the following lines:

            -a always,exit -F arch=b64 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions
            -a always,exit -F arch=b32 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-a (exit,always|always,exit)[\\s]+-F[\\s]+arch=b32[\\s]+-C[\\s]+euid!=uid[\\s]+-F[\\s]+euid=0[\\s]+-Fauid>=1000[\\s]+-F[\\s]+auid!=4294967295[\\s]+-S[\\s]+execve[\\s]+-k[\\s]+actions"
      expect      : "^[\\s]*-a (exit,always|always,exit)[\\s]+-F[\\s]+arch=b32[\\s]+-C[\\s]+euid!=uid[\\s]+-F[\\s]+euid=0[\\s]+-Fauid>=1000[\\s]+-F[\\s]+auid!=4294967295[\\s]+-S[\\s]+execve[\\s]+-k[\\s]+actions"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.15 Ensure system administrator command executions (sudo) are collected - b32 auditctl"
      info        : "sudo provides users with temporary elevated privileges to perform operations. Monitor the administrator with temporary elevated privileges and the operation(s) they performed.

              Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

              Rationale:

              creating an audit log of administrators with temporary elevated privileges and the operation(s) they performed is essential to reporting. Administrators will want to correlate the events written to the audit trail with the records written to sudo logfile to verify if unauthorized commands have been executed."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
              Example: 'vi /etc/audit/rules.d/50-actions.rules
              Add the following line:

              -a exit,always -F arch=b32 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions

              For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
              Example: vi /etc/audit/rules.d/50-actions.rules
              Add the following lines:

              -a always,exit -F arch=b64 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions
              -a always,exit -F arch=b32 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+execve[\\s]+-C[\\s]+uid!=euid[\\s]+-F[\\s]+euid=0[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=actions$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "OS is 64 bit"
          cmd         : "/bin/uname -m"
          expect      : "^x86_64$"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "4.1.15 Ensure system administrator command executions (sudo) are collected - b64"
          info        : "sudo provides users with temporary elevated privileges to perform operations. Monitor the administrator with temporary elevated privileges and the operation(s) they performed.

                Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

                Rationale:

                creating an audit log of administrators with temporary elevated privileges and the operation(s) they performed is essential to reporting. Administrators will want to correlate the events written to the audit trail with the records written to sudo logfile to verify if unauthorized commands have been executed."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
                Example: 'vi /etc/audit/rules.d/50-actions.rules
                Add the following line:

                -a exit,always -F arch=b32 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions

                For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
                Example: vi /etc/audit/rules.d/50-actions.rules
                Add the following lines:

                -a always,exit -F arch=b64 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions
                -a always,exit -F arch=b32 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions"
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          file        : "/etc/audit/audit.rules"
          regex       : "^[\\s]*-a (exit,always|always,exit)[\\s]+-F[\\s]+arch=b64[\\s]+-C[\\s]+euid!=uid[\\s]+-F[\\s]+euid=0[\\s]+-Fauid>=1000[\\s]+-F[\\s]+auid!=4294967295[\\s]+-S[\\s]+execve[\\s]+-k[\\s]+actions"
          expect      : "^[\\s]*-a (exit,always|always,exit)[\\s]+-F[\\s]+arch=b64[\\s]+-C[\\s]+euid!=uid[\\s]+-F[\\s]+euid=0[\\s]+-Fauid>=1000[\\s]+-F[\\s]+auid!=4294967295[\\s]+-S[\\s]+execve[\\s]+-k[\\s]+actions"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.1.15 Ensure system administrator command executions (sudo) are collected - b64 auditctl"
          info        : "sudo provides users with temporary elevated privileges to perform operations. Monitor the administrator with temporary elevated privileges and the operation(s) they performed.

                Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

                Rationale:

                creating an audit log of administrators with temporary elevated privileges and the operation(s) they performed is essential to reporting. Administrators will want to correlate the events written to the audit trail with the records written to sudo logfile to verify if unauthorized commands have been executed."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
                Example: 'vi /etc/audit/rules.d/50-actions.rules
                Add the following line:

                -a exit,always -F arch=b32 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions

                For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
                Example: vi /etc/audit/rules.d/50-actions.rules
                Add the following lines:

                -a always,exit -F arch=b64 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions
                -a always,exit -F arch=b32 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions"
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          cmd         : "/sbin/auditctl -l | /bin/grep -P '^[\\s]*-a[\\s]+(exit,always|always,exit)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+execve[\\s]+-C[\\s]+uid!=euid[\\s]+-F[\\s]+euid=0[\\s]+-F[\\s]+auid>=@MIN_UID@[\\s]+-F[\\s]+auid!=-1[\\s]+-F[\\s]+key=actions$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
          expect      : "pass"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "4.1.15 Ensure system administrator command executions (sudo) are collected - b64"
          info        : "sudo provides users with temporary elevated privileges to perform operations. Monitor the administrator with temporary elevated privileges and the operation(s) they performed.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            creating an audit log of administrators with temporary elevated privileges and the operation(s) they performed is essential to reporting. Administrators will want to correlate the events written to the audit trail with the records written to sudo logfile to verify if unauthorized commands have been executed."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
            Example: 'vi /etc/audit/rules.d/50-actions.rules
            Add the following line:

            -a exit,always -F arch=b32 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
            Example: vi /etc/audit/rules.d/50-actions.rules
            Add the following lines:

            -a always,exit -F arch=b64 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions
            -a always,exit -F arch=b32 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions"
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.15 Ensure system administrator command executions (sudo) are collected - b64 auditctl"
          info        : "sudo provides users with temporary elevated privileges to perform operations. Monitor the administrator with temporary elevated privileges and the operation(s) they performed.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            creating an audit log of administrators with temporary elevated privileges and the operation(s) they performed is essential to reporting. Administrators will want to correlate the events written to the audit trail with the records written to sudo logfile to verify if unauthorized commands have been executed."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
            Example: 'vi /etc/audit/rules.d/50-actions.rules
            Add the following line:

            -a exit,always -F arch=b32 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules:
            Example: vi /etc/audit/rules.d/50-actions.rules
            Add the following lines:

            -a always,exit -F arch=b64 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions
            -a always,exit -F arch=b32 -C euid!=uid -F euid=0 -Fauid>=1000 -F auid!=4294967295 -S execve -k actions"
          reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53r5|AU-3,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|4.9,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>
      </else>
    </if>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.16 Ensure kernel module loading and unloading is collected - insmod"
      info        : "Monitor the loading and unloading of kernel modules. The programs insmod (install a kernel module), rmmod (remove a kernel module), and modprobe (a more sophisticated program to load and unload modules, as well as some other features) control loading and unloading of modules. The init_module (load a module) and delete_module (delete a module) system calls control loading and unloading of modules. Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of 'modules'.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b32 -S init_module -S delete_module -k modules

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+\\/sbin\\/insmod[\\s]+-p[\\s]+x[\\s]+-k[\\s]+modules[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+\\/sbin\\/insmod[\\s]+-p[\\s]+x[\\s]+-k[\\s]+modules[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.16 Ensure kernel module loading and unloading is collected - auditctl insmod"
      info        : "Monitor the loading and unloading of kernel modules. The programs insmod (install a kernel module), rmmod (remove a kernel module), and modprobe (a more sophisticated program to load and unload modules, as well as some other features) control loading and unloading of modules. The init_module (load a module) and delete_module (delete a module) system calls control loading and unloading of modules. Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of 'modules'.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b32 -S init_module -S delete_module -k modules

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+\\/sbin\\/insmod[\\s]+-p[\\s]+x[\\s]+-k[\\s]+modules$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.16 Ensure kernel module loading and unloading is collected - rmmod"
      info        : "Monitor the loading and unloading of kernel modules. The programs insmod (install a kernel module), rmmod (remove a kernel module), and modprobe (a more sophisticated program to load and unload modules, as well as some other features) control loading and unloading of modules. The init_module (load a module) and delete_module (delete a module) system calls control loading and unloading of modules. Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of 'modules'.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b32 -S init_module -S delete_module -k modules

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+/sbin/rmmod[\\s]+-p[\\s]+x[\\s]+-k[\\s]+modules[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+/sbin/rmmod[\\s]+-p[\\s]+x[\\s]+-k[\\s]+modules[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.16 Ensure kernel module loading and unloading is collected - auditctl rmmod"
      info        : "Monitor the loading and unloading of kernel modules. The programs insmod (install a kernel module), rmmod (remove a kernel module), and modprobe (a more sophisticated program to load and unload modules, as well as some other features) control loading and unloading of modules. The init_module (load a module) and delete_module (delete a module) system calls control loading and unloading of modules. Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of 'modules'.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b32 -S init_module -S delete_module -k modules

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+\\/sbin\\/rmmod[\\s]+-p[\\s]+x[\\s]+-k[\\s]+modules$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.16 Ensure kernel module loading and unloading is collected - modprobe"
      info        : "Monitor the loading and unloading of kernel modules. The programs insmod (install a kernel module), rmmod (remove a kernel module), and modprobe (a more sophisticated program to load and unload modules, as well as some other features) control loading and unloading of modules. The init_module (load a module) and delete_module (delete a module) system calls control loading and unloading of modules. Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of 'modules'.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b32 -S init_module -S delete_module -k modules

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-w[\\s]+\\/sbin\\/modprobe[\\s]+-p[\\s]+x[\\s]+-k[\\s]+modules[\\s]*$"
      expect      : "^[\\s]*-w[\\s]+\\/sbin\\/modprobe[\\s]+-p[\\s]+x[\\s]+-k[\\s]+modules[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.16 Ensure kernel module loading and unloading is collected - auditctl modprobe"
      info        : "Monitor the loading and unloading of kernel modules. The programs insmod (install a kernel module), rmmod (remove a kernel module), and modprobe (a more sophisticated program to load and unload modules, as well as some other features) control loading and unloading of modules. The init_module (load a module) and delete_module (delete a module) system calls control loading and unloading of modules. Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of 'modules'.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b32 -S init_module -S delete_module -k modules

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-w[\\s]+\\/sbin\\/modprobe[\\s]+-p[\\s]+x[\\s]+-k[\\s]+modules$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "4.1.16 Ensure kernel module loading and unloading is collected - init_module/delete_module (32-bit)"
      info        : "Monitor the loading and unloading of kernel modules. The programs insmod (install a kernel module), rmmod (remove a kernel module), and modprobe (a more sophisticated program to load and unload modules, as well as some other features) control loading and unloading of modules. The init_module (load a module) and delete_module (delete a module) system calls control loading and unloading of modules. Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of 'modules'.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b32 -S init_module -S delete_module -k modules

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/audit/audit.rules"
      regex       : "^[\\s]*-a[\\s]+(exit,always|always,exit)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+init_module[\\s]+-S[\\s]+delete_module[\\s]+-k[\\s]+modules[\\s]*$"
      expect      : "^[\\s]*-a[\\s]+(exit,always|always,exit)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+init_module[\\s]+-S[\\s]+delete_module[\\s]+-k[\\s]+modules[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.1.16 Ensure kernel module loading and unloading is collected - auditctl init_module/delete_module (32-bit)"
      info        : "Monitor the loading and unloading of kernel modules. The programs insmod (install a kernel module), rmmod (remove a kernel module), and modprobe (a more sophisticated program to load and unload modules, as well as some other features) control loading and unloading of modules. The init_module (load a module) and delete_module (delete a module) system calls control loading and unloading of modules. Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of 'modules'.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules."
      solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b32 -S init_module -S delete_module -k modules

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
      reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b32[\\s]+-S[\\s]+(?=.*init_module)(?=.*delete_module).*-F[\\s]+key=modules$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "OS is 64 bit"
          cmd         : "/bin/uname -m"
          expect      : "^x86_64$"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "4.1.16 Ensure kernel module loading and unloading is collected - init_module/delete_module  (64-bit)"
          info        : "Monitor the loading and unloading of kernel modules. The programs insmod (install a kernel module), rmmod (remove a kernel module), and modprobe (a more sophisticated program to load and unload modules, as well as some other features) control loading and unloading of modules. The init_module (load a module) and delete_module (delete a module) system calls control loading and unloading of modules. Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of 'modules'.

              Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

              Rationale:

              Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
              Example: vi /etc/audit/rules.d/50-modules.rules
              Add the following lines:

              -w /sbin/insmod -p x -k modules
              -w /sbin/rmmod -p x -k modules
              -w /sbin/modprobe -p x -k modules
              -a always,exit -F arch=b32 -S init_module -S delete_module -k modules

              For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
              Example: vi /etc/audit/rules.d/50-modules.rules
              Add the following lines:

              -w /sbin/insmod -p x -k modules
              -w /sbin/rmmod -p x -k modules
              -w /sbin/modprobe -p x -k modules
              -a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          file        : "/etc/audit/audit.rules"
          regex       : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+init_module[\\s]+-S[\\s]+delete_module[\\s]+-k[\\s]+modules[\\s]*$"
          expect      : "^[\\s]*-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+init_module[\\s]+-S[\\s]+delete_module[\\s]+-k[\\s]+modules[\\s]*$"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "4.1.16 Ensure kernel module loading and unloading is collected - auditctl init_module/delete_module (64-bit)"
          info        : "Monitor the loading and unloading of kernel modules. The programs insmod (install a kernel module), rmmod (remove a kernel module), and modprobe (a more sophisticated program to load and unload modules, as well as some other features) control loading and unloading of modules. The init_module (load a module) and delete_module (delete a module) system calls control loading and unloading of modules. Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of 'modules'.

              Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

              Rationale:

              Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
              Example: vi /etc/audit/rules.d/50-modules.rules
              Add the following lines:

              -w /sbin/insmod -p x -k modules
              -w /sbin/rmmod -p x -k modules
              -w /sbin/modprobe -p x -k modules
              -a always,exit -F arch=b32 -S init_module -S delete_module -k modules

              For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
              Example: vi /etc/audit/rules.d/50-modules.rules
              Add the following lines:

              -w /sbin/insmod -p x -k modules
              -w /sbin/rmmod -p x -k modules
              -w /sbin/modprobe -p x -k modules
              -a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
          cmd         : "/sbin/auditctl -l | /bin/grep -P '^-a[\\s]+(always,exit|exit,always)[\\s]+-F[\\s]+arch=b64[\\s]+-S[\\s]+(?=.*init_module)(?=.*delete_module).*-F[\\s]+key=modules$' | /usr/bin/awk '{print} END {if (NR != 0) print \"pass\" ; else print \"fail\"}'"
          expect      : "pass"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "4.1.16 Ensure kernel module loading and unloading is collected - init_module/delete_module  (64-bit)"
          info        : "Monitor the loading and unloading of kernel modules. The programs insmod (install a kernel module), rmmod (remove a kernel module), and modprobe (a more sophisticated program to load and unload modules, as well as some other features) control loading and unloading of modules. The init_module (load a module) and delete_module (delete a module) system calls control loading and unloading of modules. Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of 'modules'.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b32 -S init_module -S delete_module -k modules

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>

        <report type:"PASSED">
          description : "4.1.16 Ensure kernel module loading and unloading is collected - auditctl init_module/delete_module (64-bit)"
          info        : "Monitor the loading and unloading of kernel modules. The programs insmod (install a kernel module), rmmod (remove a kernel module), and modprobe (a more sophisticated program to load and unload modules, as well as some other features) control loading and unloading of modules. The init_module (load a module) and delete_module (delete a module) system calls control loading and unloading of modules. Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of 'modules'.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules."
          solution    : "For 32 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b32 -S init_module -S delete_module -k modules

            For 64 bit systems Edit or create a file in the /etc/audit/rules.d/ directory ending in .rules
            Example: vi /etc/audit/rules.d/50-modules.rules
            Add the following lines:

            -w /sbin/insmod -p x -k modules
            -w /sbin/rmmod -p x -k modules
            -w /sbin/modprobe -p x -k modules
            -a always,exit -F arch=b64 -S init_module -S delete_module -k modules"
          reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSCv7|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,LEVEL|2A,SWIFT-CSCv1|2.3"
          see_also    : "https://workbench.cisecurity.org/files/3219"
        </report>
      </else>
    </if>

    <custom_item>
      system        : "Linux"
      type          : CMD_EXEC
      description   : "4.1.17 Ensure the audit configuration is immutable"
      info          : "Set system audit so that audit rules cannot be modified with auditctl. Setting the flag '-e 2' forces audit to be put in immutable mode. Audit changes can only be made on system reboot.

            Note: Reloading the auditd config to set active settings requires the auditd service to be restarted, and may require a system reboot.

            Rationale:

            In immutable mode, unauthorized users cannot execute changes to the audit system to potentially hide malicious activity and then put the audit rules back. Users would most likely notice a system reboot and that could alert administrators of an attempt to make unauthorized audit changes."
      solution      : "Edit or create the file /etc/audit/rules.d/99-finalize.rules and add the line

            -e 2

            at the end of the file"
      reference     : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also      : "https://workbench.cisecurity.org/files/3219"
      cmd           : "/bin/grep \"^\s*[^#]\" /etc/audit/rules.d/*.rules | /usr/bin/tail -1"
      expect        : "^[\\s]*-e[\\s]+2[\\s]*$"
      dont_echo_cmd : YES
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "5.3.7 Ensure SSH X11 forwarding is disabled"
      info        : "The X11Forwarding parameter provides the ability to tunnel X11 traffic through an existing SSH shell session to enable remote graphic connections.

            Rationale:

            Disable X11 forwarding unless there is an operational requirement to use X11 applications directly. There is a small risk that the remote X11 servers of users who are logged in via SSH with X11 forwarding could be compromised by other users on the X11 server. Note that even if X11 forwarding is disabled, users can always install their own forwarders.

            Impact:

            X11 programs on the server will not be able to be forwarded to a ssh-client display."
      solution    : "Edit the /etc/ssh/sshd_config file to set the parameter as follows:

            X11Forwarding no




            Default Value:

            X11Forwarding yes"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|1A,LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/ssh/sshd_config"
      regex       : "^[\\s]*(?i)X11Forwarding(?-i)[\\s]"
      expect      : "^[\\s]*(?i)X11Forwarding(?-i)[\\s]+no[\\s]*$"
    </custom_item>

    <custom_item>
      system      : "Linux"
      type        : FILE_CONTENT_CHECK
      description : "5.3.21 Ensure SSH AllowTcpForwarding is disabled"
      info        : "SSH port forwarding is a mechanism in SSH for tunneling application ports from the client to the server, or servers to clients. It can be used for adding encryption to legacy applications, going through firewalls, and some system administrators and IT professionals use it for opening backdoors into the internal network from their home machines

            Rationale:

            Leaving port forwarding enabled can expose the organization to security risks and back-doors.

            SSH connections are protected with strong encryption. This makes their contents invisible to most deployed network monitoring and traffic filtering solutions. This invisibility carries considerable risk potential if it is used for malicious purposes such as data exfiltration. Cybercriminals or malware could exploit SSH to hide their unauthorized communications, or to exfiltrate stolen data from the target network

            Impact:

            SSH tunnels are widely used in many corporate environments that employ mainframe systems as their application backends. In those environments the applications themselves may have very limited native support for security. By utilizing tunneling, compliance with SOX, HIPAA, PCI-DSS, and other standards can be achieved without having to modify the applications."
      solution    : "Edit the /etc/ssh/sshd_config file to set the parameter as follows:

            AllowTcpForwarding no

            Default Value:

            AllowTcpForwarding yes"
      reference   : "800-171|3.12.3,800-171|3.14.6,800-171|3.14.7,800-53|CA-7,800-53|SI-4,800-53r5|CA-7,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSCv7|13.5,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-2,CSF|DE.CM-3,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-1,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-7,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,CSF|RS.MI-3,GDPR|32.1.b,GDPR|32.1.d,GDPR|32.2,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|CA-7,ITSG-33|SI-4,LEVEL|2A,NESA|M1.2.2,NESA|M5.3.1,NESA|M5.4.1,NESA|M6.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3219"
      file        : "/etc/ssh/sshd_config"
      regex       : "^[\\s]*AllowTcpForwarding[\\s]"
      expect      : "^[\\s]*AllowTcpForwarding[\\s]+no[\\s]*$"
    </custom_item>

    <report type:"WARNING">
      description : "6.1.1 Audit system file permissions"
      info        : "The Debian package manager has a number of useful options. One of these, the --verify option, can be used to verify that system packages are correctly installed. The --verify option can be used to verify a particular package or to verify all system packages. If no output is returned, the package is installed correctly. The following table describes the meaning of output from the verify option:

Code   Meaning

S      File size differs.

M      File mode differs (includes permissions and file type).

5      The MD5 checksum differs.

D      The major and minor version numbers differ on a device file.

L      A mismatch occurs in a link.

U      The file ownership differs.

G      The file group owner differs.

T      The file time (mtime) differs.

The dpkg -S command can be used to determine which package a particular file belongs to. For example the following command determines which package the /bin/bash file belongs to:

# dpkg -S /bin/bash



bash: /bin/bash

To verify the settings for the package that controls the /bin/bash file, run the following:

# dpkg --verify bash



??5?????? c /etc/bash.bashrc

Notes:

Since packages and important files may change with new updates and releases, it is recommended to verify everything, not just a finite list of files. This can be a time consuming task and results may depend on site policy therefore it is not a assessed benchmark item, but is provided for those interested in additional security measures.

Some of the recommendations of this benchmark alter the state of files audited by this recommendation. The audit command will alert for all changes to a file permissions even if the new state is more secure than the default.

Rationale:

It is important to confirm that packaged system files and directories are maintained with the permissions they were intended to have from the OS vendor.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Correct any discrepancies found and rerun the audit until output is clean or risk is mitigated or accepted."
      reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2M,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/3219"
    </report>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_Ubuntu_16.04_LTS_Server_v2.0.0_L2.audit from CIS Ubuntu 16.04 LTS Server Benchmark L2 v2.0.0"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      see_also    : "https://workbench.cisecurity.org/files/3219"
    </report>
  </else>
</if>

</check_type>
