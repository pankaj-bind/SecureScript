#TRUSTED 33c04c39d78d67c73957f1d0e56d7cc52c728f533f25cccbaf520120666f94b2d1fee395586d4dce49ebf3dbbaf5531acadaaf0b62a84301ee8ac9effd9905a38d06c20a62a1717c606a2371d72767806498356c28b6031f937f129428bccd3162df48935b015c98f85e6942328aef599d3617f3dc318ce43ccef0de5f3501518ffaede727a44898a6298cda77eded6b1916a273de274def96972ac9bedff01977e739d738d1c974afa7130f1dfda6fed613bdf20e56cc401193130ffaee4dc1b56e3afed10d0f1452594ea7fec64c4f67394420d69dfd560adafcab8addfa34dab7a04efaaefd9dfccd3e28f15b92d65a37db36e939f35e1ae37b0abe222372a628fcc80d5953c3852f1a1c38da6ce08f9eaf750aa390090a4ab07001d2821b8ca3cb866a69b25baf83c01583e2150cb81dd3b06797a91aecb7604bf7a37ab3e62c1cdde6e752e87111e4057e7328623e2a499c575fff8b1bf7347dd048d8dc89d0c91c9bd94b48da18f36e97fac6cfa9adb6dd6f043ed7837fc176485ad75dd13f969df7286ff46173b3d5ebd2a1c042e5c2171df8b9864c601b8a34921a412feadf043217f8bddf745462e8a234cedf7c189445d780bf094448272027b78a8f2663f2b53e47cb57872edb43647698e82da8b521b31bb953547fa24a24d8fa58604471f38e1f711840db0990b918c2d6b5f1563379bbf599c0f03852a60472
#TRUST-RSA-SHA256 3e6bec2c428c35551c72b1fdde421b79a573be42c207e705ab30debb3270e179976c69fa27ac6b5f0f71c3dcd679291d50469607fb22079e0669eadd855804ef2d1ee985204acdc6ba26e56a852755a5969a76732a523520d4253fc7cd5fa60dc00a43f410e497aa36e50e78e160e122ad7766b532e22a1a6dfd7e5d6743872910354466c12a26070a895e96f157ed1d873fd264bdf7933985637b24de7c34cb374a71ed39ce4977e6880d1e362c7cd68a210944a6830b64168e35262036ca5412f5e9d3a44d485e72911392ba4e408b303171d0da87f15a3ba4b79e591aa9eebf272b4628d66211418046d2da8686a1fda1f86e57a28e351dadb8c0bb25ffc904761a452a10928336c73ef6748e58ac0fa84078f61b82c9d9b7b0c730e4c7c610af8362d2c2783079ccc9ee707fcfb524c63a661aa288c2e85be202ef55f7a29f841ac45a58d8dec575e8ab5f9a8f937227af9b11a2aa68bde683c08c055ada004eb98d686385de95614f4ef371c6fe122d3b1dcc115cd060874f6b0a4491075f28198b1590c125d005e316452bd8eeae248d4fcd0691b9883ba88959e01d4fdc76d49971e3efc0f870047e9778930bcb2a06526c4e230e6bd95a64dac60cb7db039bb4465e8c61f70c2e70de1f9cca63567dfd142ae51c6cceedd2ee4f2f4ea8a1ee7cdc37ce7f2f798dc018130e957ce622b9a703ff6f36f9caf9a7e3a109
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.8 $
# $Date: 2024/06/17 $
#
# Description   : This .audit is designed against the CIS ISC BIND DNS Server 9.11 v1.0.0
#                 https://workbench.cisecurity.org/files/2997
#
#<ui_metadata>
#<display_name>CIS BIND DNS v1.0.0 L2 Authoritative Name Server</display_name>
#<spec>
#  <type>CIS</type>
#  <name>ISC BIND DNS Server 9.11</name>
#  <profile>L2 Authoritative</profile>
#  <version>1.0.0</version>
#  <link>https://workbench.cisecurity.org/files/2997</link>
#</spec>
#<labels>unix,cis,bind_linux_9.11,agent,update_20230227</labels>
#<benchmark_refs>CCE,CIS_Recommendation,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>BIND_HOME</name>
#    <default>/var/named/</default>
#    <description>BIND directory</description>
#    <info>The full path to the BIND directory.</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>CONFIG_FILES</name>
#    <default>/var/named/chroot/etc/</default>
#    <description>Full path to BIND config files.</description>
#    <info>Directory for all config files, includes, etc.</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>ZONE_FILES</name>
#    <default>/var/named/chroot/var/named/zones/</default>
#    <description>Full path to BIND zone files.</description>
#    <info>Directory for zone files.</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>KEYDIR</name>
#    <default>/var/named/chroot/var/keys/</default>
#    <description>Full path for key files</description>
#    <info>Directory that contains all of the key files for all of the authoritative zones.</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>PLATFORM_VERSION</name>
#    <default>9\.11</default>
#    <description>Bind Version</description>
#    <info>Bind Version</info>
#    <value_type>STRING</value_type>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "Check for BIND 9 installation"
      cmd         : "/usr/sbin/named -v"
      expect      : "^[\\s]*BIND @PLATFORM_VERSION@.*"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_ISC_BIND_DNS_Server_9.11_Benchmark_v1.0.0_L2_Authoritative.audit"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "2.9 Isolate BIND with chroot'ed Subdirectory"
      info        : "The chroot() system call causes an application to run with limited file system access so that a subdirectory becomes the root directory for the application environment. When this is done, the application is 'jailed' and no longer has access to the entire file structure but is limited to the given subdirectory.

The chroot'd subdirectory and the recommendations in section 'Enable SELinux to Restrict BIND Processes' provide similar controls, in that the DNS service is prevented from accessing and modifying inappropriate files. SELinux goes well beyond what the chroot is able to prevent, however for audit purposes either control, the chroot'd subdirectory or the SELinux in enforcing mode is sufficient.

Rationale:

Although there are ways that a chroot jail can be broken, most methods require that a process be running as root in order to escape. Since BIND should be run as a different user than root, a chroot is an effective defense, to limit access to sensitive system configuration files. In the event that BIND has a vulnerability that allows code execution, the attack will not have access to the real system files such as /etc/password, but will be limited to the files placed in the chroot subdirectory."
      solution    : "Perform the following:

Stop the named service and install the bind-chroot package to provide the chroot directories.

# systemctl stop named.service
# yum install bind-chroot

Edit the /etc/sysconfig/named configuration file to have a line similar to the one shown below that sets the ROOTDIR environment variable.

ROOTDIR='/var/named/chroot'

Move all the configuration files and any master zone files into their respective directions under the subdirectory /var/named/chroot/

It may be helpful to create symbolic links from a couple of system /etc files such as /etc/named.conf and /etc/rndc.key to the real files in the chroot'ed subdirectory, so that utilities like rndc will work as expected. Do not create symbolic links or hard links from inside the chroot to external resources! Instead use symbolic links to point from the outside resources into the chroot.

Restart the named service and test the configuration.

# systemctl start named.service

Default Value:

The BIND service is not chroot'ed by default."
      reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2A,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "ls -ld /proc/`pidof named`/root | awk '{print} END {if (NR == 0) print \"Named process not found\" }'"
      expect      : "chroot"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "5.1 Securely Authenticate Zone Transfers"
      info        : "A zone transfer is a mechanism commonly used by DNS deployments to replicate zone information from master/primary servers to slave/secondary servers. Each pair of name servers participating in zone transfers should authenticate the requests and ensure the integrity of the responses by using a unique shared secret TSIG key. BIND can be configured to respond only to authenticated transfer requests by using the allow-transfer statement with a key statement, that restricts the transfers to servers that provide a MAC using the named key.

Rationale:

A zone transfer is a popular information disclosure attack as it provides the entire list of resource records for a zone. There should be very few systems such as the slave name servers that should be authorized to perform a zone transfer for your domains. Authentication of transfer requests should not be made using only an IP address, since IP addresses can be spoofed, but rather by using TSIG keys.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Generate TSIG keys 256 bits in length, unique for each host-to-host communication. Securely Transfer the keys and configure the keys to be required in all allow-transfer statements.

Default Value:

If the allow-transfer statement is missing, then transfers are allowed to any host."
      reference   : "800-171|3.5.2,800-53|IA-5,800-53|IA-5(1),800-53r5|IA-5,800-53r5|IA-5(1),CSCv6|9.1,CSCv7|16.4,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,ITSG-33|IA-5(1),LEVEL|2A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "/usr/bin/awk '/^\\s*allow-transfer\\s*{/,/};/ { print; o=1 } END { if (o == 0) print \"fail - transfer-query Not Found\" }' @CONFIG_FILES@/* @ZONE_FILES@/*"
      expect      : "Manual Review Required"
      severity    : MEDIUM
    </custom_item>

    <report type:"WARNING">
      description : "7.4 Ensure Either SPF or DKIM DNS Records are Configured"
      info        : "For each authoritative domain that receives SMTP email, add either an SPF (Sender Policy Framework) TXT record and/or add a DKIM (DomainKeys Identified Mail) TXT record.

Rationale:

The SPF record reduces spam and phishing usage of a domain name, by publishing the IP addresses of the authorized mail servers, allowed to send mail for the domain. SPF compliant mail servers may reject or treat as SPAM, any mail coming from other IP addresses.

The DKIM record publishes a public key which may be used to verify the authenticity and integrity of the message by using the key to verify a digital signature of the message stored in an SMTP header.

Either or both of the technologies is recommended to be configured for each domain, to reduced spoofing and phishing attacks that use the domains in a FROM address. Consider the risk of a spoofed phishing email coming from upper management with an urgent request which had a valid FROM address. It might be too easy for someone to trust the email and take the action requested. In addition to SPF and DKIM, configuring a DMARC record, after SPF and/or DKIM records are in place, is helpful for reporting and forensics on attempted usage of the domain name. Only the SPF and DKIM DNS records are audited in this recommendation.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Add either an SPF TXT record and/or a default DKIM TXT record to the domains with the appropriate values. The SPF record should have a soft fail policy of ~all or a strict policy of -all There are on-line resources and tools such as MX toolbox that will help in generating and testing SPF, DKIM and DMARC records as shown in the references.

Default Value:

No SPF or DKIM records are configured by default."
      reference   : "800-53|SC-20,800-53r5|SC-20,CSCv7|7.8,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-20,LEVEL|2A,QCSC-v1|5.2.1"
      see_also    : "https://workbench.cisecurity.org/files/2997"
    </report>

    <custom_item>
      type        : PROCESS_CHECK
      description : "8.1 Install the Haveged Package for Enhanced Entropy"
      info        : "Install the haveged package to provide enhanced entropy for generating cryptographic keys. Haveged is a user space entropy daemon which is not dependent upon the standard mechanisms for harvesting randomness for the system entropy pool. Haveged uses HAVEGE (HArdware Volatile Entropy Gathering and Expansion) to maintain a pool of 1 million random bytes used to fill /dev/random.

Rationale:

It is important for authoritative DNS servers deploying DNSSEC domains to have a good source of entropy to generate secure cryptographic keys. DNS servers are typically not multi-user systems and generally deployed as headless servers. In such situations generating keys without enhanced entropy can be painfully time-consuming, or may lack sufficient entropy. The haveged daemon ensures that keys can be generated timely and securely."
      solution    : "Install the haveged package with the appropriate package manager and configure it to start, as shown below.



# yum install haveged

# systemctl enable haveged

# systemctl start haveged

Default Value:

The haveged package is not installed or enabled by default."
      reference   : "LEVEL|2A"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      name        : "haveged"
      status      : ON
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "8.2 Ensure Signing Keys are Generated with a Secure Algorithm"
      info        : "When Zone Signing Keys (ZSK) or Key Signing Keys (KSK) are generated there are several secure DNSSEC digital signature algorithms that are recommended. The algorithms are listed below with the standard DNSSEC algorithm number followed by the common name, and then the BIND 9 mnemonic name used by dnssec-keygen.

- 8 RSA/SHA-256  RSASHA256

- 10 RSA/SHA-512  RSASHA512

- 13 ECDSA/SHA-256ECDSAP256SHA256

- 14 ECDSA/SHA-384ECDSAP384SHA384

- 15 Ed25519ED25519

Rationale:

A secure public key algorithm along with a secure hash algorithm, are part of the foundation for a secure digital secure. Weaknesses in older public key algorithms continue to develop, and it is important to use a recommended algorithm that is expected to be secure for the near future."
      solution    : "To remediate a weak key, perform the following:

Generate a new key to replace the weak key using dnssec-keygen and one of the recommended algorithms. Examples commands are shown below.

# dnssec-keygen -a RSASHA256 -b 2048 example.com
# dnssec-keygen -a ECDSAP384SHA384 cisecurity.org

Implement a rollover period to phase out the weak key and replace it with the newly generated key.

Once the key is fully deleted from active use, remove the file.

Default Value:

The default algorithm is RSASHA1."
      reference   : "800-171|3.13.10,800-53|SC-12,800-53r5|SC-12,CSCv7|18.5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.10.1.2,ITSG-33|SC-12,ITSG-33|SC-12a.,LEVEL|2A,NESA|T7.4.1,NESA|T7.4.2,NIAv2|CY2,NIAv2|CY8,NIAv2|CY9,QCSC-v1|5.2.2,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "cd @BIND_HOME@; find . -name 'K*.private' | xargs grep '^Algorithm:' | grep -vE 'Algorithm:\\s+(8|10|13|14|15)\\s+\\((RSASHA256|RSASHA512|ECDSAP256SHA256|ECDSAP384SHA384|ED25519)\\)' | awk '{print} END {if (NR == 0) print \"pass\"; else print \"fail\"}'"
      expect      : "^pass$"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "8.3 Ensure Any Signing Keys using RSA Have a Length of 2048 or Greater"
      info        : "If one of the RSA digital signature algorithms is used, then then key length should be at least 2048 bits. The Elliptic Curve algorithms have sufficient key length without any additional options, and will provide for smaller signed DNS responses then the RSA algorithms.

Rationale:

RSA keys of 1024 bits in length are no longer considered secure against brute force attacks. A key length of at least 2048 bits is required."
      solution    : "To remediate a weak RSA key, perform the following:

Generate a new key to replace the weak key using dnssec-keygen and one of the recommended algorithms and key lengths. Examples commands are shown below.

# dnssec-keygen -a RSASHA256 -b 2048 example.com
# dnssec-keygen -a ECDSAP384SHA384 cisecurity.org

Implement a rollover period to phase out the weak key and replace it with the the newly generated key.

Once the key is fully deleted from the active use, remove the file.

Default Value:

If an RSA algorithm is chosen the default key length is 1024 for the ZSK and 2048 for the KSK."
      reference   : "800-53|SC-20,800-53r5|SC-20,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-20,LEVEL|2A,QCSC-v1|5.2.1"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "find @KEYDIR@ -name 'K*.private' -print0 | xargs -0 awk -e '/^Prime1:/ {print FILENAME,length($2)}' | grep -v -E ' ([0-9]{4,}|[2-9][0-9][0-9]|1[8-9][0-9]|17[4-9])$' | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "^pass$"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "8.4 Restrict Access to Zone and Key Signing Keys"
      info        : "The files and directories for Zone Signing Keys (ZSK) and Key Signing Keys (KSK) should be read-only by the named user, with no access to other.

Rationale:

The named daemon does not require write access to the key files or the directories, Implementing a minimal read-only access provides an additional layer of denfense, so that if the service was exploited, the exploit would not be able to modify signing keys. Likewise restricting read access to the keys will prevent inappropriate disclosure of the private keys."
      solution    : "Perform the following:

chmod  -R g-w,o-rwX $KEYDIR

Default Value:

The BIND signing key files and directory do not exist by default."
      reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2A,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "find @KEYDIR@ -perm /027 -ls | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <report type:"WARNING">
      description : "8.5 Ensure each Zone has a Valid Digital Signature"
      info        : "For each zone of the authoritative name server, verify that the signed zone file has a valid signature for each algorithm in the zone DNSKEY RRSet.

Rationale:

The zone must have a valid signature before it can be trusted by validating DNSSEC name resolvers.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Perform either of the following:

Enable in-line signing in each zone configuration by setting inline-signing to yes value. For example:

zone 'cisecurity.org' {
     type master;
     file '/etc/named/masters/cisecurity.org';
     key-directory '/etc/named/keys';
     inline-signing yes;
     auto-dnssec maintain;
};

Reload the server configuration and zones.

rndc reload

Or if using manual or scripted zone signing instead of inline-signing, then perform the following.

Include the signing keys at the end of the zone file to be signed. Such as:

$include Kcisecurity.com.+013+09768.key
$include Kcisecurity.com.+013+45248.key

Then sign each zone file with the dnssec-signzone command such as:

dnssec-signzone -o cisecurity.com ../masters/cisecurity.com Kcisecurity.com.+013+09768.key Kcisecurity.com.+013+45248.key

Reload the configuration and zones.

rndc reload"
      reference   : "800-171|3.5.2,800-53|IA-5,800-53|IA-5(1),800-53r5|IA-5,800-53r5|IA-5(1),CSCv7|16.4,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,ITSG-33|IA-5(1),LEVEL|2M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/files/2997"
    </report>

    <custom_item>
      type        : CMD_EXEC
      description : "8.6 Ensure Full Digital Chain of Trust can be Validated"
      info        : "For each authoritative domain ensure the digital signatures are is fully trusted starting from the root zone.

Rationale:

In order for the the digital signatures to be trusted by other systems, The parent zone must be a DS (delegated signer) record that verifies the authenticity of the child zones KSK (key signing key). The delegated signature forms a chain of trust, delegated down from the root zone."
      solution    : "If the zone has a valid signature but the signature is not trusted, the delegation from the parent zone, or the registrar may not be properly configured. Check with your parent zone administrator or with your name registrar's process to be sure the required information has been provided and that sufficient time has been allowed for new DS record to propagate. Each registrar may have slightly different processes. Generating a DS record from the KSK will likley provide some of the required information.

# dnssec-dsfromkey -a SHA-256 Kexample.com.+013+09798.key
example.com. IN DS 9798 13 2 D9AA106E44 . . ."
      reference   : "800-171|3.13.11,800-53|SC-13,800-53r5|SC-13,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|2A,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "delv @8.8.8.8 cisecurity.org"
      expect      : ";[\\s]+fully[\\s]+validated"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "8.7 Ensure Signing Keys are Unique"
      info        : "Each zone should have a unique Zone Signing Keys (ZSK) and a unique Key Signing Keys (KSK) that is different from all other keys.

Rationale:

The ZSK key typically has a shorter expiration date then the KSK, and should be unique from the KSK as well as keys used for other zones. If a private key is compromised, the damage is limited to unique key that was disclosed, rather the compromising multiple zones."
      solution    : "To remediate a duplicate key, perform the following:

Generate a new key to replace the duplicate key using dnssec-keygen and one of the recommended algorithms. An example command is shown below:

# dnssec-keygen -a ECDSAP256SHA256 example.org

Implement a rollover period to phase out the duplicate key and replace it with the the newly generated key.

Once the key is fully deleted from the active use, remove the file."
      reference   : "800-171|3.13.11,800-53|SC-13,800-53r5|SC-13,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|2A,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "find @KEYDIR@ -name '*.key' | xargs grep -ho 'DNSKEY .*' | sort | uniq -c | grep -v -E '^\\s*1\\s+DNSKEY' | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "^pass$"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "8.8 Ensure Zones are Signed with NSEC or NSEC3"
      info        : "The NSEC records are used to prove that a name does not exist, by providing the name before it, and the name after it. NSEC3 records are similar, while using a hash to link records in order to make zone enumeration much more difficult. Either record type will securely validate a negative answer that a name does not exist.

Rationale:

The DNSSEC RRSIG records allows verification of the integrity and authenticity of answers for names which exist. However when the authoritative name server answers that a name does not exist. The nonexistent answer is not signed, and cannot be securely signed. An attacker could take advantage of this by spoofing nonexistent name answers to prevent resolving legitimate names. The NSEC and NSEC3 records provide a means for a DNSSEC validating resolver to verify the authenticity of a nonexistent answer."
      solution    : "An NSEC record and NSEC signatures are generated automatically by BIND for DNSSEC signed zones. If the audit fails, then verify that the zone has a valid signature and has delegated trust from the parent domain as in the previous recommendations '8.5 Ensure each Zone has a Valid Digital Signature' and '8.6 Ensure Full Digital Chain of Trust can be Validated' The signed zone file, or a zone transfer can also be checked for NSEC signatures. With a command such as:

$ dig @127.0.0.1 example.org AXFR | grep -w 'NSEC'
example.org.86400INNSECwww.example.org. A NS SOA RRSIG NSEC DNSKEY TYPE65534
example.org.86400INRRSIG NSEC 8 2 86400 20200325222408 20200224212408 4236
. . .

Converting NSEC signing to NSEC3 signing is helpful to prevent zone walking of the linked NSEC records which easily reveal all of the names in a zone. The NSEC3 algorithm creates a linked list of signed hash values, instead of names, to prevent the simple disclosure of all names. The rndc signing command can be used to convert NSEC signing to NSEC3 signing. For example:

#  rndc signing -nsec3param 1 0 10  auto example.org
nsec3param request queued
<wait, check the named logs to ensure the zone has been re-signed>
. . .
zone example.org/IN (signed): sending notifies (serial 2020031005)
. . .

# dig @127.0.0.1 example.org AXFR +onesoa | grep NSEC
example.org.0INRRSIG  NSEC3PARAM 8 2 0 20200422125535 20200323125407 42363 example.org. CCHlbQud0W2XrNlmYHO. . . Kg7ltg==
example.org.0INNSEC3PARAM 1 0 10 74139101AD2E623E
. . .

Default Value:

For signed domains the NSEC records and signatures are generated by default."
      reference   : "800-171|3.14.2,800-171|3.14.4,800-171|3.14.5,800-53|SI-3,800-53r5|SI-3,CN-L3|7.1.3.6(b),CN-L3|8.1.4.5,CN-L3|8.1.9.6(a),CN-L3|8.1.9.6(b),CN-L3|8.1.10.5(b),CN-L3|8.1.10.7(a),CN-L3|8.1.10.7(b),CSCv7|8,CSF|DE.CM-4,CSF|DE.DP-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.2.1,ITSG-33|SI-3,LEVEL|2A,NIAv2|GS8a,PCI-DSSv3.2.1|5.1,PCI-DSSv3.2.1|5.1.1,PCI-DSSv4.0|5.2.1,QCSC-v1|3.2,QCSC-v1|5.2.3,QCSC-v1|8.2.1,TBA-FIISB|49.2.1,TBA-FIISB|49.2.2,TBA-FIISB|49.3.1,TBA-FIISB|49.3.2,TBA-FIISB|50.2.1,TBA-FIISB|51.2.4,TBA-FIISB|51.2.7"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "delv @8.8.8.8 nosuch-name.isc.org"
      expect      : ";[\\s]+negative[\\s]+response,[\\s]+fully[\\s]+validated"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "9.6 Ensure Signing Keys are Scheduled to be Replaced Periodically - ZSK"
      info        : "Implement a periodic key rollover process for both the Zone Signing Keys (ZSK) and the Key Signing Keys (KSK). The ZSK should be replaced within 2 years or less. The KSK should be replaced within 6 years or less. Keys are replaced by generating a new key before the existing key expires, and scheduling a rollover date when the new key will phase out and replace the old key.

Rationale:

Cryptographic keys like passwords need to be periodically replaced. By using strong key algorithms and appropriately long bit lengths, the lifetime for keys can be longer than a generally recommended for passwords. Typically, the Zone Signing Keys are rolled over more frequently than the Key Signing Keys."
      solution    : "To replace an aged key, perform the following:

Generate a new key to replace the old key using dnssec-keygen and one of the recommended algorithms. An example command is shown below:

# dnssec-keygen -a ED25519 example.org
# dnssec-keygen -a ED25519 -f KSK example.org

Implement a rollover period to phase out the old key and replace it with the newly generated key. The older key should have dates set for the keys to be inactive and then deleted.

# dnssec-settime -I +30d -D +60d  Kexample.org.+013+46651.key

Once the date for key deletion has passed, and the key is no longer included in the zone, then remove the key files.

Default Value:

Signing key rollover is NOT implemented by default."
      reference   : "800-171|3.13.11,800-53|SC-13,800-53r5|SC-13,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|2A,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "ZKEYS=$(find @KEYDIR@ -name '*.key' | xargs grep -l 'DNSKEY 256 3' ); for zk in $ZKEYS; do dtime=$(dnssec-settime -u -pA $zk | awk '{print $2}'); ttime=$(date -u --date \"2 years ago\" +'%s'); [ $dtime -lt $ttime ] && echo -n \"$zk: \" && dnssec-settime -pA $zk; done | awk '{print} END {if (NR == 0) print \"pass\"; else print \"fail\"}'"
      expect      : "^pass$"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "9.6 Ensure Signing Keys are Scheduled to be Replaced Periodically - KSK"
      info        : "Implement a periodic key rollover process for both the Zone Signing Keys (ZSK) and the Key Signing Keys (KSK). The ZSK should be replaced within 2 years or less. The KSK should be replaced within 6 years or less. Keys are replaced by generating a new key before the existing key expires, and scheduling a rollover date when the new key will phase out and replace the old key.

Rationale:

Cryptographic keys like passwords need to be periodically replaced. By using strong key algorithms and appropriately long bit lengths, the lifetime for keys can be longer than a generally recommended for passwords. Typically, the Zone Signing Keys are rolled over more frequently than the Key Signing Keys."
      solution    : "To replace an aged key, perform the following:

Generate a new key to replace the old key using dnssec-keygen and one of the recommended algorithms. An example command is shown below:

# dnssec-keygen -a ED25519 example.org
# dnssec-keygen -a ED25519 -f KSK example.org

Implement a rollover period to phase out the old key and replace it with the newly generated key. The older key should have dates set for the keys to be inactive and then deleted.

# dnssec-settime -I +30d -D +60d  Kexample.org.+013+46651.key

Once the date for key deletion has passed, and the key is no longer included in the zone, then remove the key files.

Default Value:

Signing key rollover is NOT implemented by default."
      reference   : "800-171|3.13.11,800-53|SC-13,800-53r5|SC-13,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,LEVEL|2A,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "ZKEYS=$(find @KEYDIR@ -name '*.key' | xargs grep -l 'DNSKEY 257 3' ); for zk in $ZKEYS; do dtime=$(dnssec-settime -u -pA $zk | awk '{print $2}'); ttime=$(date -u --date \"6 years ago\" +'%s'); [ $dtime -lt $ttime ] && echo -n \"$zk: \" && dnssec-settime -pA $zk; done | awk '{print} END {if (NR == 0) print \"pass\"; else print \"fail\"}'"
      expect      : "^pass$"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "10.1 Ensure SELinux Is Enabled in Enforcing Mode - current mode"
      info        : "SELinux (Security-Enhanced Linux) is a Linux kernel security module that provides mandatory access control security policies with type enforcement that are checked after the traditional discretionary access controls. It was created by the US National Security Agency and can enforce rules on files and processes in a Linux system, and restrict actions, based on defined policies.

Rationale:

DNS servers act as a foundation for most of the internet and internal traffic. Web and mobile applications, email, cloud services and VPN connections, internal LAN connections all depend on DNS to translate names and route traffic to the correct destination. With DNS being such a critical service, it is a ripe target for attacks which may allow black-hat criminals to gain access to information and servers. The threat is especially high because DNS servers are often externally accessible and continue to have serious vulnerabilities. The SELinux mandatory access controls provide a much stronger security model which can be used to implement a deny-by-default model which only allows what is explicitly permitted."
      solution    : "Perform the following to implement the recommended state:

If SELinux is not enabled in the configuration file, edit the file /etc/selinux/config and set the value of SELINUX as enforcing and reboot the system for the new configuration to be effective.

SELINUX=enforcing

If the current mode is not enforcing, and an immediate reboot is not possible, the current mode can be set to enforcing with the setenable command shown below.

# setenforce 1

Default Value:

SELinux is enforcing by default on some Linux distributions such as Red Hat Enterprise Linux 8."
      reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSCv7|14.7,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2A,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "sestatus | grep -i 'current mode'"
      expect      : "enforcing"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "10.1 Ensure SELinux Is Enabled in Enforcing Mode - config file"
      info        : "SELinux (Security-Enhanced Linux) is a Linux kernel security module that provides mandatory access control security policies with type enforcement that are checked after the traditional discretionary access controls. It was created by the US National Security Agency and can enforce rules on files and processes in a Linux system, and restrict actions, based on defined policies.

Rationale:

DNS servers act as a foundation for most of the internet and internal traffic. Web and mobile applications, email, cloud services and VPN connections, internal LAN connections all depend on DNS to translate names and route traffic to the correct destination. With DNS being such a critical service, it is a ripe target for attacks which may allow black-hat criminals to gain access to information and servers. The threat is especially high because DNS servers are often externally accessible and continue to have serious vulnerabilities. The SELinux mandatory access controls provide a much stronger security model which can be used to implement a deny-by-default model which only allows what is explicitly permitted."
      solution    : "Perform the following to implement the recommended state:

If SELinux is not enabled in the configuration file, edit the file /etc/selinux/config and set the value of SELINUX as enforcing and reboot the system for the new configuration to be effective.

SELINUX=enforcing

If the current mode is not enforcing, and an immediate reboot is not possible, the current mode can be set to enforcing with the setenable command shown below.

# setenforce 1

Default Value:

SELinux is enforcing by default on some Linux distributions such as Red Hat Enterprise Linux 8."
      reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSCv7|14.7,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2A,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "sestatus | grep -i 'mode from config file'"
      expect      : "enforcing"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "10.2 Ensure BIND Processes Run in the named_t Confined Context Type"
      info        : "SELinux includes customizable targeted policies that may be used to confine the BIND named server to enforce least privileges so that the server has only the minimal access to specified directories, files and network ports. Access is controlled by process types (domains) defined for the named process. There are about a dozen related types defined in a default named SELinux policy. The default SELinux policies work well for a default BIND installation, however testing of the SELinux polices with the specific BIND operations is highly recommended. All directories and files to be accessed by the named server process must have security labels with appropriate types. The following file context types are a sample of the most commonly used:

named_cache_t - Directories and files with dynamically updated contents

named_conf_t - Directories and Configuration files to be read, but not updated

named_exec_t - BIND related Executables

The seinfo may be used list the types that are configured. For example, the following will list the relevant types that begin with named_

# seinfo -t | grep ' named_'

The semanage fcontext command may be used to list file context mapping. For example:

# semanage fcontext -l | grep ':named_'

Rationale:

With the proper implementation of SELinux, vulnerabilities in the BIND named server may be prevented from being exploited due to the additional restrictions. For example, a vulnerability that allows an attacker to read inappropriate system files may be prevented from execution by SELinux because the inappropriate files are not labeled with necessary named specific context. Likewise writing to an unexpected directory or execution of unexpected content can be prevented by similar mandatory security labels enforced by SELinux."
      solution    : "If the running named process is not confined to the named_t SELinux context. Then check the labeled context for the named binaries and set the binary files to have a context of named_exec_t as shown below. The named-checkconf executable should have named_checkconf_exec_t type.

# ls -Z  /usr/sbin/named /usr/sbin/named-checkconf /usr/sbin/unbound-anchor
          system_u:object_r:named_exec_t:s0 /usr/sbin/named
system_u:object_r:named_checkconf_exec_t:s0 /usr/sbin/named-checkconf
          system_u:object_r:named_exec_t:s0 /usr/sbin/unbound-anchor

If the executable files are not labeled correctly, they may be relabeled with the chcon command, as shown, however the file system labeling is based on the SELinux file context mapping polices and the file systems will on some occasions be relabeled according to the policy.

# chcon -t named_exec_t /usr/sbin/named /usr/sbin/unbound-anchor
# chcon -t named_checkconf_exec_t /usr/sbin/named-checkconf

Since the file system may be relabeled based on SELinux policy, it's best to check the SELinux policy with semanage fcontext -l option. If the policy is not present, then add the pattern to the policy using the --add option. The restorecon command shown below will restore the file context label according to the current policy, which is required if a pattern was added.

# ### Check the Policy
# semanage fcontext -l | grep '/usr/sbin/named*'
/usr/sbin/named            regular file system_u:object_r:named_exec_t:s0
/usr/sbin/named-checkconf  regular file system_u:object_r:named_checkconf_exec_t:
s0

# semanage fcontext -l | grep /usr/sbin/unbound-anchor
/usr/sbin/unbound-anchor   regular file system_u:object_r:named_exec_t:s0

# ### Add to the policy, if not present
# semanage fcontext --add -f f -t named_exec_t /usr/sbin/named
# semanage fcontext --add -f f -t named_exec_t /usr/sbin/unbound-anchor
# semanage fcontext --add -f f -t named_checkconf_exec_t /usr/sbin/named-checkconf

# ### Restore the file labeling accord to the SELinux policy
# restorecon -v /usr/sbin/named /usr/sbin/named-checkconf /usr/sbin/unbound-anchor

Restarting the BIND named service will also be required.

Default Value:

The name_t is the default type for ISC BIND named if SELinux is enabled."
      reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv6|14.4,CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2A,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "ps -eZ | grep named | cut -f3 -d':'"
      expect      : "^named_t$"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "10.3 Ensure the named_t Process Type is Not in Permissive Mode"
      info        : "In addition to setting the entire SELinux configuration in permissive mode, it is possible to set individual process types (domains) such as named_t into a permissive mode as well. The permissive mode will not prevent any access or actions, instead, any actions that would have been denied are simply logged.

Rationale:

Usage of the permissive mode is helpful for testing and ensuring that SELinux will not prevent access that is necessary for the proper function of the DNS server. However, inappropriate access will not be prevented in permissive mode by SELinux."
      solution    : "Perform the following to implement the recommended state:

If the named_t type is in permissive mode; the customized permissive mode should be deleted with the following semanage command.

# semanage permissive -d named_t

Default Value:

The named_t type is not in permissive mode by default."
      reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|2A,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "semodule -l | grep permissive_named_t | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "pass"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "10.4 Ensure Only the Necessary SELinux Booleans are Enabled"
      info        : "SELinux booleans allow or disallow specific behaviors. There are two boolean variables specific to the ISC BIND DNS server:

named_tcp_bind_http_port - Allow named to tcp bind http port

named_write_master_zones - Allow named to write master zones

The named_tcp_bind_http_port would allow enabling the BIND statistics http channel which is not recommended. The named_write_master_zones allows BIND to update the master files, which is necessary when dynamic updates are performed, or the server is automatically maintaining DNSSEC digital signatures.

Rationale:

Enabling only the necessary named related booleans provides a defense in depth approach, that will deny actions that are not in use or expected."
      solution    : "Perform the following to implement the recommended state:

Disable the SELinux boolean using the setsebool command as shown below with the -P option to make the change persistent.

# setsebool -P named_tcp_bind_http_port off

Default Value:

The default value for named_tcp_bind_http_port is off."
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|2A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/2997"
      cmd         : "getsebool named_tcp_bind_http_port"
      expect      : "off"
    </custom_item>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_ISC_BIND_DNS_Server_9.11_Benchmark_v1.0.0_L2_Authoritative.audit"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://workbench.cisecurity.org/files/2997"
    </report>
  </else>
</if>

</check_type>
