#TRUSTED add0850b4f88d56860eaee6a2652d6d1600a5ec095f22be35db94e777428ef35e755dd990fa908b4bcacb4fa838a45c0b3fc18154e37e37a2a0a335a97d04717014f37c6ef6dc74b9cf2120cd468f2cd6bf243e02a8f297b38d149a2401e017c4df87485098d0030c3bfb0e495d69b218ba4ea9a33821498438ba7d99ef4fd5c90e9cbbb862ede8efb48fcb3a624e4c7110bc55e4b5626536580acabe14ca5af970e3abf60c49d748eb8c5e004b9800ffba2f731128c02d3e89b17e7ee70cb63b58cf36a6aa910c1ee566da3374daf94449c6bd7929fa92fc53887312e61c8896b70a21ba9e7fcea4afd73a70759fd2ff543535e9f80a69162ca78d5a8b1899fa5317e97a9d9b9fe1686752fa3731fdb6c763102cf8e9bad1e6da222fb9d6d92e43ff2ea9a60f01e219c54c454ace57fd913e25a8c7673651a8f4a71eefcf8d9f47ff90d50378ed487fa8aa6ffe3f7716b277197feff103fc5c005f69313384a3bbc305bc6a22e67b5ca5343af5b9677c744c34a85d492a512bf1680e4507b8d9d032790d5fefaf42317d7fcd856168b72df47eb699f459d9c5c7641de9c5b29261830dbc66a349f9aee67193e7cfa9b35dbd9ba846990cf78aa078c9463ab249708325540e7fe896139f779fe3aa0ab069b44fecf59fabc73869c008ee9a37fa0f868314f25b2d820fc849185735780cc5b380824db10f924ef8f90fa0d4230
#TRUST-RSA-SHA256 0b9de5fa690cd0c3c59cc0c33494f288175aefec06c8abb466bb1367feaa558792146bd3f0d9415784040359c2b98b4bd4626912c470cc8cc3cfa5be44cc99b5d18ad490c19b0d6d7b959432518be54444c006f157e0ebbbe15c48861e19868b7991c62df1df00225af0c0de920c46588722c3e9daa21a288b6c4035ef3f7ae018db1537ae5b09d75cdc407e03522b3e9c4b03ec4439493ae086bd089a82e2000ce3823533ecddf5f043ad314554aaac7774dd21513113d69f8118efa884fe4c1587016d1cfebafa532dd4af779331a3827b90634ba46ff7fb8113f766def8016f6a4fc111e32e7e5d0ae8dfb3363f3c8329303d6aee383502a23b07a536ce03b0c4f37de8c079812c204cbd4f5db82310552eb150e57b9b3c6e08db1ec9c8d417b08ff88764f91bd55a78c31da65014bbf67b7fcc6df04604b2fcab35b828fbaab31dd30d1f2dac9d08de969cda7993e0b5e814cd174ee2dd47fdab3525f47caaa649335fb20d4c91c86001b216756d74f1f72e5553b8738465726aa501d391c5d976e5f7c59afbeb70e80e76d4313a438893e5dac035d39c05ab07288c04414e8f00ea943488fa7c47396a8d539d41645a7e123ac061a409b4b506848dc74c5f5b8ed59f565e39fc167017368e22ef5d68324bbd47fd6d220bf818e795b8461f0135528439d5ad409ba9d57789da86c74b3a9a3b118696df0e99c4e6f15e8c
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.12 $
# $Date: 2024/06/17 $
#
# description : This document implements the security configuration as recommended by the
#               CIS Kubernetes Benchmark v1.4.1
#
#               https://workbench.cisecurity.org/files/2421
#
#<ui_metadata>
#<display_name>CIS Kubernetes 1.13 Benchmark v1.4.1 L2</display_name>
#<spec>
#  <type>CIS</type>
#  <name>Kubernetes 1.13</name>
#  <profile>L2</profile>
#  <version>1.4.1</version>
#  <link>https://workbench.cisecurity.org/files/2421</link>
#</spec>
#<labels>kubernetes_1.13,agent,unix,update_20230227</labels>
#<benchmark_refs>CCE,CIS_Recommendation,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>APISERVER_FILE</name>
#    <default>/etc/kubernetes/manifests/kube-apiserver.yaml</default>
#    <description>API Server Config File</description>
#    <info>The apiserver file controls various parameters that set the behavior of the API server.</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>KUBECONFIG</name>
#    <default>/etc/kubernetes/admin.conf</default>
#    <description>Path to the kubectl config</description>
#    <info>The kubeconfig file controls various parameters for connecting to the API server.</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>KUBECTL_PATH</name>
#    <default>/usr/bin</default>
#    <description>Path to the kubectl binary</description>
#    <info>This is the directory where the kubectl binary is located.</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"AND">
    <custom_item>
      type        : PROCESS_CHECK
      description : "Check if kubelet is running"
      name        : "kubelet"
      status      : ON
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "Check if this is a Docker Vessel/Host"
      cmd         : "/usr/bin/docker info"
      expect      : "Containers"
    </custom_item>
  </condition>

  <then>
    <if>
      <condition type:"AND">
        <custom_item>
          type          : CMD_EXEC
          description   : "Check if API Server is running"
          cmd           : "ps -ef | egrep '/etcd[2]?([[:space:]]|$)' | grep -v grep"
          expect        : "etcd[2]?[\\s]"
          dont_echo_cmd : YES
        </custom_item>
      </condition>

      <then>
        <report type:"WARNING">
          description : "1.5.7 Ensure that a unique Certificate Authority is used for etcd"
          info        : "Use a different certificate authority for etcd from the one used for Kubernetes.

Rationale:

etcd is a highly available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. Its access should be restricted to specifically designated clients and peers only.

Authentication to etcd is based on whether the certificate presented was issued by a trusted certificate authority. There is no checking of certificate attributes such as common name or subject alternative name. As such, if any attackers were able to gain access to any certificate issued by the trusted certificate authority, they would be able to gain full access to the etcd database.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Follow the etcd documentation and create a dedicated certificate authority setup for the etcd service.

Then, edit the etcd pod specification file '/etc/kubernetes/manifests/etcd.yaml' on the master node and set the below parameter.

--trusted-ca-file="
          reference   : "CSCv6|9,LEVEL|2S"
          see_also    : "https://workbench.cisecurity.org/files/2421"
        </report>
      </then>
    </if>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : FILE_CHECK
          description : "Check if kubectl exists"
          file        : "@KUBECTL_PATH@/kubectl"
        </custom_item>
      </condition>

      <then>
        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
              file        : "@KUBECONFIG@"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "1.6.3 Create network segmentation using Network Policies"
              info          : "Use network policies to isolate your cluster network.

Rationale:

Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints. 'NetworkPolicy' resources use labels to select pods and define whitelist rules which allow traffic to the selected pods in addition to what is allowed by the isolation policy for a given namespace.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Follow the documentation and create 'NetworkPolicy' objects as you need them."
              reference     : "800-171|3.13.2,800-171|3.13.5,800-171|3.14.6,800-171|3.14.7,800-53|CA-9,800-53|SC-7(22),800-53|SI-4,800-53r5|CA-9,800-53r5|SC-7(22),800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CN-L3|8.1.10.6(j),CSCv6|14.1,CSCv7|14.1,CSCv7|14.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.AM-3,CSF|ID.RA-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.IP-8,CSF|PR.PT-4,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,GDPR|32.1.d,GDPR|32.2,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|3.2,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|2.1,TBA-FIISB|43.1"
              see_also      : "https://workbench.cisecurity.org/files/2421"
              cmd           : "@KUBECTL_PATH@/kubectl get networkpolicy --namespace=kube-system --kubeconfig @KUBECONFIG@"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "1.6.3 Create network segmentation using Network Policies"
              info          : "Use network policies to isolate your cluster network.

Rationale:

Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints. 'NetworkPolicy' resources use labels to select pods and define whitelist rules which allow traffic to the selected pods in addition to what is allowed by the isolation policy for a given namespace.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Follow the documentation and create 'NetworkPolicy' objects as you need them."
              reference     : "800-171|3.13.2,800-171|3.13.5,800-171|3.14.6,800-171|3.14.7,800-53|CA-9,800-53|SC-7(22),800-53|SI-4,800-53r5|CA-9,800-53r5|SC-7(22),800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CN-L3|8.1.10.6(j),CSCv6|14.1,CSCv7|14.1,CSCv7|14.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.AM-3,CSF|ID.RA-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.IP-8,CSF|PR.PT-4,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,GDPR|32.1.d,GDPR|32.2,HIPAA|164.306(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,ITSG-33|SI-4,LEVEL|2S,NESA|M1.2.2,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.2.1|1.1,PCI-DSSv3.2.1|1.2,PCI-DSSv3.2.1|1.2.1,PCI-DSSv3.2.1|1.3,PCI-DSSv4.0|1.2.1,PCI-DSSv4.0|1.4.1,QCSC-v1|3.2,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,SWIFT-CSCv1|2.1,TBA-FIISB|43.1"
              see_also      : "https://workbench.cisecurity.org/files/2421"
              cmd           : "@KUBECTL_PATH@/kubectl get networkpolicy --namespace=kube-system"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </else>
        </if>

        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "1.6.4 Ensure that the seccomp profile is set to docker/default in your pod definitions"
          info        : "Enable 'docker/default' seccomp profile in your pod definitions.

Rationale:

Seccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container."
          solution    : "Seccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing ''--feature-gates=AllAlpha=true'' argument.

Edit the '/etc/kubernetes/apiserver' file on the master node and set the 'KUBE_API_ARGS' parameter to ''--feature-gates=AllAlpha=true''

KUBE_API_ARGS='--feature-gates=AllAlpha=true'

Based on your system, restart the 'kube-apiserver' service. For example:

systemctl restart kube-apiserver.service

Use 'annotations' to enable the 'docker/default' seccomp profile in your pod definitions. An example is as below:

apiVersion: v1
kind: Pod
metadata:
 name: trustworthy-pod
 annotations:
 seccomp.security.alpha.kubernetes.io/pod: docker/default
spec:
 containers:
 - name: trustworthy-container
 image: sotrustworthy:latest"
          reference   : "CSCv6|5,LEVEL|2S"
          see_also    : "https://workbench.cisecurity.org/files/2421"
          file        : "@APISERVER_FILE@"
          regex       : "seccomp"
          expect      : "seccomp.security.alpha.kubernetes.io/pod[\\s]*:[\\s]*docker/default"
        </custom_item>

        <report type:"WARNING">
          description : "1.6.5 Apply Security Context to Your Pods and Containers"
          info        : "Apply Security Context to Your Pods and Containers

Rationale:

A security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers."
          reference   : "CSCv6|3,LEVEL|2S"
          see_also    : "https://workbench.cisecurity.org/files/2421"
        </report>

        <report type:"WARNING">
          description : "1.6.6 Configure Image Provenance using ImagePolicyWebhook admission controller"
          info        : "Configure Image Provenance for your deployment.

Rationale:

Kubernetes supports plugging in provenance rules to accept or reject the images in your deployments. You could configure such rules to ensure that only approved images are deployed in the cluster.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Follow the Kubernetes documentation and setup image provenance."
          reference   : "CSCv6|18,LEVEL|2S"
          see_also    : "https://workbench.cisecurity.org/files/2421"
        </report>

        <report type:"WARNING">
          description : "1.6.7 Configure Network policies as appropriate"
          info        : "Configure Network policies as appropriate.

Rationale:

The Network Policy API is now stable. Network policy, implemented through a network plug-in, allows users to set and enforce rules governing which pods can communicate with each other. You should leverage it as appropriate in your environment.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
          solution    : "Follow the Kubernetes documentation and setup network policies as appropriate.

For example, you could create a 'default' isolation policy for a Namespace by creating a NetworkPolicy that selects all pods but does not allow any traffic:

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
 name: default-deny
spec:
 podSelector:"
          reference   : "CSCv6|12,LEVEL|2S"
          see_also    : "https://workbench.cisecurity.org/files/2421"
        </report>

        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
              file        : "@KUBECONFIG@"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "1.6.8 Place compensating controls in the form of PSP and RBAC for privileged containers usage - psp"
              info          : "Use Pod Security Policies (PSP) and RBAC authorization to mitigate the risk arising from using privileged containers.

Rationale:

A number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Privileged containers pose a risk to the underlying host infrastructure. You should use PSP and RBAC or other forms of authorization to mitigate the risk arising out of such privileged container usage. PSPs should be in place to restrict access to create privileged containers to specific roles only, and access to those roles should be restricted using RBAC role bindings.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Follow Kubernetes documentation and setup PSP and RBAC authorization for your cluster."
              reference     : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2421"
              cmd           : "@KUBECTL_PATH@/kubectl get psp --kubeconfig @KUBECONFIG@"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>

            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "1.6.8 Place compensating controls in the form of PSP and RBAC for privileged containers usage - rolebinding"
              info          : "Use Pod Security Policies (PSP) and RBAC authorization to mitigate the risk arising from using privileged containers.

Rationale:

A number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Privileged containers pose a risk to the underlying host infrastructure. You should use PSP and RBAC or other forms of authorization to mitigate the risk arising out of such privileged container usage. PSPs should be in place to restrict access to create privileged containers to specific roles only, and access to those roles should be restricted using RBAC role bindings.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Follow Kubernetes documentation and setup PSP and RBAC authorization for your cluster."
              reference     : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2421"
              cmd           : "@KUBECTL_PATH@/kubectl get rolebinding --kubeconfig @KUBECONFIG@"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>

            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "1.6.8 Place compensating controls in the form of PSP and RBAC for privileged containers usage - clusterrolebinding"
              info          : "Use Pod Security Policies (PSP) and RBAC authorization to mitigate the risk arising from using privileged containers.

Rationale:

A number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Privileged containers pose a risk to the underlying host infrastructure. You should use PSP and RBAC or other forms of authorization to mitigate the risk arising out of such privileged container usage. PSPs should be in place to restrict access to create privileged containers to specific roles only, and access to those roles should be restricted using RBAC role bindings.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Follow Kubernetes documentation and setup PSP and RBAC authorization for your cluster."
              reference     : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2421"
              cmd           : "@KUBECTL_PATH@/kubectl get clusterrolebinding --kubeconfig @KUBECONFIG@"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "1.6.8 Place compensating controls in the form of PSP and RBAC for privileged containers usage - psp"
              info          : "Use Pod Security Policies (PSP) and RBAC authorization to mitigate the risk arising from using privileged containers.

Rationale:

A number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Privileged containers pose a risk to the underlying host infrastructure. You should use PSP and RBAC or other forms of authorization to mitigate the risk arising out of such privileged container usage. PSPs should be in place to restrict access to create privileged containers to specific roles only, and access to those roles should be restricted using RBAC role bindings.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Follow Kubernetes documentation and setup PSP and RBAC authorization for your cluster."
              reference     : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2421"
              cmd           : "@KUBECTL_PATH@/kubectl get psp"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>

            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "1.6.8 Place compensating controls in the form of PSP and RBAC for privileged containers usage - rolebinding"
              info          : "Use Pod Security Policies (PSP) and RBAC authorization to mitigate the risk arising from using privileged containers.

Rationale:

A number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Privileged containers pose a risk to the underlying host infrastructure. You should use PSP and RBAC or other forms of authorization to mitigate the risk arising out of such privileged container usage. PSPs should be in place to restrict access to create privileged containers to specific roles only, and access to those roles should be restricted using RBAC role bindings.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Follow Kubernetes documentation and setup PSP and RBAC authorization for your cluster."
              reference     : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2421"
              cmd           : "@KUBECTL_PATH@/kubectl get rolebinding"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>

            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "1.6.8 Place compensating controls in the form of PSP and RBAC for privileged containers usage - clusterrolebinding"
              info          : "Use Pod Security Policies (PSP) and RBAC authorization to mitigate the risk arising from using privileged containers.

Rationale:

A number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Privileged containers pose a risk to the underlying host infrastructure. You should use PSP and RBAC or other forms of authorization to mitigate the risk arising out of such privileged container usage. PSPs should be in place to restrict access to create privileged containers to specific roles only, and access to those roles should be restricted using RBAC role bindings.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
              solution      : "Follow Kubernetes documentation and setup PSP and RBAC authorization for your cluster."
              reference     : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2421"
              cmd           : "@KUBECTL_PATH@/kubectl get clusterrolebinding"
              expect        : "MANUAL_REVIEW"
              dont_echo_cmd : YES
              severity      : MEDIUM
            </custom_item>
          </else>
        </if>

        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
              file        : "@KUBECONFIG@"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "1.7.6 Do not admit root containers"
              info          : "Do not generally permit containers to be run as the root user.

Rationale:

Containers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout.

Ideally, all containers should run as a defined non-UID 0 user.

There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container.

If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP."
              solution      : "Create a PSP as described in the Kubernetes documentation, ensuring that the '.spec.runAsUser.rule' is set to either 'MustRunAsNonRoot' or 'MustRunAs' with the range of UIDs not including 0."
              reference     : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2421"
              cmd           : "@KUBECTL_PATH@/kubectl get psp --kubeconfig @KUBECONFIG@ -o=custom-columns=name:.metadata.name,rule:.spec.runAsUser.rule,min:.spec.runAsUser.ranges.min"
              expect        : "^.*[\\s](MustRunAs[\\s]+[1-9][0-9]*|MustRunAsNonRoot[\\s]+<none>)$"
              dont_echo_cmd : YES
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "1.7.6 Do not admit root containers"
              info          : "Do not generally permit containers to be run as the root user.

Rationale:

Containers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout.

Ideally, all containers should run as a defined non-UID 0 user.

There should be at least one PodSecurityPolicy (PSP) defined which does not permit root users in a container.

If you need to run root containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP."
              solution      : "Create a PSP as described in the Kubernetes documentation, ensuring that the '.spec.runAsUser.rule' is set to either 'MustRunAsNonRoot' or 'MustRunAs' with the range of UIDs not including 0."
              reference     : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2421"
              cmd           : "@KUBECTL_PATH@/kubectl get psp -o=custom-columns=name:.metadata.name,rule:.spec.runAsUser.rule,min:.spec.runAsUser.ranges.min"
              expect        : "^.*[\\s](MustRunAs[\\s]+[1-9][0-9]*|MustRunAsNonRoot[\\s]+<none>)$"
              dont_echo_cmd : YES
            </custom_item>
          </else>
        </if>

        <if>
          <condition type:"AND">
            <custom_item>
              type        : FILE_CHECK
              description : "Check if kubeconfig exists"
              file        : "@KUBECONFIG@"
            </custom_item>
          </condition>

          <then>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "1.7.7 Do not admit containers with dangerous capabilities"
              info          : "Do not generally permit containers with potentially dangerous capabilities.

Rationale:

Containers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. By default with Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers.

Ideally, all containers should drop this capability.

There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching.

If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP."
              solution      : "Create a PSP as described in the Kubernetes documentation, ensuring that the '.spec.requiredDropCapabilities' is set to include either 'NET_RAW' or 'ALL'."
              reference     : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2421"
              cmd           : "@KUBECTL_PATH@/kubectl get psp --kubeconfig @KUBECONFIG@ -o=custom-columns=name:.metadata.name,requiredDropCapabilities:.spec.requiredDropCapabilities"
              expect        : "^.*[\\s]\\[[A-z\\s]*(ALL|NET_RAW)[A-z\\s]*\\]$"
              dont_echo_cmd : YES
            </custom_item>
          </then>

          <else>
            <custom_item>
              system        : "Linux"
              type          : CMD_EXEC
              description   : "1.7.7 Do not admit containers with dangerous capabilities"
              info          : "Do not generally permit containers with potentially dangerous capabilities.

Rationale:

Containers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. By default with Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers.

Ideally, all containers should drop this capability.

There should be at least one PodSecurityPolicy (PSP) defined which prevents containers with the NET_RAW capability from launching.

If you need to run containers with this capability, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP."
              solution      : "Create a PSP as described in the Kubernetes documentation, ensuring that the '.spec.requiredDropCapabilities' is set to include either 'NET_RAW' or 'ALL'."
              reference     : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSCv6|5.1,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2S,NESA|T3.2.1,SWIFT-CSCv1|2.3"
              see_also      : "https://workbench.cisecurity.org/files/2421"
              cmd           : "@KUBECTL_PATH@/kubectl get psp -o=custom-columns=name:.metadata.name,requiredDropCapabilities:.spec.requiredDropCapabilities"
              expect        : "^.*[\\s]\\[[A-z\\s]*(ALL|NET_RAW)[A-z\\s]*\\]$"
              dont_echo_cmd : YES
            </custom_item>
          </else>
        </if>
      </then>
    </if>
  </then>
</if>

<custom_item>
  system      : "Linux"
  type        : PROCESS_CHECK
  description : "CIS_Kubernetes_v1.4.1_Level_2.audit from CIS Kubernetes Benchmark v1.4.1"
  info        : "NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  reference   : "800-171|3.4.2,800-53|CM-6,800-53r5|CM-6,CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,SWIFT-CSCv1|2.3"
  name        : "kubelet"
  status      : ON
  severity    : MEDIUM
</custom_item>

</check_type>
