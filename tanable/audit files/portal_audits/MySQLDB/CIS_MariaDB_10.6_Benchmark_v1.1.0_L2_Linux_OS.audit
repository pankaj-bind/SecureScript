#TRUSTED 18ffd43d3a5836a6f4f6c4c03bc31dfb0923704542adc0d900a66cfb49f40e5f2ee71b7500c87b7d70341c2fad29ed1ce303377443ed986bf3bb8d25d1f980171e855205636c08d6f027ad09192c1b9e9a3dca17e14bdd02496058776b3bfef68e9a74e77ac17298e3521c5db1b5bef60fbd0822dc36a18fb225113682195524206f357c88a84bb98447cbf13138af97f65648d3f5601b7d2418f48ac17d715f990dde23204d6e064e0cbfc180c926d34d06d297b4f186ecca97219087ea1b3a10200ed2cddb0bdb1288b69fe54b8cfce1091109b271e5ce22edbd6ae8b2e2ccec1c84fff3e8980a16fe695180a9f2769e7f57039644a596596d53834cf3decf753bc158915cc52e20a2774ea5b96d55554c823e59ca2a0ec36adac6addbd72f3fb4646c84ec8431e1d56710925f7f69184fd8c88f08b34b32e111bd2574e26a3f452d369eac2797e510686364dbf04faa059588cdfe4b7efab9a6cbe447293f97a012498e7c4bb6d25c7812f719b46c9a1e0f078774f560ec1e6a1470ef8224393dc37be1282f930673f2685b55790eef777cdfb5225f5aa78fb24ffbfa4d3ec3dd832610aa96addf01a8adfd26ea09a16c6c1c8a71bd48a87f6de3635f678b55d03a157e732560cf4243659e0037920e366dfb2efcaa8026dde5771c475e4b2a4a2ee4f7e11bf29d4ba76b1f48e41e5f2de9ff3968653f6ce65f65b6a6908f
#TRUST-RSA-SHA256 986e92d4e5be377de7dcf1a6e59a49a783bcb49a9a1eb54a164c751711a0e1a200aa97e3b557d66555856fb5bb19829f8f62de40f3582e42d6188846cf9bf5cb8df499e408cf13d8167cb8a56050e3c3f84fc8946a844190be4014764ee12b4b26ef2de28ee14668c37b91be4b82929727addaeb071784561077e31082866930f0619398842786e317c5379fec3609d81e68128e3a8e4fe22168fe2240ec6ac946b1b67e15a6b749952452f60d318b52dc9a3faea50cc3cc4e547d72dc8a43ab3a0291ad65af07f75f9621ea302ae1730565593b094a693baa90ad786cd1ac8e5a52ac069dc4075c866b5bc29d6d31c8f83be7f2005acdf35a595d4e607006eccbc1a3230d112b28357a0ba9676912393d04f886984bb33c5554f77bcc25ed14a06df72498b8e74184d6a1ea961a592025da71360536c5b7d3aee0b7860ad2b927ea7bf7ba2dd2c01d0e52990a07fbeb1c3efaf003f62382201e12e9f23047a3e84c73136bd83331547293a5855997b1ee4371abf595c7a2b86cf20e84d9caba186cce8ec8738f1379c20f710b31721dd2d4d37cfcbbdb494275f44cb32cb7e9824f3d76389359aabcfe5839ef43fae4090a68d4e58beb7a393bdab6170d974d23d2ae6a7d5e697c2877b3650dc218493af4990c8476bb3891305d714243a248f87707b4499fe6e3502a91606cc528458d06255174313731b37405986552048f
#
# This script is Copyright (C) 2004-2025 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.2 $
# $Date: 2025/01/06 $
#
# Description : This document implements the security configuration as recommended by the
#               CIS MariaDB 10.6 Benchmark
#
#<ui_metadata>
#<display_name>CIS MariaDB 10.6 on Linux L2 v1.1.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>MariaDB 10.6</name>
#  <profile>L2 OS Linux</profile>
#  <version>1.1.0</version>
#  <link>https://workbench.cisecurity.org/benchmarks/16527</link>
#</spec>
#<labels>database,cis,mariadb,mariadb_10.6,linux,distribution_independent_linux</labels>
#<benchmark_refs>CCE,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>MARIADB_CNF</name>
#    <default>/etc/mysql/mariadb.conf.d/50-server.cnf</default>
#    <description>MariaDB Primary Config File</description>
#    <info>MariaDB Primary Config File</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>MYSQL_USER</name>
#    <default>mysql</default>
#    <description>MySQL User Account</description>
#    <info>This is your MySQL user account.</info>
#    <value_type>UNIX_ACCT</value_type>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"OR">
    <custom_item>
      type        : CMD_EXEC
      description : "Linux found"
      cmd         : "uname -a"
      expect      : "Linux"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_MariaDB_10.6_Benchmark_v1.1.0_L2_Linux_OS.audit from CIS MariaDB 10.6 Benchmark"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "~/.mysql_history Exists"
          cmd         : "/bin/find / -name \".mysql_history\" | /usr/bin/awk '{ print } END { if (NR!=0) print \"none\" }'"
          expect      : "none"
        </custom_item>
      </condition>

      <then>
        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "1.3 Disable MariaDB Command History - .mysql_history"
          info        : "On Unix, the mysql client writes a record of executed statements to a history file. By default, this file is named .mysql_history and is created in your home directory. To specify a different file, set the value of the MYSQL_HISTFILE environment variable.

The .mysql_history file should be protected with a restrictive access mode because sensitive information might be written to it, such as the text of SQL statements that contain passwords.

Rationale:

Disabling the MariaDB Client and MariaDB Shell command history reduces the probability of exposing sensitive information, such as passwords, encryption keys, or other sensitive data or information."
          solution    : "For MariaDB Client perform the following steps to remediate this setting:

Remove .mysql_history if it exists.

Use either of the techniques below to prevent it from being created again:

Set the MYSQL_HISTFILE environment variable to /dev/null. This will need to be placed in the shell's startup script.

Create .mysql_history as a symbolic to /dev/null.

> ln -s /dev/null $HOME/.mysql_history

Default Value:

By default, the MariaDB command history file is located in /root/.mysql_history."
          reference   : "800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|MP-6,800-53r5|MP-6,800-53r5|SR-12,CSCv7|13.2,CSCv8|3.5,CSF|PR.DS-3,CSF|PR.IP-6,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.8.3.2,ITSG-33|MP-6,LEVEL|2A,NESA|T1.4.1,NESA|T1.4.2,NIAv2|MS5b,NIAv2|MS6,NIAv2|MS9,NIAv2|MS10a,NIAv2|MS10b,NIAv2|MS10c,NIAv2|MS10d,NIAv2|MS10e,NIAv2|MS10f,NIAv2|MS11a,NIAv2|MS11b,NIAv2|MS12a,NIAv2|MS12b,NIAv2|MS12c,NIAv2|MS13,NIAv2|MS14,NIAv2|MS17,NIAv2|MS18a,NIAv2|MS18b,NIAv2|MS18c,NIAv2|MS20,NIAv2|MS21,NIAv2|NS16,QCSC-v1|3.2,QCSC-v1|6.2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
          cmd         : "a=$(for f in $(/bin/find / -name \".mysql_history\"); do /usr/bin/file $f | /bin/egrep -cv \"symbolic link to /dev/null\"; done;); if [ \"$a\" = \"0\" ]; then echo \"none\";else for g in $(/bin/find / -name \".mysql_history\"); do /usr/bin/file $g |/bin/egrep -v \"symbolic link to /dev/null\";done; fi"
          expect      : "none"
        </custom_item>
      </then>

      <else>
        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "1.3 Disable MariaDB Command History - ~/.mysql_history"
          info        : "On Unix, the mysql client writes a record of executed statements to a history file. By default, this file is named .mysql_history and is created in your home directory. To specify a different file, set the value of the MYSQL_HISTFILE environment variable.

The .mysql_history file should be protected with a restrictive access mode because sensitive information might be written to it, such as the text of SQL statements that contain passwords.

Rationale:

Disabling the MariaDB Client and MariaDB Shell command history reduces the probability of exposing sensitive information, such as passwords, encryption keys, or other sensitive data or information."
          solution    : "For MariaDB Client perform the following steps to remediate this setting:

Remove .mysql_history if it exists.

Use either of the techniques below to prevent it from being created again:

Set the MYSQL_HISTFILE environment variable to /dev/null. This will need to be placed in the shell's startup script.

Create .mysql_history as a symbolic to /dev/null.

> ln -s /dev/null $HOME/.mysql_history

Default Value:

By default, the MariaDB command history file is located in /root/.mysql_history."
          reference   : "800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|MP-6,800-53r5|MP-6,800-53r5|SR-12,CSCv7|13.2,CSCv8|3.5,CSF|PR.DS-3,CSF|PR.IP-6,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.8.3.2,ITSG-33|MP-6,LEVEL|2A,NESA|T1.4.1,NESA|T1.4.2,NIAv2|MS5b,NIAv2|MS6,NIAv2|MS9,NIAv2|MS10a,NIAv2|MS10b,NIAv2|MS10c,NIAv2|MS10d,NIAv2|MS10e,NIAv2|MS10f,NIAv2|MS11a,NIAv2|MS11b,NIAv2|MS12a,NIAv2|MS12b,NIAv2|MS12c,NIAv2|MS13,NIAv2|MS14,NIAv2|MS17,NIAv2|MS18a,NIAv2|MS18b,NIAv2|MS18c,NIAv2|MS20,NIAv2|MS21,NIAv2|NS16,QCSC-v1|3.2,QCSC-v1|6.2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
          cmd         : "/bin/find / -name \".mysql_history\" | /usr/bin/awk '{ print } END { if (NR==0) print \"none\" }'"
          expect      : "none"
        </custom_item>
      </else>
    </if>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "1.5 Ensure Interactive Login is Disabled"
      info        : "When created, the MariaDB user may have interactive access to the operating system, which means that the MariaDB user could login to the host as any other user would.

Rationale:

Preventing the MariaDB user from logging in interactively may reduce the impact of a compromised MariaDB account. There is also more accountability, as accessing the operating system where the MariaDB server lies will require the user's own account. Interactive access by the MariaDB user is unnecessary and should be disabled.

Impact:

This setting will prevent the MariaDB administrator from interactively logging into the operating system using the MariaDB user. Instead, the administrator will need to log in using one's own account."
      solution    : "Execute one of the following commands in a terminal:

usermod -s /bin/false mysql

Or

usermod -s /sbin/nologin mysql"
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|4.3,CSCv8|5.4,CSF|PR.AC-4,CSF2.0|PR.AA-05,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
      cmd         : "/usr/bin/getent passwd @MYSQL_USER@ | /usr/bin/egrep \"^.*[/bin/false|/sbin/nologin]$\" | /usr/bin/awk '{print} END {if (NR == 1) print \"pass\"}'"
      expect      : "pass"
    </custom_item>

    <if>
      <condition auto:"FAILED" type:"OR">
        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK
          description : "chroot"
          file        : "@MARIADB_CNF@"
          regex       : "(?<=^chroot=).+$"
          expect      : "(?<=^chroot=).+$"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "systemctl"
          cmd         : "systemctl status mariadb.service | /bin/grep 'Main PID'"
          expect      : "^[\\s]*Main PID:[\\s]*[0-9]+[\\s]+\\(((?!root).)*\\)[\\s]*$"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "docker"
          cmd         : "docker ps"
          expect      : "mariadb"
        </custom_item>
      </condition>

      <then>
        <report type:"PASSED">
          description : "1.7 Ensure MariaDB is Run Under a Sandbox Environment"
          info        : "Use of the chroot() system call at startup, Systemd with settings to achieve isolation, or docker will put MariaDB in a Sandbox environment.

Rationale:

Running MariaDB in a Sandbox environment may reduce the impact of a MariaDB-born vulnerability by making portions of the file system inaccessible to the MariaDB instance.

Impact:

Use of the chroot option somewhat limits LOAD DATA INFILE and SELECT ... INTO OUTFILE."
          solution    : "Perform one of the following steps to remediate this setting:

Configure MariaDB to use chroot:

Choose a non-system partition <chroot location> for MariaDB

Add chroot=<chroot_location> to the my.cnf option file

Configure MariaDB to run under systemd:

If MariaDB is managed by systemd and running, stop the service:

$ sudo systemctl stop <mysqld>.service

If a mysql user and group do not already exist, create them:

$ sudo groupadd mysql
$ sudo useradd -r -g mysql -s /bin/false mysql

Set the ownership of the base directory:

$ sudo chown -R mysql:mysql /usr/local/mysql/

Create or modify the <mysqld>.service file in /lib/systemd/system to include the following entries, if not already present:

[Unit]
Description=MariaDB Server

[Install]
WantedBy=multi-user.target

[Service]
User=mysql
Group=mysql

If MariaDB was not already already managed by systemd execute this command:

$ sudo systemctl daemon-reload

Start the MariaDB server:

$ sudo systemctl start <mariadb>.service

If you would like MariaDB to automatically run at startup execute this command:

$ sudo systemctl enable <mariadb>.service

Follow documentation in the references for standing up MariaDB in a Docker container. During setup, follow the special notes below.

Do not set MARIADB_ALLOW_EMPTY_ROOT_PASSWORD or MYSQL_ALLOW_EMPTY_PASSWORD to a non-empty value.

Ensure that passwords are not set as values of any environment variables being passed to the Docker container. For example, do not orchestrate your container by passing MARIADB_ROOT_PASSWORD= as an environment attribute. Instead, securely set MARIADB_ROOT_PASSWORD within your environment, then simply tell Docker to pass MARIADB_ROOT_PASSWORD (without setting the value) to the container."
          reference   : "800-171|3.13.4,800-53|SC-4,800-53r5|SC-4,CSCv7|2.10,CSCv8|3.12,CSF2.0|PR.DS-01,CSF2.0|PR.DS-02,CSF2.0|PR.DS-10,CSF2.0|PR.IR-01,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-4,ITSG-33|SC-4a.,LEVEL|2M"
          see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
          show_output : YES
        </report>
      </then>
    </if>

    <report type:"WARNING">
      description : "2.1.5 Point-in-Time Recovery"
      info        : "With binlogs it is possible to implement point-in-time recovery. This makes it possible to restore the changes between the last full backup and the point-in-time.

Enabling binlogs is not sufficient. The binlogs need to be backed up to separate media. The restore procedure should be created and tested. The data in the binlog files may contain sensitive information which needs be stored in the proper location with restrictive permissions and may require encryption.

Rationale:

Using binlogs can reduce the amount of information lost when recovering from a backup.

Impact:

Binlogs can grow quite large and take up a large amount of space so auto remove needs to be put into place.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Enable binlogs, then create and test a restore procedure.

Default Value:

0"
      reference   : "800-171|3.8.9,800-53|CP-9,800-53|CP-10,800-53r5|CP-9,800-53r5|CP-10,CSCv7|10.2,CSCv8|11.2,CSF|PR.IP-4,CSF|RC.RP-1,CSF|RS.RP-1,CSF2.0|PR.DS-01,CSF2.0|PR.DS-10,CSF2.0|PR.DS-11,CSF2.0|RC.RP,CSF2.0|RC.RP-01,CSF2.0|RC.RP-02,CSF2.0|RC.RP-03,CSF2.0|RC.RP-05,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(ii),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|2A,NESA|M5.2.3,NESA|T2.2.4,QCSC-v1|5.2.3,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <report type:"WARNING">
      description : "2.7 Lock Out Accounts if Not Currently in Use"
      info        : "If users with accounts will not be using their account for some time, to reduce the risk of attacks or inappropriate account usage or if suspicions exist that an account might be under attack, disabling the account will secure it and once it's ready to resume use it can easily be re-enabled.

Rationale:

Only have active accounts that will be used.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "To lock accounts - example:

ALTER USER 'jeffrey'@'localhost' ACCOUNT LOCK;

To unlock accounts - example

ALTER USER 'jeffrey'@'localhost' ACCOUNT UNLOCK;

Note: Works for CREATE as well. It is good practice to LOCK an account if created ahead of time.

Default Value:

Accounts are unlocked by default."
      reference   : "800-171|3.1.1,800-53|AC-2(3),800-53r5|AC-2(3),CN-L3|7.1.3.2(e),CN-L3|8.1.4.2(c),CSCv7|16.9,CSCv8|5.3,CSF|PR.AC-1,CSF|PR.AC-4,CSF2.0|DE.CM-01,CSF2.0|DE.CM-03,CSF2.0|PR.AA-01,CSF2.0|PR.AA-05,CSF2.0|PR.DS-10,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.9.2.6,ITSG-33|AC-2(3),LEVEL|2M,NIAv2|AM26,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,TBA-FIISB|36.2.2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <report type:"WARNING">
      description : "2.8 Ensure Socket Peer-Credential Authentication is Used Appropriately"
      info        : "The server-side unix_socket authentication plugin authenticates clients that connect to the MariaDB server from the local host through the Unix socket file. Users authenticated using unix_socket need not specify a password when connecting to the server. However, users authenticated by the unix_socket plugin are restricted from connecting remotely; they can only connect from the local host through the Unix socket file. This method is only suitable in situations where the server administrator OS account access is restricted.

Rationale:

This method may be desirable in specific cases, including:

The Linux system where MariaDB is running is dedicated to the MariaDB server and only the MariaDB DBA and OS Admin have access.

When control over user authentication is centralized in the operating system.

It is desirable that audit trails in the database and operating system can use the same user names.

For certain other narrow installation use cases unix_socket may be desirable.

Only local connections for a user.

Impact:

Things to consider when using the operating system to authenticate users:

The user must have an operating system account on the computer which must be accessed.

If a user has logged in using this method and steps away from the terminal, another user could easily log in because this user does not need any passwords or credentials. This could pose a serious security problem.

When an operating system is used to authenticate database users, managing distributed database environments and database links requires special care. Special care must also be taken not to leave such a terminal unlocked and unattended. Hence, we recommend that you carefully evaluate your requirements before opting for unix_socket.

This will not work where distributed connections are required.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "If the plugin is active and you need to disable it in your environment, add the following option under the [mysqld] option group in your MariaDB configuration file, then restart MariaDB:

unix_socket=OFF

If the plugin is disabled but you seek to use it, ensure the following option is set under the [mysqld] option group in your MariaDB configuration file, then restart MariaDB:

unix_socket=ON

To enable an OS user to login to MariaDB using unix_socket, include 'unix_socket' as an authentication plugin in your IDENTIFIED VIA clause of CREATE USER commands. For example, run:

CREATE USER '<user>'@'localhost' IDENTIFIED VIA unix_socket;

The user can then login using:

mysql -u <user>

Default Value:

The unix_socket plugin is ON by default."
      reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,800-53r5|IA-8(2),CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,CSF2.0|ID.AM-01,CSF2.0|ID.AM-02,CSF2.0|PR.PS-01,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|2M,NESA|T1.2.1,NESA|T1.2.2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <report type:"WARNING">
      description : "2.9 Ensure MariaDB is Bound to an IP Address"
      info        : "By default, the MariaDB server accepts TCP/IP connections from MariaDB user accounts on all server host IPv6 and IPv4 interfaces. You can make this configuration more restrictive by setting the bind_address configuration option to a specific IPv4 or IPv6 address so that the server only accepts TCP/IP connections on that address.

Rationale:

Limiting the IP address provides additional controls and restrictions on how client applications can connect to MariaDB. If not configured to a specific IP all IPs for this server can be used to connect to MariaDB.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "For example, to have the MariaDB server only accept connections on a specific IPv4 address, add an entry similar to this under the [mysqld] option group in MariaDB configuration files:

bind_address=192.0.2.24

This setting typically appears in /etc/mysql/mariadb.conf.d/50-server.cnf.
In the case above, clients can connect to the server using --host=192.0.2.24. Connections on other server host addresses are not permitted.

Default Value:

Not set. On some linux variants (Ubuntu, Debian), bind_address is set to 127.0.0.1."
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|PL-8,800-53|SA-8,800-53r5|PL-8,800-53r5|SA-8,CSCv8|16.10,CSF|ID.AM-3,CSF|PR.IP-2,CSF2.0|ID.AM-03,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,QCSC-v1|4.2,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <report type:"WARNING">
      description : "2.10 Limit Accepted Transport Layer Security (TLS) Versions"
      info        : "MariaDB supports multiple versions of TLS. The higher the version the stronger the security and/or better the performance.

Rationale:

Requiring clients attempting to connect to MariaDB to use higher versions of TLS to better protect data in transit.

Impact:

Connections attempting to use an unsupported version of TLS will fail.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Set the version(s) of TLS you wish to accept by setting the tls_version option to a comma-separated (no whitespace) string in MariaDB configuration files.
For example, to only accept TLS 1.2 or 1.3 connections, set tls_version likeso:

tls_version=TLSv1.2,TLSv1.3

Note: with this setting, only clients that support the specified TLS version(s) are able to establish an encrypted connection to the server.

Default Value:

TLSv1.1,TLSv1.2,TLSv1.3"
      reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SA-15,800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SA-15,800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv7|18.5,CSCv8|3.10,CSCv8|16.11,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.IP-2,CSF|PR.PT-4,CSF2.0|ID.RA-09,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,CSF2.0|PR.AA-05,CSF2.0|PR.DS-02,CSF2.0|PR.PS-06,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS5,NIAv2|SS6a,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|4.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <report type:"WARNING">
      description : "2.11 Require Client-Side Certificates (X.509)"
      info        : "Client-side certificates may be used as proof of identity.

Rationale:

Requiring client-side certificates provides additional validation of a user's identity.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Create or Alter users using the REQUIRE X509.
For example:

CREATE USER 'newuser2'@'%' IDENTIFIED BY <password> require x509;

For accounts created with a REQUIRE X509 clause, clients must specify at least --ssl-cert and --ssl-key. In addition, --ssl-ca (or --ssl-capath) is recommended so that the public certificate provided by the server can be verified.
For example:

mysql --ssl-ca=ca.pem \
      --ssl-cert=client-cert.pem \
      --ssl-key=client-key.pem"
      reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,CSF2.0|PR.AA-05,CSF2.0|PR.DS-02,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <report type:"WARNING">
      description : "2.12 Ensure Only Approved Ciphers are Used"
      info        : "MariaDB supports multiple encryption ciphers. Ciphers can vary in strength, speed and overhead.

Rationale:

Requiring clients attempting to connect to MariaDB to use strong ciphers protects data in transit.

Impact:

Connections attempting to use an unsupported cipher will fail.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Set ssl_cipher to one or more approved cipher suites in your MariaDB configuration file, then restart MariaDB.
For example, set:

ssl_cipher='ECDHE-ECDSA-AES128-GCM-SHA256'

Default Value:

None"
      reference   : "800-53|SA-15,800-53r5|SA-15,CSCv7|18.5,CSCv8|16.11,CSF|PR.IP-2,CSF2.0|ID.RA-09,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),LEVEL|2A,NIAv2|SS5,NIAv2|SS6a,QCSC-v1|4.2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <if>
      <condition auto:"FAILED" type:"AND">
        <custom_item>
          system      : "Linux"
          type        : CMD_EXEC
          description : "allow-suspicious-udfs startup"
          cmd         : "/bin/ps aux | /bin/grep [m]ariadbd | /bin/grep 'allow-suspicious-udfs' | /usr/bin/awk '{print} END {if (NR>0) print \"Fail\"; else print \"Pass\"}'"
          expect      : "Pass"
        </custom_item>

        <custom_item>
          system      : "Linux"
          type        : FILE_CONTENT_CHECK_NOT
          description : "allow-suspicious-udfs option file"
          file        : "@MARIADB_CNF@"
          regex       : "allow-suspicious-udfs"
          expect      : "allow-suspicious-udfs"
        </custom_item>
      </condition>

      <then>
        <report type:"PASSED">
          description : "4.3 Ensure 'allow-suspicious-udfs' is Set to 'OFF'"
          info        : "This option prevents attaching arbitrary shared library functions as user-defined functions by checking for at least one corresponding method named _init, _deinit, _reset, _clear, or _add.

Rationale:

Preventing shared libraries that do not contain user-defined functions from loading will reduce the attack surface of the server."
          solution    : "Perform the following to establish the recommended state:

Remove --allow-suspicious-udfs from the mariadbd start up command line.

Remove allow-suspicious-udfs from the MariaDB option file.

Default Value:

OFF"
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|PL-8,800-53|SA-8,800-53r5|PL-8,800-53r5|SA-8,CSCv8|16.10,CSF|ID.AM-3,CSF|PR.IP-2,CSF2.0|ID.AM-03,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,QCSC-v1|4.2,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
          show_output : YES
        </report>
      </then>
    </if>

    <report type:"WARNING">
      description : "4.8 Ensure 'sql_mode' Contains 'STRICT_ALL_TABLES'"
      info        : "When data changing statements are made (i.e., INSERT, UPDATE), MariaDB can handle invalid or missing values differently depending on whether strict SQL mode is enabled. When strict SQL mode is enabled, data may not be truncated or otherwise 'adjusted' to make the data changing statement work.

Rationale:

Without strict mode the server tries to proceed with the action when an error might have been a more secure choice. For example, by default MariaDB will truncate data if it does not fit in a field, which can lead to unknown behavior, or be leveraged by an attacker to circumvent data validation.

Impact:

Applications relying on the MariaDB database should be aware that STRICT_ALL_TABLES is in use, such that error conditions are handled appropriately.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Set STRICT_ALL_TABLES to the sql_mode in the server's global configuration, for example:

SET GLOBAL sql_mode ='STRICT_ALL_TABLES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

Default Value:

STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|PL-8,800-53|SA-8,800-53r5|PL-8,800-53r5|SA-8,CSCv8|16.10,CSF|ID.AM-3,CSF|PR.IP-2,CSF2.0|ID.AM-03,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,QCSC-v1|4.2,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <custom_item>
      system      : "Linux"
      type        : CMD_EXEC
      description : "4.9 Enable data-at-rest encryption in MariaDB"
      info        : "Data-at-rest encryption protects the privacy of your information, prevents data breaches and helps meet regulatory requirements.

Rationale:

File system based encryption does a good job of protecting against data theft on devices unable to limit physical access. It does not, however, protect against users who have or gain access to the operating system, backups, over the network copies, etc. Encrypting data from MariaDB adds an additional layer of data protection."
      solution    : "MariaDB's data-at-rest encryption requires the use of a key management and encryption plugin.
Create the key file:

$ sudo mkdir -p /etc/mysql/encryption && (echo -n '1;' ; openssl rand -hex 32 ) | sudo tee -a  /etc/mysql/encryption/keyfile

Generate a random encryption password:

$ sudo openssl rand -hex 128 | sudo tee -a /etc/mysql/encryption/keyfile.key

Encrypt the key file:

$ sudo openssl enc -aes-256-cbc -md sha1 \
   -pass file:/etc/mysql/encryption/keyfile.key \
   -in /etc/mysql/encryption/keyfile \
   -out /etc/mysql/encryption/keyfile.enc

Delete the unencrypted key file:

$ sudo rm /etc/mysql/encryption/keyfile

Set permissions and ownership on the keyfile and key:

$ sudo chown mysql:mysql -R /etc/mysql/encryption
$ sudo chmod 640 /etc/mysql/encryption/keyfile*

Edit mariadb.cnf to resemble the following block, optionally uncommenting file_key_management_encryption_algorithm = AES_CTR:

[mariadb]
...
plugin_load_add = file_key_management
file_key_management_filename = /etc/mysql/encryption/keyfile.enc
file_key_management_filekey = FILE:/etc/mysql/encryption/keyfile.key

# Binary Log Encryption
encrypt_binlog = ON
# Redo Log Encryption
innodb_encrypt_log = ON
# Encrypting Temporary Files
encrypt_tmp_files = ON
# Encrypt Temporary Tables
innodb_encrypt_temporary_tables = ON

# You can configure InnoDB encryption to automatically have all new InnoDB tables automatically encrypted, or specify encrypt per table.
innodb_encrypt_tables = ON

# Uncomment the line below if utilizing MariaDB built with OpenSSL
# file_key_management_encryption_algorithm = AES_CTR

If needed, see References for information about file_key_management_encryption_algorithm and OpenSSL usage.
Restart MariaDB:

$ sudo systemctl restart mariadb.service

Run ALTER to enable encryption (Note: This will lock the table as table is encrypted).

ALTER TABLE tab1
   ENCRYPTED=YES ENCRYPTION_KEY_ID=1;

Revisit recommendation 3.10 after completing remediation.

Default Value:

At rest encryption is off by default.

When innodb_encrypt_tables is set to ON, InnoDB tables are automatically encrypted by default.

mariadb.cnf.

innodb_encrypt_tables=ON"
      reference   : "800-171|3.5.2,800-171|3.13.16,800-53|IA-5(1),800-53|SC-28,800-53|SC-28(1),800-53r5|IA-5(1),800-53r5|SC-28,800-53r5|SC-28(1),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.8,CSCv8|3.11,CSF|PR.AC-1,CSF|PR.DS-1,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,CSF2.0|PR.DS-01,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(d),HIPAA|164.312(e)(2)(ii),ITSG-33|IA-5(1),ITSG-33|SC-28,ITSG-33|SC-28a.,ITSG-33|SC-28(1),LEVEL|2A,NESA|T5.2.3,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
      cmd         : "/usr/bin/crontab -l | /bin/grep mariabackup | /bin/grep openssl | /usr/bin/awk '{print} END { if (NR>0) print \"Pass\"; else print \"Fail\"}'"
      expect      : "Pass"
    </custom_item>

    <report type:"WARNING">
      description : "5.3 Ensure 'PROCESS' is Not Granted to Non-Administrative Users"
      info        : "The PROCESS privilege found in the mysql.user table determines whether a given user can see statement execution information for all sessions.

Rationale:

The PROCESS privilege allows principals to view currently executing MariaDB statements beyond their own, including statements used to manage passwords. This may be leveraged by an attacker to compromise MariaDB or to gain access to potentially sensitive data.

Impact:

Users denied the PROCESS privilege may also be denied use of SHOW ENGINE.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Perform the following steps to remediate this setting:

Enumerate the non-administrative users found in the result set of the audit procedure

For each user, issue the following SQL statement (replace <user> with the non-administrative user):

REVOKE PROCESS ON *.* FROM '<user>';"
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|14.6,CSCv8|5.4,CSF|PR.AC-4,CSF2.0|PR.AA-05,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|2M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <report type:"WARNING">
      description : "6.3 Ensure 'log_warnings' is Set to '2'"
      info        : "The log_warnings system variable, set to 2 by default, specifies the verbosity of events sent to the MariaDB error log. A value of 2 enables logging of error and warning messages, a value of 3 also includes informational logging, a value of 1 logs only errors.

Rationale:

This might help to detect malicious behavior by logging communication errors and aborted connections.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Perform the following actions to remediate this setting:

Open the MySQL configuration file (mariadb.cnf)

Ensure the following line is found in the mariadbd section

log_warnings = 2

Default Value:

The option is enabled (2) - errors and warning events are logged - by default."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|6.3,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,CSF2.0|DE.CM-01,CSF2.0|DE.CM-03,CSF2.0|DE.CM-09,CSF2.0|PR.PS-04,CSF2.0|RS.AN-03,CSF2.0|RS.AN-06,CSF2.0|RS.AN-07,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|2A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <report type:"WARNING">
      description : "6.4 Ensure Audit Logging Is Enabled"
      info        : "Enabling audit logging is an important consideration for a production environment, and MariaDB plugin exist to help with this. Enable audit logging for

Connect events

Query and Table events (optional)

Rationale:

Audit logging helps to identify who changed what and when. The audit log might be used as evidence in investigations. It might also help to identify what an attacker was able to accomplish.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Although the plugin's shared library is distributed with MariaDB, the plugin is not actually installed by default.
Add the following to MariaDB's config file.

[mariadb]
...
#MariaDB plugin
plugin_load_add = server_audit
server_audit_logging=ON
server_audit_events=CONNECT

Reboot the instance."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-2,800-53|AU-7,800-53|AU-12,800-53r5|AU-2,800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(c),CN-L3|8.1.4.3(a),CSCv7|6.2,CSCv8|8.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,CSF2.0|DE.CM-01,CSF2.0|DE.CM-03,CSF2.0|DE.CM-09,CSF2.0|PR.PS-04,CSF2.0|RS.AN-03,CSF2.0|RS.AN-06,CSF2.0|RS.AN-07,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-2,ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|2A,NESA|M1.2.2,NESA|M5.5.1,NIAv2|AM7,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|SS30,NIAv2|VL8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <report type:"WARNING">
      description : "6.6 Ensure Binary and Relay Logs are Encrypted"
      info        : "The encrypt_binlog system variable may be used to configure encryption of the binary and relay logs. This may be configured to ON even if binary logging is not enabled in order to encrypt relay log files.

Rationale:

The database, and thus the binary and relay logs, may contain sensitive information. Encrypting the binary and relay logs protects all data stored in these logs from internal and external threats.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Encryption of binary logs is configured by the encrypt_binlog system variable.
To remediate misconfiguration, add encrypt_binlog and restart MariaDB.

[mariadb]
...
# Binary Log Encryption
encrypt_binlog=ON

Default Value:

The default Default Value: OFF"
      reference   : "800-171|3.5.2,800-171|3.13.16,800-53|IA-5(1),800-53|SC-28,800-53|SC-28(1),800-53r5|IA-5(1),800-53r5|SC-28,800-53r5|SC-28(1),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.8,CSCv8|3.11,CSF|PR.AC-1,CSF|PR.DS-1,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,CSF2.0|PR.DS-01,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(d),HIPAA|164.312(e)(2)(ii),ITSG-33|IA-5(1),ITSG-33|SC-28,ITSG-33|SC-28a.,ITSG-33|SC-28(1),LEVEL|2A,NESA|T5.2.3,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|28.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>

    <report type:"WARNING">
      description : "9.4 Ensure only approved ciphers are used for Replication"
      info        : "MariaDB supports multiple encryption ciphers that can be used for TLS connections during replication. Ciphers can vary in strength, speed and overhead.

Rationale:

Requiring REPLICA servers to utilize strong ciphers when connecting to a PRIMARY server protects data in transit.

Impact:

If the PRIMARY and REPLICA servers don't support common cipher suites, replication will fail.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "To remediate this setting, you must use the CHANGE MASTER TO command with MASTER_SSL_CIPHER.
For example, run:

STOP REPLICA; -- required if replication was already running
CHANGE MASTER TO
   MASTER_SSL_CIPHER='ECDHE-ECDSA-AES128-GCM-SHA256';
START REPLICA; -- required if you want to restart replication

Default Value:

Empty"
      reference   : "800-53|SA-15,800-53r5|SA-15,CSCv7|18.5,CSCv8|16.11,CSF|PR.IP-2,CSF2.0|ID.RA-09,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),LEVEL|2M,NIAv2|SS5,NIAv2|SS6a,QCSC-v1|4.2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_MariaDB_10.6_Benchmark_v1.1.0_L2_Linux_OS.audit from CIS MariaDB 10.6 Benchmark"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://workbench.cisecurity.org/benchmarks/16527"
    </report>
  </else>
</if>

</check_type>
