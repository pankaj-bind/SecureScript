#TRUSTED 22936d1365603d688bfe1bb6ac82699e46ec770b68f24722c4602f629de2cfc64be0a2d1ba6438cfab9e82c552fb083a9ca9a7c9f59c53bded86462829759236dbd25689fa069aba28f3cfd6ad81eadac6066e75928059fbc90fb40e1c874bc3d4044971213b8df5f722abaaf12dee579ffaa7d01f17bf301d93caade58c9f35f06b8b64616e9bf1e4d5a3d1bb281223666442298f4a385f380a662a71fd1f72b9cc7f9e2e839f4ee9d123918448249ed9893ab32771af3aab566fc3ac25509a5bec8131aab077c3dc8e2bc468560896a847c58a01a82c11246c1caed090fb4c5e67138075b861893eac33bdd1bf3830da43daa79c3e5ddc2856a39dc404f2807e654c1b14ee4d26ae59f18e199eaaaf927f0a485c4720535a636db7cf0341320c1545eed8760f0d747453cbfac2c60643edece06da42be07adbd34f8e6fd3035e72b615afa77660f500e09c85a80025cf57ac44095029cacce96d9ba31f84cc5aa768dd74f86a9fdf9d2beacf4243ed2f5f3b6e72c56f3dcaf4dc5c34f1c73302968efa1d6a2ff5ccb3ea726ac47caf93cbb4c672bc1424942b798574dcef22e3bf8ad86588c5ef0f8e47885a7f36f51f8ad0a549cce7505b0548ee435eac824258b38fa7d9bb9de139cab371413c4fe4987670cba2a2a9b3985c8913bab3b96fa57cae7ec80f3ec4882db0232d4b412dfb130014f4a81fad0da431d0fadf0f
#TRUST-RSA-SHA256 57fb01206f7968a6f814e4ab46155a514d160050e02493ba5ee64de6e66fdd99c59a6bbf5d5d880530c8342095e70bc561f2c43c91c999bebd91fc2668f10c46652df54760954459163f8aa440b6f24b1e8de1c779ea846dcd47db66f848f016660a82f99c87b835242009a6a02ba8ba791c908b75206d59bfb1a871bb86db110aae1790711dc69f06be819a31b06b0d3d0e86bc32c41087ddeeb4f34b399c020db4623b4bb07a7166926027052241da8cda8e4d8923c64942ce5994f7afe812174628e66c72e78ad5d01fa34085d596822f88b0b90ec9f444f01dfa65a6d761d956eb10a0e978d67c5aea3e0b28d095964e4b4c5be8d2d78fdd8754165fcff87307868f17bbaeb53a1608bf0a5e498373f105580c13a4db7807ac77d5ba31190b624728f77a5dc72b36cc700a5f62f1763ef9a55719a0496eac560b62ce3f3ff2b14f764dfeee9179fb327373c937cd14e16ff2bb1e5edea43e2d96903523cf4a66ecd8809773e0d853ef62f28e6adc8854f7ee75b1c9606ca9b087f5bea7f73e84b502bf66918ed7b69f00e8f8564cdd71c74a9221e0aa4bb0906275e4ce958a6de66f9613e45c99770814815e29b2dc19d85daba98d5c1d26ed9164619daa531b043efc2070201bf9388f0165677b12536376716cf85a430171972218f2bda1edff311c140adb5b8d2dfb43b4f5222dc63e5ca26e7686772916165d266ea8
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.1 $
# $Date: 2024/06/17 $
#
# Description : This document implements the security configuration as recommended by the
#               CIS Oracle MySQL 5.6 Enterprise Edition Benchmark
#
#<ui_metadata>
#<display_name>CIS MySQL 5.6 Enterprise Database L1 v2.0.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>MySQL 5.6 Enterprise</name>
#  <profile>L1 DB</profile>
#  <version>2.0.0</version>
#  <link>https://workbench.cisecurity.org/files/3848</link>
#</spec>
#<labels>database,cis,mysql,mysql_5,mysql_5.6,mysql_5.6_enterprise,update_20230227</labels>
#<benchmark_refs>CCE,CIS_Recommendation,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>ADMIN_USER</name>
#    <default>root</default>
#    <description>MySQL Admin User</description>
#    <info>This is your administrative user. Default is root.</info>
#    <value_type>SQL_REQUEST_VALUE</value_type>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"MySQLDB">

<if>
  <condition type:"AND">
    <custom_item>
      type        : SQL_POLICY
      description : "MySQL 5.6 is installed"
      sql_request : "show variables like 'version' ;"
      sql_types   : STRING, REGEX
      sql_expect  : "version", "5\.6"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "MySQL 5.6 Enterprise Edition is installed"
      sql_request : "show variables like 'license' ;"
      sql_types   : STRING, STRING
      sql_expect  : "license", "Commercial"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_MySQL_5.6_Enterprise_Benchmark_v2.0.0_Level_1_DB.audit from CIS Oracle MySQL 5.6 Enterprise Edition Benchmark"
      see_also    : "https://workbench.cisecurity.org/files/3848"
    </report>

    <custom_item>
      type        : SQL_POLICY
      description : "1.1 Place Databases on Non-System Partitions"
      info        : "It is generally accepted that host operating systems should include different filesystem partitions for different purposes. One set of filesystems is typically called system partitions, and these are generally reserved for host system/application operation. The other set of filesystems is typically called 'non-system partitions', and such locations are generally reserved for storing data.

Rationale:

Moving the database off the system partition will reduce the probability of denial of service caused by exhaustion of available disk space to the operating system.

Impact:

Moving database files and directories to a non-system partition may be difficult depending on whether there was only a single partition when the operating system was set up and whether there are additional non-system partitions available."
      solution    : "Perform the following steps to remediate this setting for the datadir:

Backup the database.

Choose a non-system partition new location for the MySQL data

Stop mysqld using a command like: service mysql stop

Copy the data using a command like: cp -rp <datadir Value> <new location>

Set the datadir location to the new location in the MySQL configuration file

Start mysqld using a command like:

service mysql start

Note: On some Linux distributions you may need to additionally modify apparmor settings. For example, on a Ubuntu 14.04.1 system edit the file /etc/apparmor.d/usr.sbin.mysqld so that the datadir access is appropriate. The original might look like this:

# Allow data dir access
/var/lib/mysql/ r,
/var/lib/mysql/** rwk,

Alter those two paths to be the new location you chose above. For example, if that new location were /media/mysql, then the /etc/apparmor.d/usr.sbin.mysqld file should include something like this:

# Allow data dir access
/media/mysql/ r,
/media/mysql/** rwk,"
      reference   : "800-171|3.13.4,800-53|SC-4,800-53r5|SC-4,CSCv7|2.10,CSCv8|3.12,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-4,ITSG-33|SC-4a.,LEVEL|1M"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "show variables like 'datadir' ;"
      sql_types   : STRING, REGEX
      sql_expect  : "datadir", "^([^C][:][\\].+|/.+)$"
    </custom_item>

    <report type:"WARNING">
      description : "2.1.1 Backup Policy in Place"
      info        : "A backup policy should be in place.

Rationale:

Backing up MySQL databases, including mysql, will help ensure the availability of data in the event of an incident. Without backups it might be hard to recover from an incident.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Create a backup policy and backup schedule."
      reference   : "800-171|3.8.9,800-53|CP-9,800-53|CP-10,800-53r5|CP-9,800-53r5|CP-10,CSCv8|11.2,CSF|PR.IP-4,CSF|RC.RP-1,CSF|RS.RP-1,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(ii),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|1M,NESA|M5.2.3,NESA|T2.2.4,QCSC-v1|5.2.3,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
    </report>

    <report type:"WARNING">
      description : "2.1.2 Verify Backups are Good"
      info        : "Backups should be validated on a regular basis.

Rationale:

Verifying that backups are occurring appropriately will help ensure the availability of data in the event of an incident. Without a well-tested backup, it might be hard to recover from an incident if the backup procedure contains errors or doesn't include all required data.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Implement regular backup checks and document each check."
      reference   : "800-171|3.8.9,800-53|CP-4,800-53|CP-9(1),800-53r5|CP-4,800-53r5|CP-9(1),CSCv7|10.3,CSCv8|11.5,CSF|PR.IP-4,CSF|PR.IP-10,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-4,ITSG-33|CP-9(1),LEVEL|1M,NESA|T2.2.4,NESA|T3.5.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
    </report>

    <report type:"WARNING">
      description : "2.1.3 Secure Backup Credentials"
      info        : "A database user with the least amount of privileges required to perform backup is needed for backup. The credentials for this user should be protected. The password, certificate and any other credentials should be protected.

Rationale:

When the backup credentials are not properly secured then they might be abused to gain access to the server. The backup user needs an account with many privileges, so the attacker can gain (almost) complete access to the server.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Change file permissions."
      reference   : "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-171|3.8.9,800-171|3.13.16,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|CP-9,800-53|MP-2,800-53|SC-28,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|CP-9,800-53r5|MP-2,800-53r5|SC-28,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|10.4,CSCv8|3.3,CSCv8|11.3,CSF|PR.AC-4,CSF|PR.DS-1,CSF|PR.DS-5,CSF|PR.IP-4,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.a,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ISO/IEC-27001|A.12.3.1,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|CP-9,ITSG-33|MP-2,ITSG-33|MP-2a.,ITSG-33|SC-28,ITSG-33|SC-28a.,LEVEL|1M,NESA|M5.2.3,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T2.2.4,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|3.4,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
    </report>

    <report type:"WARNING">
      description : "2.1.4 The Backups Should be Properly Secured"
      info        : "The backup files will contain all data in the databases. Filesystem permissions and/or encryption should be used to prevent non authorized users from gaining access to the backups.

Rationale:

Backups should be considered sensitive information. If an unauthorized user can access backups then they have access to all the data that is in the database. This is true for unencrypted backups and for encrypted backups if the encryption key is stored along with the backup.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Implement encryption, properly restrict filesystem permissions, protect and backup encryption keys."
      reference   : "800-171|3.8.9,800-171|3.13.16,800-53|CP-9,800-53|SC-28,800-53r5|CP-9,800-53r5|SC-28,CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|10.4,CSCv8|11.3,CSF|PR.DS-1,CSF|PR.IP-4,GDPR|32.1.a,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,ITSG-33|SC-28,ITSG-33|SC-28a.,LEVEL|1M,NESA|M5.2.3,NESA|T2.2.4,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
    </report>

    <report type:"WARNING">
      description : "2.1.6 Disaster recovery plan"
      info        : "A disaster recovery plan should be created.

MySQL Cluster, MySQL Replica Sets (asynchronous replication) or both may be used.

A slave in a different data center and offsite backups may be used. There should be information regarding the Recovery Time Objective (RTO), i.e., how long recovery will take, and if the recovery site has the same capacity. Additionally, delayed replicas can be a valuable part of a DR plan. Network (default) and at rest encryption should be used to protect data.

Rationale:

A disaster recovery strategy should be planned and formalized. Without a well tested disaster recovery plan it might not be possible to recover in time.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Create a disaster recovery plan."
      reference   : "800-53|CP-2,800-53|CP-10,800-53r5|CP-2,800-53r5|CP-10,CSCv7|10,CSCv8|11.1,CSF|DE.AE-4,CSF|ID.AM-5,CSF|ID.AM-6,CSF|ID.BE-1,CSF|ID.BE-5,CSF|PR.DS-4,CSF|PR.IP-7,CSF|PR.IP-9,CSF|RC.CO-3,CSF|RC.IM-1,CSF|RC.IM-2,CSF|RC.RP-1,CSF|RS.AN-2,CSF|RS.AN-4,CSF|RS.CO-1,CSF|RS.CO-3,CSF|RS.CO-4,CSF|RS.IM-1,CSF|RS.IM-2,CSF|RS.RP-1,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(ii),ITSG-33|CP-2,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|1M,NESA|T2.2.4,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
    </report>

    <report type:"WARNING">
      description : "2.1.7 Backup of Configuration and Related Files"
      info        : "It is important to include configuration, log, key, certificates, and customized files in backups.

Rationale:

Including all configuration, log, key, certificates, and customized files in any backup will ensure the backup can fully restore an instance.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Add any omitted files to the backup."
      reference   : "800-171|3.8.9,800-53|CP-9,800-53|CP-10,800-53r5|CP-9,800-53r5|CP-10,CSCv7|10.2,CSCv8|11.2,CSF|PR.IP-4,CSF|RC.RP-1,CSF|RS.RP-1,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(ii),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|1M,NESA|M5.2.3,NESA|T2.2.4,QCSC-v1|5.2.3,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
    </report>

    <report type:"WARNING">
      description : "2.2 Dedicate the Machine Running MySQL"
      info        : "It is recommended that MySQL Server software be installed on a dedicated server. This architectural consideration affords flexibility in that the database server can be placed on a separate zone allowing access only from particular hosts and over particular protocols.

Rationale:

The attack surface is reduced on a server with only the underlying operating system, MySQL server software, and any security or operational tooling that may be additionally installed. A smaller attack surface reduces the probability of the data within MySQL being compromised.

Impact:

Care must be taken that to ensure applications or services that are required for proper operation of the operating system are not removed.

Custom applications may need to be modified to accommodate database connections over the network rather than on the use (e.g., using TCP/IP connections).

Additional hardware and operating system licenses may be required to make the architectural change.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Remove excess applications or services and/or remove unnecessary roles from the underlying operating system."
      reference   : "800-171|3.13.4,800-53|SC-4,800-53r5|SC-4,CSCv7|2.10,CSCv8|3.12,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-4,ITSG-33|SC-4a.,LEVEL|1M"
      see_also    : "https://workbench.cisecurity.org/files/3848"
    </report>

    <custom_item>
      type        : SQL_POLICY
      description : "2.4 Do Not Reuse Usernames"
      info        : "Database user accounts should not be reused for multiple applications or users.

Rationale:

Utilizing unique database accounts across applications will reduce the impact of a compromised MySQL account. If a user is reused, then a compromise of this user will compromise multiple parts of the system and/or application.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Add/Remove users so that each user is only used for one specific purpose."
      reference   : "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CN-L3|7.1.3.2(d),CSCv7|4.3,CSCv8|5.1,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1M,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT host, user, plugin, IF(plugin = 'mysql_native_password', 'WEAK SHA1', 'STRONG SHA2') AS HASHTYPE FROM mysql.user WHERE user NOT IN ('mysql.infoschema', 'mysql.session', 'mysql.sys') AND plugin NOT LIKE 'auth%' AND plugin <> 'mysql_no_login' AND LENGTH(authentication_string) > 0 ORDER BY plugin;"
      sql_types   : STRING
      sql_expect  : "ManualReviewRequired"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "2.6 Ensure Password Complexity is Configured - validate_password_length"
      info        : "Passwords that are too complex in nature make it harder for users to remember, leading to bad practices. In addition, composition requirements provide no defense against common attack types such as social engineering or insecure password storage. In keeping with the overall goal of having users create a password that is not overly weak, it's best to have at least 14 characters for a password only account.

Rationale:

Malicious actors regularly attempt to compromise databases by attacking or guessing passwords. Stolen credentials may be used to gain access to steal information, engage in financial fraud, and more.

By enforcing practical and secure policies, end user cooperation grows. In general, longer passwords are better (harder to crack), but a forced password length requirement can cause user behavior that is predictable and undesirable. Having a reasonable minimum length with no maximum character limit increases the resulting average password length used and thus increases the security of that password.

Impact:

Enforcing too much complexity or length may be difficult for users to memorize. This may cause users to use predictable patterns or other bad practices, resulting in weaker passwords."
      solution    : "If not already present in the my.cnf, add this line:

plugin-load=validate_password.so

Set password policies in accordance with the organizationally defined policy and security best practices:

set global validate_password_dictionary_file='<FILENAME OF DICTIONARY FILE>';
set global validate_password_length=14;
set global validate_password_policy='STRONG';

Use with care. Passwords that are too complex in nature make it harder for users to remember, leading to bad practices.

set global validate_password_mixed_case_count=1;
set global validate_password_special_char_count=1;
set global validate_password_number_count=1;

Default Value:

The MySQL validate password complexity plugin is not used by default."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      sql_request : "SHOW VARIABLES LIKE 'validate_password_length'"
      sql_types   : STRING, REGEX
      sql_expect  : "validate_password_length", "(1[4-9]|[2-9][0-9])"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "2.6 Ensure Password Complexity is Configured - validate_password_mixed_case_count"
      info        : "Passwords that are too complex in nature make it harder for users to remember, leading to bad practices. In addition, composition requirements provide no defense against common attack types such as social engineering or insecure password storage. In keeping with the overall goal of having users create a password that is not overly weak, it's best to have at least 14 characters for a password only account.

Rationale:

Malicious actors regularly attempt to compromise databases by attacking or guessing passwords. Stolen credentials may be used to gain access to steal information, engage in financial fraud, and more.

By enforcing practical and secure policies, end user cooperation grows. In general, longer passwords are better (harder to crack), but a forced password length requirement can cause user behavior that is predictable and undesirable. Having a reasonable minimum length with no maximum character limit increases the resulting average password length used and thus increases the security of that password.

Impact:

Enforcing too much complexity or length may be difficult for users to memorize. This may cause users to use predictable patterns or other bad practices, resulting in weaker passwords."
      solution    : "If not already present in the my.cnf, add this line:

plugin-load=validate_password.so

Set password policies in accordance with the organizationally defined policy and security best practices:

set global validate_password_dictionary_file='<FILENAME OF DICTIONARY FILE>';
set global validate_password_length=14;
set global validate_password_policy='STRONG';

Use with care. Passwords that are too complex in nature make it harder for users to remember, leading to bad practices.

set global validate_password_mixed_case_count=1;
set global validate_password_special_char_count=1;
set global validate_password_number_count=1;

Default Value:

The MySQL validate password complexity plugin is not used by default."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      sql_request : "SHOW VARIABLES LIKE 'validate_password_mixed_case_count'"
      sql_types   : STRING, STRING
      sql_expect  : "validate_password_mixed_case_count", "1"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "2.6 Ensure Password Complexity is Configured - validate_password_number_count"
      info        : "Passwords that are too complex in nature make it harder for users to remember, leading to bad practices. In addition, composition requirements provide no defense against common attack types such as social engineering or insecure password storage. In keeping with the overall goal of having users create a password that is not overly weak, it's best to have at least 14 characters for a password only account.

Rationale:

Malicious actors regularly attempt to compromise databases by attacking or guessing passwords. Stolen credentials may be used to gain access to steal information, engage in financial fraud, and more.

By enforcing practical and secure policies, end user cooperation grows. In general, longer passwords are better (harder to crack), but a forced password length requirement can cause user behavior that is predictable and undesirable. Having a reasonable minimum length with no maximum character limit increases the resulting average password length used and thus increases the security of that password.

Impact:

Enforcing too much complexity or length may be difficult for users to memorize. This may cause users to use predictable patterns or other bad practices, resulting in weaker passwords."
      solution    : "If not already present in the my.cnf, add this line:

plugin-load=validate_password.so

Set password policies in accordance with the organizationally defined policy and security best practices:

set global validate_password_dictionary_file='<FILENAME OF DICTIONARY FILE>';
set global validate_password_length=14;
set global validate_password_policy='STRONG';

Use with care. Passwords that are too complex in nature make it harder for users to remember, leading to bad practices.

set global validate_password_mixed_case_count=1;
set global validate_password_special_char_count=1;
set global validate_password_number_count=1;

Default Value:

The MySQL validate password complexity plugin is not used by default."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      sql_request : "SHOW VARIABLES LIKE 'validate_password_number_count'"
      sql_types   : STRING, STRING
      sql_expect  : "validate_password_number_count", "1"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "2.6 Ensure Password Complexity is Configured - validate_password_special_char_count"
      info        : "Passwords that are too complex in nature make it harder for users to remember, leading to bad practices. In addition, composition requirements provide no defense against common attack types such as social engineering or insecure password storage. In keeping with the overall goal of having users create a password that is not overly weak, it's best to have at least 14 characters for a password only account.

Rationale:

Malicious actors regularly attempt to compromise databases by attacking or guessing passwords. Stolen credentials may be used to gain access to steal information, engage in financial fraud, and more.

By enforcing practical and secure policies, end user cooperation grows. In general, longer passwords are better (harder to crack), but a forced password length requirement can cause user behavior that is predictable and undesirable. Having a reasonable minimum length with no maximum character limit increases the resulting average password length used and thus increases the security of that password.

Impact:

Enforcing too much complexity or length may be difficult for users to memorize. This may cause users to use predictable patterns or other bad practices, resulting in weaker passwords."
      solution    : "If not already present in the my.cnf, add this line:

plugin-load=validate_password.so

Set password policies in accordance with the organizationally defined policy and security best practices:

set global validate_password_dictionary_file='<FILENAME OF DICTIONARY FILE>';
set global validate_password_length=14;
set global validate_password_policy='STRONG';

Use with care. Passwords that are too complex in nature make it harder for users to remember, leading to bad practices.

set global validate_password_mixed_case_count=1;
set global validate_password_special_char_count=1;
set global validate_password_number_count=1;

Default Value:

The MySQL validate password complexity plugin is not used by default."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      sql_request : "SHOW VARIABLES LIKE 'validate_password_special_char_count'"
      sql_types   : STRING, STRING
      sql_expect  : "validate_password_special_char_count", "1"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "2.6 Ensure Password Complexity is Configured - validate_password_policy"
      info        : "Passwords that are too complex in nature make it harder for users to remember, leading to bad practices. In addition, composition requirements provide no defense against common attack types such as social engineering or insecure password storage. In keeping with the overall goal of having users create a password that is not overly weak, it's best to have at least 14 characters for a password only account.

Rationale:

Malicious actors regularly attempt to compromise databases by attacking or guessing passwords. Stolen credentials may be used to gain access to steal information, engage in financial fraud, and more.

By enforcing practical and secure policies, end user cooperation grows. In general, longer passwords are better (harder to crack), but a forced password length requirement can cause user behavior that is predictable and undesirable. Having a reasonable minimum length with no maximum character limit increases the resulting average password length used and thus increases the security of that password.

Impact:

Enforcing too much complexity or length may be difficult for users to memorize. This may cause users to use predictable patterns or other bad practices, resulting in weaker passwords."
      solution    : "If not already present in the my.cnf, add this line:

plugin-load=validate_password.so

Set password policies in accordance with the organizationally defined policy and security best practices:

set global validate_password_dictionary_file='<FILENAME OF DICTIONARY FILE>';
set global validate_password_length=14;
set global validate_password_policy='STRONG';

Use with care. Passwords that are too complex in nature make it harder for users to remember, leading to bad practices.

set global validate_password_mixed_case_count=1;
set global validate_password_special_char_count=1;
set global validate_password_number_count=1;

Default Value:

The MySQL validate password complexity plugin is not used by default."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      sql_request : "SHOW VARIABLES LIKE 'validate_password_policy'"
      sql_types   : STRING, STRING
      sql_expect  : "validate_password_policy", "STRONG"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "2.6 Ensure Password Complexity is Configured - validate_password_dictionary_file"
      info        : "Passwords that are too complex in nature make it harder for users to remember, leading to bad practices. In addition, composition requirements provide no defense against common attack types such as social engineering or insecure password storage. In keeping with the overall goal of having users create a password that is not overly weak, it's best to have at least 14 characters for a password only account.

Rationale:

Malicious actors regularly attempt to compromise databases by attacking or guessing passwords. Stolen credentials may be used to gain access to steal information, engage in financial fraud, and more.

By enforcing practical and secure policies, end user cooperation grows. In general, longer passwords are better (harder to crack), but a forced password length requirement can cause user behavior that is predictable and undesirable. Having a reasonable minimum length with no maximum character limit increases the resulting average password length used and thus increases the security of that password.

Impact:

Enforcing too much complexity or length may be difficult for users to memorize. This may cause users to use predictable patterns or other bad practices, resulting in weaker passwords."
      solution    : "If not already present in the my.cnf, add this line:

plugin-load=validate_password.so

Set password policies in accordance with the organizationally defined policy and security best practices:

set global validate_password_dictionary_file='<FILENAME OF DICTIONARY FILE>';
set global validate_password_length=14;
set global validate_password_policy='STRONG';

Use with care. Passwords that are too complex in nature make it harder for users to remember, leading to bad practices.

set global validate_password_mixed_case_count=1;
set global validate_password_special_char_count=1;
set global validate_password_number_count=1;

Default Value:

The MySQL validate password complexity plugin is not used by default."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      sql_request : "SHOW VARIABLES LIKE 'validate_password_dictionary_file'"
      sql_types   : STRING, REGEX
      sql_expect  : "validate_password_dictionary_file", ".+"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "2.11 Implement Connection Delays to Limit Failed Login Attempts - CONNECTION_CONTROL"
      info        : "MySQL Server can enable administrators to introduce an increasing delay in server response to clients after a certain number of consecutive failed connection attempts.

Rationale:

Delaying connection attempts provides a deterrent that slows down brute force attacks that attempt to access MySQL user accounts."
      solution    : "Add the following lines to my.cnf:

[mysqld]
plugin-load-add=connection_control.so
connection-control=FORCE_PLUS_PERMANENT
connection-control-failed-login-attempts=FORCE_PLUS_PERMANENT
connection_control_failed_connections_threshold=5
connection_control_min_connection_delay=60000
connection_control_max_connection_delay=1920000

Delays are in milliseconds for server response to failed connection attempt.

60000 (ms - 1 minute)

1920000 (ms, 32 minutes)

For each user set

ALTER USER <user> FAILED_LOGIN_ATTEMPTS 12;"
      reference   : "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CN-L3|7.1.3.2(d),CSCv7|16,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1A,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE 'CONNECTION_CONTROL';"
      sql_types   : STRING, REGEX
      sql_expect  : "CONNECTION_CONTROL", "ACTIVE"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "2.11 Implement Connection Delays to Limit Failed Login Attempts - CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS"
      info        : "MySQL Server can enable administrators to introduce an increasing delay in server response to clients after a certain number of consecutive failed connection attempts.

Rationale:

Delaying connection attempts provides a deterrent that slows down brute force attacks that attempt to access MySQL user accounts."
      solution    : "Add the following lines to my.cnf:

[mysqld]
plugin-load-add=connection_control.so
connection-control=FORCE_PLUS_PERMANENT
connection-control-failed-login-attempts=FORCE_PLUS_PERMANENT
connection_control_failed_connections_threshold=5
connection_control_min_connection_delay=60000
connection_control_max_connection_delay=1920000

Delays are in milliseconds for server response to failed connection attempt.

60000 (ms - 1 minute)

1920000 (ms, 32 minutes)

For each user set

ALTER USER <user> FAILED_LOGIN_ATTEMPTS 12;"
      reference   : "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CN-L3|7.1.3.2(d),CSCv7|16,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1A,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE 'CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS';"
      sql_types   : STRING, REGEX
      sql_expect  : "CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS", "ACTIVE"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "2.11 Implement Connection Delays to Limit Failed Login Attempts - connection_control_failed_connections_threshold"
      info        : "MySQL Server can enable administrators to introduce an increasing delay in server response to clients after a certain number of consecutive failed connection attempts.

Rationale:

Delaying connection attempts provides a deterrent that slows down brute force attacks that attempt to access MySQL user accounts."
      solution    : "Add the following lines to my.cnf:

[mysqld]
plugin-load-add=connection_control.so
connection-control=FORCE_PLUS_PERMANENT
connection-control-failed-login-attempts=FORCE_PLUS_PERMANENT
connection_control_failed_connections_threshold=5
connection_control_min_connection_delay=60000
connection_control_max_connection_delay=1920000

Delays are in milliseconds for server response to failed connection attempt.

60000 (ms - 1 minute)

1920000 (ms, 32 minutes)

For each user set

ALTER USER <user> FAILED_LOGIN_ATTEMPTS 12;"
      reference   : "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CN-L3|7.1.3.2(d),CSCv7|16,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1A,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME LIKE 'connection_control_failed_connections_threshold';"
      sql_types   : STRING, REGEX
      sql_expect  : "connection_control_failed_connections_threshold", "[5-9]|[1-9][0-9]"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "2.11 Implement Connection Delays to Limit Failed Login Attempts - connection_control_min_connection_delay"
      info        : "MySQL Server can enable administrators to introduce an increasing delay in server response to clients after a certain number of consecutive failed connection attempts.

Rationale:

Delaying connection attempts provides a deterrent that slows down brute force attacks that attempt to access MySQL user accounts."
      solution    : "Add the following lines to my.cnf:

[mysqld]
plugin-load-add=connection_control.so
connection-control=FORCE_PLUS_PERMANENT
connection-control-failed-login-attempts=FORCE_PLUS_PERMANENT
connection_control_failed_connections_threshold=5
connection_control_min_connection_delay=60000
connection_control_max_connection_delay=1920000

Delays are in milliseconds for server response to failed connection attempt.

60000 (ms - 1 minute)

1920000 (ms, 32 minutes)

For each user set

ALTER USER <user> FAILED_LOGIN_ATTEMPTS 12;"
      reference   : "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CN-L3|7.1.3.2(d),CSCv7|16,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1A,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME LIKE 'connection_control_min_connection_delay';"
      sql_types   : STRING, REGEX
      sql_expect  : "connection_control_min_connection_delay", "(6000\d|600[1-9]\d|60[1-9]\d{2}|6[1-9]\d{3}|[7-9]\d{4}|[1-9]\d{5,8}|1\d{9}|20\d{8})"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "2.11 Implement Connection Delays to Limit Failed Login Attempts - connection_control_max_connection_delay"
      info        : "MySQL Server can enable administrators to introduce an increasing delay in server response to clients after a certain number of consecutive failed connection attempts.

Rationale:

Delaying connection attempts provides a deterrent that slows down brute force attacks that attempt to access MySQL user accounts."
      solution    : "Add the following lines to my.cnf:

[mysqld]
plugin-load-add=connection_control.so
connection-control=FORCE_PLUS_PERMANENT
connection-control-failed-login-attempts=FORCE_PLUS_PERMANENT
connection_control_failed_connections_threshold=5
connection_control_min_connection_delay=60000
connection_control_max_connection_delay=1920000

Delays are in milliseconds for server response to failed connection attempt.

60000 (ms - 1 minute)

1920000 (ms, 32 minutes)

For each user set

ALTER USER <user> FAILED_LOGIN_ATTEMPTS 12;"
      reference   : "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CN-L3|7.1.3.2(d),CSCv7|16,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1A,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME LIKE 'connection_control_max_connection_delay';"
      sql_types   : STRING, REGEX
      sql_expect  : "connection_control_max_connection_delay", "(192000\d|19200[1-9]\d|1920[1-9]\d{2}|192[1-9]\d{3}|19[3-9]\d{4}|[2-9]\d{6}|[1-9]\d{7,8}|1\d{9}|20\d{8}|21[0-9]\d{9})"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "4.1 Ensure the Latest Security Patches are Applied"
      info        : "Periodically, updates to MySQL server are released to resolve bugs, mitigate vulnerabilities, and provide new features. It is recommended that MySQL installations are up to date with the latest security updates.

    Rationale:

    Maintaining currency with MySQL patches will help reduce risk associated with known vulnerabilities present in the MySQL server.

    Without the latest security patches MySQL might have known vulnerabilities which could be used by an attacker to gain access.

    Impact:

    To update the MySQL server a restart is required."
      solution    : "Install the latest patches for your version or upgrade to the latest version."
      reference   : "800-53|SA-22,800-53r5|SA-22,CSCv7|2.2,CSCv8|2.2,GDPR|32.1.b,HIPAA|164.306(a)(1),LEVEL|1M"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "show variables like 'version' ;"
      sql_types   : STRING, NULL
      sql_expect  : "version", NULL
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "4.2 Ensure Example or Test Databases are Not Installed on Production Servers"
      info        : "The default MySQL installation does not contain any example or test databases. However, it is a good idea to review for common example databases and ensure they have been removed from production systems.

Rationale:

Dropping example databases will reduce the attack surface of the MySQL server."
      solution    : "Execute the following SQL statement to drop an example database:

DROP DATABASE <database name>;

Default Value:

By default, MySQL 5.6 does not contain any example or test databases."
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|PL-8,800-53|SA-8,800-53r5|PL-8,800-53r5|SA-8,CSCv8|16.10,CSF|ID.AM-3,CSF|PR.IP-2,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|1A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,QCSC-v1|4.2,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT * FROM information_schema.SCHEMATA where SCHEMA_NAME not in ('mysql','information_schema', 'sys', 'performance_schema');"
      sql_types   : NULL
      sql_expect  : NULL
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "4.4 Ensure 'local_infile' Is Disabled"
      info        : "The local_infile parameter dictates whether files located on the MySQL client's computer can be loaded or selected via LOAD DATA INFILE or SELECT local_file.

Rationale:

Disabling local_infile reduces an attacker's ability to read sensitive files off the affected server via an SQL injection vulnerability.

Impact:

Disabling local_infile will impact the functionality of solutions that rely on it."
      solution    : "Add the following line to the [mysqld] section of the MySQL configuration file and restart the MySQL service:

local_infile=OFF

Default Value:

ON"
      reference   : "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv7|4.7,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|1A,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "show variables like 'local_infile' ;"
      sql_types   : STRING, STRING
      sql_expect  : "local_infile", "OFF"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "4.6 Ensure Symbolic Links are Disabled"
      info        : "The symbolic-links and skip-symbolic-links options for MySQL determine whether symbolic link support is available. When use of symbolic links is enabled, they have different effects depending on the host platform. When symbolic links are disabled, then symbolic links stored in files or entries in tables are not used by the database.

Rationale:

Prevents symbolic links from being used for database files. This is especially important when MySQL is executing as root as arbitrary files may be overwritten. The symbolic-links option might allow someone to direct actions by the MySQL server to other files and/or directories."
      solution    : "Perform the following actions to remediate this setting:

Open the MySQL configuration file (my.cnf)

Locate skip_symbolic_links in the configuration

Set the skip_symbolic_links to YES

Note: If skip_symbolic_links does not exist, add it to the configuration file in the mysqld section."
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|PL-8,800-53|SA-8,800-53r5|PL-8,800-53r5|SA-8,CSCv7|13,CSCv8|16.10,CSF|ID.AM-3,CSF|PR.IP-2,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|1A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,QCSC-v1|4.2,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "show variables like 'have_symlink' ;"
      sql_types   : STRING, STRING
      sql_expect  : "have_symlink", "DISABLED"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "4.7 Ensure the 'daemon_memcached' Plugin Is Disabled"
      info        : "The InnoDB memcached Plugin allows users to access data stored in InnoDB with the memcached protocol.

Rationale:

By default the plugin doesn't do authentication, which means that anyone with access to the TCP/IP port of the plugin can access and modify the data. However, not all data is exposed by default."
      solution    : "To remediate this setting, issue the following command in the MySQL command-line client:

uninstall plugin daemon_memcached;

This uninstalls the memcached plugin from the MySQL server.

Default Value:

disabled"
      reference   : "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv7|9.2,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|1A,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW DATABASES LIKE 'innodb_memcache';"
      sql_types   : NULL, NULL
      sql_expect  : NULL, NULL
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "4.8 Ensure the 'secure_file_priv' is Configured Correctly"
      info        : "The secure_file_priv option restricts to paths used by LOAD DATA INFILE or SELECT local_file. It is recommended that this option be set to a file system location that contains only resources expected to be loaded by MySQL. Even better, if data import/export using LOAD DATA INFILE or SELECT local_file is not used, the functionality should be disabled entirely by setting --secure-file-priv to NULL.

Rationale:

Setting secure_file_priv reduces an attacker's ability to read sensitive files off the affected server via a SQL injection vulnerability.

Impact:

Solutions that rely on loading data from various sub-directories may be negatively impacted by this change. Consider consolidating load directories under a common parent directory.

The server checks the value of secure_file_priv at startup and writes a warning to the error log if the value is insecure. A non-NULL value is considered insecure if it is empty, or the value is the data directory or a subdirectory of it, or a directory that is accessible by all users."
      solution    : "If you are not going to use this feature, remove secure_file_priv from the [mysqld] section of the MySQL configuration file and restart the MySQL service.

If you need this feature add the following line to the [mysqld] section of the MySQL configuration file and restart the MySQL service:

secure_file_priv=<path_to_load_directory>

Default Value:

Prior to 5.6.34 - empty string Starting with 5.6.34 - Varies by platform."
      reference   : "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|13,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW GLOBAL VARIABLES WHERE Variable_name = 'secure_file_priv';"
      sql_types   : STRING, REGEX
      sql_expect  : "secure_file_priv", ".+"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "5.1 Ensure Only Administrative Users Have Full Database Access"
      info        : "The mysql.user, mysql.db, and other mysql tables ending in _priv list a variety of privileges that can be granted (or denied) to MySQL users. Some of the privileges of concern include: Select_priv, Insert_priv, Update_priv, Delete_priv, Drop_priv, and so on. Typically, these privileges should not be available to every MySQL user and often are reserved for administrative use only. The information_schema.user_privileges provides a consolidated view of all user privileges.

Rationale:

Limiting the accessibility of the mysql database will protect the confidentiality, integrity, and availability of the data housed within MySQL. A user which has direct access to mysql.* might view password hashes, change permissions, or alter or destroy information intentionally or unintentionally.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Perform the following actions to remediate this setting:

Enumerate non-administrative users resulting from the audit procedure.

For each non-administrative user, use the REVOKE statement to remove privileges as appropriate."
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|4.1,CSCv7|14.6,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "select grantee, privilege_type, is_grantable from information_schema.user_privileges where grantee not like ('\'mysql.%localhost\'');"
      sql_types   : STRING, REGEX, REGEX
      sql_expect  : "@ADMIN_USER@", ".+", ".+"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "5.2 Ensure 'FILE' is Not Granted to Non-Administrative Users"
      info        : "The FILE privilege is used to allow or disallow a user from reading and writing files on the server host. Any user with the FILE right granted has the ability to:

Read files from the local file system that are readable by the MySQL server (this includes world-readable files).

Write files to the local file system where the MySQL server has write access.

Rationale:

The FILE right allows MySQL users to read files from disk and to write files to disk. This may be leveraged by an attacker to further compromise MySQL. It should be noted that the MySQL server should not overwrite existing files."
      solution    : "Perform the following steps to remediate this setting:

Enumerate the non-administrative users found in the result set of the audit procedure.

For each user, issue the following SQL statement (replace <user> with the non-administrative user):

REVOKE FILE ON *.* FROM '<user>';"
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|14.6,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'FILE';"
      sql_types   : REGEX
      sql_expect  : "\'@ADMIN_USER@\'@.+"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "5.4 Ensure 'SUPER' is Not Granted to Non-Administrative Users"
      info        : "The SUPER privilege is a powerful and far-reaching privilege and should not be granted lightly.

The SUPER privilege shown in the INFORMATION_SCHEMA.USER_PRIVILEGES table governs the use of a variety of MySQL features. These features include, CHANGE MASTER TO, KILL, mysqladmin kill option, PURGE BINARY LOGS, SET GLOBAL, mysqladmin debug option, logging control, and more.

Rationale:

The SUPER privilege allows principals to perform many actions, including view and terminate currently executing MySQL statements (including statements used to manage passwords). This privilege also provides the ability to configure MySQL, such as enable/disable logging, alter data, disable/enable features. Limiting the accounts that have the SUPER privilege reduces the chances that an attacker can exploit these capabilities.

It is more secure to migrate administrative users off SUPER and instead assign the specific and minimal set of mysql Dynamic Privileges needed to perform their tasks.

Impact:

When the SUPER privilege is denied to a given user, that user will be unable to take advantage of certain capabilities, such as certain mysqladmin options."
      solution    : "Perform the following steps to remediate this setting:

Enumerate the non-administrative users found in the result set of the audit procedure

For each user, issue the following SQL statement (replace <user> with the non-administrative user):

REVOKE SUPER ON *.* FROM '<user>';

Next minimize administrator rights

Assess the minimal set of Dynamic Permissions needed by a user to perform their duties.

For each user assign the appropriate Dynamic Permission and then revoke that <user> SUPER capability.

For example, if administrator 'u1'@'localhost' requires SUPER for binary log purging and system variable modification, these statements make the required changes to the account thus limiting rights to what is needed:

GRANT BINLOG_ADMIN, SYSTEM_VARIABLES_ADMIN ON *.* TO 'u1'@'localhost';
REVOKE SUPER ON *.* FROM 'u1'@'localhost';"
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|14.6,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'SUPER';"
      sql_types   : REGEX
      sql_expect  : "\'@ADMIN_USER@\'@.+"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "5.5 Ensure 'SHUTDOWN' is Not Granted to Non-Administrative Users"
      info        : "The SHUTDOWN privilege simply enables use of the shutdown option to the mysqladmin command, which allows a user with the SHUTDOWN privilege the ability to shut down the MySQL server.

Rationale:

The SHUTDOWN privilege allows principals to shutdown MySQL. This may be leveraged by an attacker to negatively impact the availability of MySQL."
      solution    : "Perform the following steps to remediate this setting:

Enumerate the non-administrative users found in the result set of the audit procedure.

For each user, issue the following SQL statement (replace <user> with the non-administrative user):

REVOKE SHUTDOWN ON *.* FROM '<user>';"
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|14.6,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'SHUTDOWN';"
      sql_types   : REGEX
      sql_expect  : "\'@ADMIN_USER@\'@.+"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "5.6 Ensure 'CREATE USER' is Not Granted to Non-Administrative Users"
      info        : "The CREATE USER privilege governs the right of a given user to add or remove users, change existing users' names, or revoke existing users' privileges.

Rationale:

Reducing the number of users granted the CREATE USER right minimizes the number of users able to add/drop users, alter existing users' names, and manipulate existing users' privileges.

Impact:

Users that are denied the CREATE USER privilege will not only be unable to create a user, but they may be unable to drop a user, rename a user, or otherwise revoke a given user's privileges."
      solution    : "Perform the following steps to remediate this setting:

Enumerate the non-administrative users found in the result set of the audit procedure

For each user, issue the following SQL statement (replace <user> with the non-administrative user):

REVOKE CREATE USER ON *.* FROM '<user>';"
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|14.6,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'CREATE USER';"
      sql_types   : REGEX
      sql_expect  : "\'@ADMIN_USER@\'@.+"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "5.7 Ensure 'GRANT OPTION' is Not Granted to Non-Administrative Users"
      info        : "The GRANT OPTION privilege exists in different contexts (mysql.user, mysql.db) for the purpose of governing the ability of a privileged user to manipulate the privileges of other users.

Rationale:

The GRANT OPTION privilege allows a principal to grant other principals additional privileges. This may be used by an attacker to compromise MySQL."
      solution    : "Perform the following steps to remediate this setting:

Enumerate the non-administrative users found in the result sets of the audit procedure

For each user, issue the following SQL statement (replace <user> with the non-administrative user):

REVOKE GRANT OPTION ON *.* FROM <user>;"
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|14.6,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'GRANT OPTION';"
      sql_types   : REGEX
      sql_expect  : "\'@ADMIN_USER@\'@.+"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "5.8 Ensure 'REPLICATION SLAVE' is Not Granted to Non-Administrative Users"
      info        : "The REPLICATION SLAVE privilege governs whether a given user (in the context of the source server) can request updates that have been made on the source server.

Rationale:

The REPLICATION SLAVE privilege allows a principal to fetch binlog files containing all data changing statements and/or changes to table data from the source. This may be used by an attacker to read/fetch sensitive data from MySQL."
      solution    : "Perform the following steps to remediate this setting:

Enumerate the non-replica users found in the result set of the audit procedure

For each user, issue the following SQL statement (replace <user> with the non-replica user):

REVOKE REPLICATION SLAVE ON *.* FROM <user>;

Use the REVOKE statement to remove the REPLICATION SLAVE privilege from users who shouldn't have it."
      reference   : "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1M,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'REPLICATION SLAVE';"
      sql_types   : REGEX
      sql_expect  : "\'@ADMIN_USER@\'@.+"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "5.9 Ensure DML/DDL Grants Are Limited to Specific Databases and Users"
      info        : "DML/DDL includes the set of privileges used to modify or create data structures. This includes INSERT, SELECT, UPDATE, DELETE, DROP, CREATE, and ALTER privileges.

Rationale:

INSERT, SELECT, UPDATE, DELETE, DROP, CREATE, and ALTER are powerful privileges in any database. Such privileges should be limited only to those users requiring such rights. By limiting the users with these rights and ensuring that they are limited to specific databases, the attack surface of the database is reduced."
      solution    : "Perform the following steps to remediate this setting:

Enumerate the unauthorized users, hosts, and databases returned in the result set of the audit procedure

For each user, issue the following SQL statement (replace <user> with the unauthorized user, <host> with host name, and <database> with the database name):

REVOKE SELECT ON <host>.<database> FROM <user>;
REVOKE INSERT ON <host>.<database> FROM <user>;
REVOKE UPDATE ON <host>.<database> FROM <user>;
REVOKE DELETE ON <host>.<database> FROM <user>;
REVOKE CREATE ON <host>.<database> FROM <user>;
REVOKE DROP ON <host>.<database> FROM <user>;
REVOKE ALTER ON <host>.<database> FROM <user>;"
      reference   : "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1M,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT User,Host,Db FROM mysql.db WHERE Select_priv='Y' OR Insert_priv='Y' OR Update_priv='Y' OR Delete_priv='Y' OR Create_priv='Y' OR Drop_priv='Y' OR Alter_priv='Y';"
      sql_types   : STRING, REGEX, REGEX
      sql_expect  : "@ADMIN_USER@", ".+", ".+"
    </custom_item>

    <report type:"WARNING">
      description : "5.10 Securely Define Stored Procedures and Functions DEFINER and INVOKER"
      info        : "Stored procedure and stored function declarations include a definition of permissions which can be used to escalate permissions. It's important to inspect these settings to ensure they do not unnecessarily escalate privileges.

Rationale:

A stored procedure or function that improperly escalates privileges may provide unintended access rights which can be improperly used.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Drop and recreate stored procedures and functions using proper DEFINER and INVOKER settings, or other code changes."
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|PL-8,800-53|SA-8,800-53r5|PL-8,800-53r5|SA-8,CSCv7|14.6,CSCv8|16.10,CSF|ID.AM-3,CSF|PR.IP-2,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|1M,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,QCSC-v1|4.2,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
    </report>

    <custom_item>
      type        : SQL_POLICY
      description : "6.1 Ensure 'log_error' Is Not Empty"
      info        : "The error log contains information about events such as mysqld starting and stopping, when a table needs to be checked or repaired, and, depending on the host operating system, stack traces when mysqld fails.

Rationale:

Enabling error logging can increase the ability to detect malicious attempts against MySQL, and other critical messages. For example, if the error log is not enabled then a connection error could go unnoticed.

When empty, MySQL will send log data to the console. Logging to the console is useful, but remember it is ephemeral. This is not recommended due to the fact that logging to console does not provide a means to force restricted access via permissions strictly to MySQL and dedicated MySQL audit accounts. This may compromise the confidentiality of the MySQL log data. Furthermore use caution if co-mingling log data from multiple sources as that can complicate log inspection. Additionally from a security auditing perspective, it's difficult and error prone to verify logging is correct."
      solution    : "Perform the following actions to remediate this setting:

Open the MySQL configuration file (my.cnf or my.ini).

Set the log-error option to the path for the error log."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-2,800-53|AU-7,800-53|AU-12,800-53r5|AU-2,800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(c),CN-L3|8.1.4.3(a),CSCv7|6.2,CSCv8|8.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-2,ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|M1.2.2,NESA|M5.5.1,NIAv2|AM7,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|SS30,NIAv2|VL8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW variables LIKE 'log_error';"
      sql_types   : STRING, REGEX
      sql_expect  : "log_error", ".+"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "6.2 Ensure Log Files Are Stored on a Non-System Partition"
      info        : "MySQL log files can be set in the MySQL configuration to exist anywhere on the filesystem. It is common practice to ensure that the system filesystem is left uncluttered by application logs. System filesystems include the root (/), /var, or /usr.

Rationale:

Moving the MySQL logs off the system partition will reduce the probability of denial of service via the exhaustion of available disk space to the operating system."
      solution    : "Perform the following actions to remediate this setting:

Open the MySQL configuration file (my.cnf)

Locate the log-bin entry and set it to a file not on root (/), /var, or /usr"
      reference   : "800-53|AU-4,800-53r5|AU-4,CSCv7|6.4,CSCv8|8.3,CSF|PR.DS-4,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-4,LEVEL|1A,NESA|T3.3.1,NESA|T3.6.2,QCSC-v1|8.2.1,QCSC-v1|13.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "show GLOBAL VARIABLES WHERE Variable_Name = 'log_bin_basename' AND Value LIKE 'C:%' OR Variable_Name = 'log_bin_basename' AND Value = '/' OR Variable_Name = 'log_bin_basename' AND Value = '/var%' OR Variable_Name = 'log_bin_basename' AND Value = '/usr%';"
      sql_types   : NULL, NULL
      sql_expect  : NULL, NULL
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "6.5 Ensure 'audit_log_connection_policy' is Not Set to 'NONE' - NONE"
      info        : "The audit_log_connection_policy variable controls how the audit plugin writes connection events to the audit log file.

Rationale:

The audit_log_connection_policy offers three options: NONE, ERRORS, and ALL. Each option determines whether connection events are logged and the type of connection events that are logged. Setting a non 'NONE' value for audit_log_connection_policy ensures at a minimum, failed connection events are being logged. The ERRORS setting will log failed connection events and the ALL setting will log all connection events.

Impact:

If audit_log_connection_policy is set to NONE, the MySQL server will not log failed connections, successful connections or any other connection related events."
      solution    : "To remediate this configuration setting, execute one of the following SQL statements:

set global audit_log_connection_policy = ERRORS

Or

set global audit_log_connection_policy = ALL

To ensure this remediation remains indefinite for the life of the MySQL Server, set audit_log_connection_policy in the server's assigned MySQL configuration file (usually named my.cnf, but not always).

Default Value:

The default value for audit_log_connection_policy is ALL."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|6.3,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW variables LIKE '%audit_log_connection_policy%';"
      sql_types   : REGEX, REGEX
      sql_expect  : ".*audit_log_connection_policy.*", "(ALL|ERRORS)"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "6.6 Ensure 'audit_log_exclude_accounts' is Set to 'NULL'"
      info        : "The audit_log_exclude_accounts variable enables the administrator to set accounts for which events will not be logged in the audit log.

Rationale:

The audit_log_exclude_accounts variable has two permitted values, either NULL or a list of MySQL accounts. Setting this variable correctly ensures no single user is able to unintentionally evade being logged. Particular attention should be made to privileged accounts, as such accounts will generally be bestowed with more privileges than normal users, and should not be listed against this variable.

Impact:

If a user or a list of users are set as the values for audit_log_exclude_accounts, these user(s) will evade being logged in the audit log. This may allow malicious connections or query activity to go unnoticed in the audit log."
      solution    : "To remediate this configuration setting, execute the following SQL statement

SET GLOBAL audit_log_exclude_accounts = NULL;

Or set audit_log_exclude_accounts=NULL in my.cnf.

Default Value:

audit_log_exclude_accounts is set to NULL by default."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|6.3,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW variables LIKE '%audit_log_exclude_accounts%';"
      sql_types   : REGEX, NULL
      sql_expect  : ".*audit_log_exclude_accounts.*", NULL
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "6.7 Ensure 'audit_log_include_accounts' is Set to 'NULL'"
      info        : "The audit_log_include_accounts variable enables the administrator to set accounts for which events should be logged in the audit log.

Rationale:

The audit_log_include_accounts variable has two permitted values, either NULL or a list of MySQL accounts. Setting this variable correctly ensures all MySQL users are being logged in the audit log.

Impact:

If a user or a list of users are set as the values for audit_log_include_accounts, these user(s) will ONLY be logged. Other users permitted to access the MySQL Server but not listed under the audit_log_include_accounts variable will avoid being logged in the audit log. Setting audit_log_include_accounts to NULL ensures no MySQL users excluded from the audit log."
      solution    : "To remediate this configuration setting, execute the following SQL statement

SET GLOBAL audit_log_include_accounts = NULL;

Or set audit_log_include_accounts=NULL in my.cnf.

Default Value:

audit_log_exclude_accounts is set to NULL by default."
      reference   : "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|6.3,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW variables LIKE '%audit_log_include_accounts%';"
      sql_types   : REGEX, NULL
      sql_expect  : ".*audit_log_include_accounts.*", NULL
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "6.8 Ensure 'audit_log_policy' is Set to 'LOGINS'"
      info        : "With the audit_log_policy setting the amount of information which is sent to the audit log is controlled. It must be set to log logins.

Rationale:

If this setting is set to QUERIES or NONE then connections are not written to the audit log file."
      solution    : "Add the following line to the [mysqld] section of the MySQL configuration file and restart the MySQL service:

audit_log_policy=LOGINS

Default Value:

ALL"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-3,800-53|AU-3(1),800-53|AU-7,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-3(1),800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.2.3(c),CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|8.1.4.3(b),CSCv7|6.3,CSCv8|8.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-3(1),ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW GLOBAL VARIABLES LIKE 'audit_log_policy';"
      sql_types   : STRING, REGEX
      sql_expect  : "audit_log_policy", "(ALL|LOGINS)"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "6.11 Ensure the Audit Plugin Can't be Unloaded"
      info        : "Set audit_log to FORCE_PLUS_PERMANENT

      Rationale:

      This makes disables unloading on the plugin.

      Impact:

      If someone can unload the plugin it would be possible to perform actions on the database without audit events being logged to the audit log. If the audit log plugin can be unloaded the audit log can be temporarily or permanently disabled."
      solution    : "To remediate this setting, follow these steps:

Open the MySQL configuration file (my.cnf)

Ensure the following line is found in the mysqld section

audit_log = 'FORCE_PLUS_PERMANENT'

Default Value:

ON"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-2,800-53|AU-7,800-53|AU-12,800-53r5|AU-2,800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(c),CN-L3|8.1.4.3(a),CSCv7|6.2,CSCv8|8.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-2,ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|1A,NESA|M1.2.2,NESA|M5.5.1,NIAv2|AM7,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|SS30,NIAv2|VL8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT LOAD_OPTION FROM information_schema.plugins WHERE PLUGIN_NAME='audit_log';"
      sql_types   : STRING, STRING
      sql_expect  : "audit_log", "FORCE_PLUS_PERMANENT"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.1 Ensure 'old_passwords' Is Not Set to '1' - ON"
      info        : "This variable controls the password hashing method used by the PASSWORD() function and for the IDENTIFIED BY clause of the CREATE USER and GRANT statements. Before 5.6.6, the value can be 0, or 1. As of 5.6.6, the value can be one of the following:

0 - authenticate with the mysql_native_password plugin

1 - authenticate with the mysql_old_password plugin

2 - authenticate with the sha256_password plugin

Rationale:

When old_passwords is set to 1 the PASSWORD() function will create password hashes with a very weak hashing algorithm which might be easy to break if captured by an attacker."
      solution    : "Configure mysql to leverage the mysql_native_password or sha256_password plugin. For more information, see:

https://dev.mysql.com/doc/refman/5.6/en/password-hashing.html

https://dev.mysql.com/doc/refman/5.6/en/sha256-pluggable-authentication.html

Default Value:

0"
      reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW VARIABLES WHERE Variable_name = 'old_passwords';"
      sql_types   : STRING, REGEX
      sql_expect  : "old_passwords", "^(0|2)$"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.2 Ensure 'secure_auth' is Set to 'ON' - ON"
      info        : "This option dictates whether the server will deny connections by clients that attempt to use accounts that have their password stored in the mysql_old_password format.

Rationale:

Enabling this option will prevent all use of passwords employing the old format (and hence insecure communication over the network).

Impact:

Accounts having credentials stored using the old password format will be unable to login. Execute the following command to identify accounts that will be impacted by implementing this setting:

SELECT User,Host FROM mysql.user WHERE plugin='mysql_old_password';"
      solution    : "Add the following line to [mysqld] portions of the MySQL option file to establish the recommended state:

secure_auth=ON

Default Value:

Prior to MySQL 5.6.5, this option was disabled by default. As of MySQL 5.6.5, it is enabled by default."
      reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW VARIABLES WHERE Variable_name = 'secure_auth';"
      sql_types   : STRING, STRING
      sql_expect  : "secure_auth", "ON"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.4 Ensure 'sql_mode' Contains 'NO_AUTO_CREATE_USER' - '@@global.sql_mode'"
      info        : "NO_AUTO_CREATE_USER is an option for sql_mode that prevents a GRANT statement from automatically creating a user when authentication information is not provided.

Rationale:

Blank passwords negate the benefits provided by authentication mechanisms. Without this setting an administrative user might accidentally create a user without a password."
      solution    : "Perform the following actions to remediate this setting:

Open the MySQL configuration file (my.cnf)

Find the sql_mode setting in the [mysqld] area

Add the NO_AUTO_CREATE_USER to the sql_mode setting

Default Value:

NO_ENGINE_SUBSTITUTION"
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|PL-8,800-53|SA-8,800-53r5|PL-8,800-53r5|SA-8,CSCv8|16.10,CSF|ID.AM-3,CSF|PR.IP-2,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|1A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,QCSC-v1|4.2,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "select @@global.sql_mode ;"
      sql_types   : REGEX
      sql_expect  : "NO_AUTO_CREATE_USER"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.4 Ensure 'sql_mode' Contains 'NO_AUTO_CREATE_USER' - '@@session.sql_mode'"
      info        : "NO_AUTO_CREATE_USER is an option for sql_mode that prevents a GRANT statement from automatically creating a user when authentication information is not provided.

Rationale:

Blank passwords negate the benefits provided by authentication mechanisms. Without this setting an administrative user might accidentally create a user without a password."
      solution    : "Perform the following actions to remediate this setting:

Open the MySQL configuration file (my.cnf)

Find the sql_mode setting in the [mysqld] area

Add the NO_AUTO_CREATE_USER to the sql_mode setting

Default Value:

NO_ENGINE_SUBSTITUTION"
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|PL-8,800-53|SA-8,800-53r5|PL-8,800-53r5|SA-8,CSCv8|16.10,CSF|ID.AM-3,CSF|PR.IP-2,GDPR|32.1.b,GDPR|32.1.d,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|1A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2,QCSC-v1|4.2,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "select @@session.sql_mode ;"
      sql_types   : REGEX
      sql_expect  : "NO_AUTO_CREATE_USER"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.5 Ensure Passwords are Set for All MySQL Accounts"
      info        : "Blank passwords allow a user to login without using a password.

Rationale:

Without a password only knowing the username and the list of allowed hosts will allow someone to connect to the server and assume the identity of the user. This, in effect, bypasses authentication mechanisms."
      solution    : "For each row returned from the audit procedure, set a password for the given user using the following statement (as an example):

SET PASSWORD FOR <user>@'<host>' = PASSWORD('<clear password>')

Note: Replace <user>, <host>, and <clear password> with appropriate values."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv7|4.4,CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT User,host FROM mysql.user WHERE (plugin IN('mysql_native_password', 'mysql_old_password') AND (LENGTH(Password) = 0 OR Password IS NULL)) OR (plugin='sha256_password' AND LENGTH(authentication_string) = 0);"
      sql_types   : NULL, NULL
      sql_expect  : NULL, NULL
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.6 Ensure Password Complexity Policies are in Place - 'validate_password_length'"
      info        : "Password complexity includes password characteristics such as length, case, numerical, and character sets.

Rationale:

Complex passwords help mitigate dictionary, brute forcing, and other password attacks. This recommendation prevents users from choosing weak passwords which can easily be guessed.

Impact:

Remediation for this recommendation requires a server restart."
      solution    : "Add to the global configuration:

plugin-load=validate_password.so
validate-password=FORCE_PLUS_PERMANENT
validate_password_length=14
validate_password_dictionary_file=<path to dictionary file>
validate_password_policy=STRONG

Optionally set one or more of these - ensuring complexity is not overly onerous

validate_password_mixed_case_count=1
validate_password_number_count=1
validate_password_special_char_count=1

And change passwords for users which have passwords which are identical to their username."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv7|4.4,CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW VARIABLES LIKE 'validate_password_length'"
      sql_types   : STRING, REGEX
      sql_expect  : "validate_password_length", "(1[4-9]|[2-9][0-9])"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.6 Ensure Password Complexity Policies are in Place - 'validate_password_mixed_case_count'"
      info        : "Password complexity includes password characteristics such as length, case, numerical, and character sets.

Rationale:

Complex passwords help mitigate dictionary, brute forcing, and other password attacks. This recommendation prevents users from choosing weak passwords which can easily be guessed.

Impact:

Remediation for this recommendation requires a server restart."
      solution    : "Add to the global configuration:

plugin-load=validate_password.so
validate-password=FORCE_PLUS_PERMANENT
validate_password_length=14
validate_password_dictionary_file=<path to dictionary file>
validate_password_policy=STRONG

Optionally set one or more of these - ensuring complexity is not overly onerous

validate_password_mixed_case_count=1
validate_password_number_count=1
validate_password_special_char_count=1

And change passwords for users which have passwords which are identical to their username."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv7|4.4,CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW VARIABLES LIKE 'validate_password_mixed_case_count'"
      sql_types   : STRING, INTEGER
      sql_expect  : "validate_password_mixed_case_count", 1
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.6 Ensure Password Complexity Policies are in Place - 'validate_password_number_count'"
      info        : "Password complexity includes password characteristics such as length, case, numerical, and character sets.

Rationale:

Complex passwords help mitigate dictionary, brute forcing, and other password attacks. This recommendation prevents users from choosing weak passwords which can easily be guessed.

Impact:

Remediation for this recommendation requires a server restart."
      solution    : "Add to the global configuration:

plugin-load=validate_password.so
validate-password=FORCE_PLUS_PERMANENT
validate_password_length=14
validate_password_dictionary_file=<path to dictionary file>
validate_password_policy=STRONG

Optionally set one or more of these - ensuring complexity is not overly onerous

validate_password_mixed_case_count=1
validate_password_number_count=1
validate_password_special_char_count=1

And change passwords for users which have passwords which are identical to their username."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv7|4.4,CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW VARIABLES LIKE 'validate_password_number_count'"
      sql_types   : STRING, INTEGER
      sql_expect  : "validate_password_number_count", 1
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.6 Ensure Password Complexity Policies are in Place - 'validate_password_special_char_count'"
      info        : "Password complexity includes password characteristics such as length, case, numerical, and character sets.

Rationale:

Complex passwords help mitigate dictionary, brute forcing, and other password attacks. This recommendation prevents users from choosing weak passwords which can easily be guessed.

Impact:

Remediation for this recommendation requires a server restart."
      solution    : "Add to the global configuration:

plugin-load=validate_password.so
validate-password=FORCE_PLUS_PERMANENT
validate_password_length=14
validate_password_dictionary_file=<path to dictionary file>
validate_password_policy=STRONG

Optionally set one or more of these - ensuring complexity is not overly onerous

validate_password_mixed_case_count=1
validate_password_number_count=1
validate_password_special_char_count=1

And change passwords for users which have passwords which are identical to their username."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv7|4.4,CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW VARIABLES LIKE 'validate_password_special_char_count'"
      sql_types   : STRING, INTEGER
      sql_expect  : "validate_password_special_char_count", 1
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.6 Ensure Password Complexity Policies are in Place - 'validate_password_policy'"
      info        : "Password complexity includes password characteristics such as length, case, numerical, and character sets.

Rationale:

Complex passwords help mitigate dictionary, brute forcing, and other password attacks. This recommendation prevents users from choosing weak passwords which can easily be guessed.

Impact:

Remediation for this recommendation requires a server restart."
      solution    : "Add to the global configuration:

plugin-load=validate_password.so
validate-password=FORCE_PLUS_PERMANENT
validate_password_length=14
validate_password_dictionary_file=<path to dictionary file>
validate_password_policy=STRONG

Optionally set one or more of these - ensuring complexity is not overly onerous

validate_password_mixed_case_count=1
validate_password_number_count=1
validate_password_special_char_count=1

And change passwords for users which have passwords which are identical to their username."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv7|4.4,CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW VARIABLES LIKE 'validate_password_policy'"
      sql_types   : STRING, STRING
      sql_expect  : "validate_password_policy", "STRONG"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.6 Ensure Password Complexity Policies are in Place - 'validate_password_dictionary_file'"
      info        : "Password complexity includes password characteristics such as length, case, numerical, and character sets.

Rationale:

Complex passwords help mitigate dictionary, brute forcing, and other password attacks. This recommendation prevents users from choosing weak passwords which can easily be guessed.

Impact:

Remediation for this recommendation requires a server restart."
      solution    : "Add to the global configuration:

plugin-load=validate_password.so
validate-password=FORCE_PLUS_PERMANENT
validate_password_length=14
validate_password_dictionary_file=<path to dictionary file>
validate_password_policy=STRONG

Optionally set one or more of these - ensuring complexity is not overly onerous

validate_password_mixed_case_count=1
validate_password_number_count=1
validate_password_special_char_count=1

And change passwords for users which have passwords which are identical to their username."
      reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv7|4.4,CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW VARIABLES LIKE 'validate_password_dictionary_file'"
      sql_types   : STRING, REGEX
      sql_expect  : "validate_password_dictionary_file", ".+"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.7 Ensure No Users Have Wildcard Hostnames"
      info        : "MySQL can make use of host wildcards when granting permissions to users on specific databases. For example, you may grant a given privilege to '<user>'@'%'.

Rationale:

Avoiding the use of wildcards within hostnames helps control the specific locations from which a given user may connect to and interact with the database."
      solution    : "Perform the following actions to remediate this setting:

Enumerate all users returned after running the audit procedure.

Either ALTER the user's host to be specific or DROP the user."
      reference   : "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|1A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "select user,host from mysql.user where host = '%' ;"
      sql_types   : NULL, NULL
      sql_expect  : NULL, NULL
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "7.8 Ensure No Anonymous Accounts Exist"
      info        : "Anonymous accounts are users with empty usernames (''). Anonymous accounts have no passwords, so anyone can use them to connect to the MySQL server.

Rationale:

Removing anonymous accounts will help ensure that only identified and trusted principals are capable of interacting with MySQL.

Impact:

Any applications relying on anonymous database access will be adversely affected by this change."
      solution    : "Perform the following actions to remediate this setting:

Enumerate the anonymous users returned from executing the audit procedure.

For each anonymous user, DROP or assign them a name.

Note: As an alternative, you may execute the mysql_secure_installation utility."
      reference   : "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CN-L3|7.1.3.2(d),CSCv7|16.6,CSCv8|5.1,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1A,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT user,host FROM mysql.user WHERE user = '';"
      sql_types   : NULL, NULL
      sql_expect  : NULL, NULL
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "8.1 Ensure 'have_ssl' Is Set to 'YES'"
      info        : "All network traffic must use SSL/TLS when traveling over untrusted networks.

Rationale:

Enabling Secure Sockets Layer (SSL) will allow clients to encrypt network traffic and verify the identity of the server. The SSL/TLS-protected MySQL protocol helps to prevent eavesdropping and man-in-the-middle attacks.

Impact:

Enabling SSL will allow clients to encrypt network traffic and verify the identity of the server. This could have impact on network traffic inspection."
      solution    : "Follow the procedures as documented in the MySQL 5.6 Reference Manual to setup SSL.

Default Value:

DISABLED"
      reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SHOW variables WHERE variable_name IN ('have_ssl', 'have_openssl');"
      sql_types   : REGEX, STRING
      sql_expect  : "(have_ssl|have_openssl)", "YES"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "8.2 Ensure 'ssl_type' Is Set to 'ANY', 'X509', or 'SPECIFIED' for All Remote Users"
      info        : "All network traffic must use SSL/TLS when traveling over untrusted networks.

SSL/TLS should be enforced on a per-user basis for users which enter the system through the network.

Rationale:

The SSL/TLS-protected MySQL protocol helps to prevent eavesdropping and man-in-the-middle attacks.

Impact:

When SSL/TLS is enforced then clients which do not use SSL will not be able to connect. If the server is not configured for SSL/TLS then accounts for which SSL/TLS is mandatory will not be able to connect."
      solution    : "Use the GRANT statement to require the use of SSL:

GRANT USAGE ON *.* TO 'my_user'@'app1.example.com' REQUIRE X509;

Note: REQUIRE SSL only enforces SSL. There are additional options REQUIRE ISSUER, REQUIRE SUBJECT which can be used to further restrict the connection.

Default Value:

Not enforced (ssl_type is empty)"
      reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT user, host, ssl_type FROM mysql.user WHERE NOT HOST IN ('::1', '127.0.0.1', 'localhost');"
      sql_types   : REGEX, REGEX, REGEX
      sql_expect  : ".+", ".+", "(X509|SPECIFIED)"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : SQL_POLICY
          description : "max_connections is set"
          sql_request : "SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME LIKE 'max_connections';"
          sql_types   : STRING, REGEX
          sql_expect  : "max_connections", "^[1-9][0-9]*$"
        </custom_item>
      </condition>

      <then>
        <report type:"PASSED">
          description : "8.3 Set Maximum Connection Limits for Server and per User"
          info        : "Limiting concurrent connections to a MySQL server can be used to reduce risk of Denial of Service (DoS) attacks performed by exhausting connection resources.

Rationale:

Limiting the number of concurrent sessions at the server and per user level helps to reduce the risk of DoS attacks. MySQL provides mechanisms to limit the number of simultaneous connections that can be made at the server level or by any given account."
          solution    : "Connect to the MySQL Database as an administrator.

For example, to set the global default per user to 50 run the command:

SET PERSIST max_user_connections=50;

To control the maximum number of clients the server permits to connect simultaneously, set the max_connections system variable:

SET PERSIST max_connections=1000;

Additionally, this max user connections can be set per user as well as for a given period of time period using CREATE or GRANT.

For example:

GRANT ALL ON *.* TO 'fred'@'localhost'
    WITH MAX_CONNECTIONS_PER_HOUR 5
         MAX_USER_CONNECTIONS 2;

Default Value:

The default value of max_connections is 151, max_user_connections is 0 (unlimited, thus limited by max_connections)."
          reference   : "800-171|3.1.11,800-53|AC-12,800-53r5|AC-12,CN-L3|7.1.2.2(d),CN-L3|7.1.3.7(b),CN-L3|8.1.4.1(b),GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iii),ITSG-33|AC-12,LEVEL|1M,NIAv2|NS49"
          see_also    : "https://workbench.cisecurity.org/files/3848"
        </report>
      </then>

      <else>
        <custom_item>
          type        : SQL_POLICY
          description : "8.3 Set Maximum Connection Limits for Server and per User"
          info        : "Limiting concurrent connections to a MySQL server can be used to reduce risk of Denial of Service (DoS) attacks performed by exhausting connection resources.

Rationale:

Limiting the number of concurrent sessions at the server and per user level helps to reduce the risk of DoS attacks. MySQL provides mechanisms to limit the number of simultaneous connections that can be made at the server level or by any given account."
          solution    : "Connect to the MySQL Database as an administrator.

For example, to set the global default per user to 50 run the command:

SET PERSIST max_user_connections=50;

To control the maximum number of clients the server permits to connect simultaneously, set the max_connections system variable:

SET PERSIST max_connections=1000;

Additionally, this max user connections can be set per user as well as for a given period of time period using CREATE or GRANT.

For example:

GRANT ALL ON *.* TO 'fred'@'localhost'
    WITH MAX_CONNECTIONS_PER_HOUR 5
         MAX_USER_CONNECTIONS 2;

Default Value:

The default value of max_connections is 151, max_user_connections is 0 (unlimited, thus limited by max_connections)."
          reference   : "800-171|3.1.11,800-53|AC-12,800-53r5|AC-12,CN-L3|7.1.2.2(d),CN-L3|7.1.3.7(b),CN-L3|8.1.4.1(b),GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iii),ITSG-33|AC-12,LEVEL|1M,NIAv2|NS49"
          see_also    : "https://workbench.cisecurity.org/files/3848"
          sql_request : "SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME LIKE 'max_user_connections';"
          sql_types   : STRING, REGEX
          sql_expect  : "max_user_connections", "^[1-9][0-9]*$"
        </custom_item>
      </else>
    </if>

    <report type:"WARNING">
      description : "9.1 Ensure Replication Traffic Is Secured"
      info        : "The replication traffic between servers should be secured. Security measures should include ensuring the confidentiality and integrity of the traffic, and performing mutual authentication between the servers before performing replication.

Rationale:

The replication traffic should be secured as it gives access to all transferred information and might leak passwords.

Impact:

When the replication traffic is not secured someone might be able to capture passwords and other sensitive information when sent to the slave.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
      solution    : "Secure the network traffic using one or more technologies to provide confidentiality and integrity for the traffic, and mutual authentication for the servers."
      reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|1M,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/files/3848"
    </report>

    <custom_item>
      type        : SQL_POLICY
      description : "9.2 Ensure 'MASTER_SSL_VERIFY_SERVER_CERT' Is Set to 'YES' or '1' - 1"
      info        : "In the MySQL SLAVE context the setting MASTER_SSL_VERIFY_SERVER_CERT indicates whether the SLAVE should verify the MASTER's certificate. This configuration item may be set to Yes or No, and unless SSL has been enabled on the SLAVE, the value will be ignored.

Rationale:

When SSL is in use certificate verification is important to authenticate the party to which a connection is being made. In this case, the SLAVE (client) should verify the MASTER's (server's) certificate to authenticate the MASTER prior to continuing the connection.

Impact:

When using CHANGE MASTER to, be aware of the following:

SLAVE processes need to be stopped prior to executing CHANGE MASTER to.

Use of CHANGE MASTER to starts new relay logs without keeping the old ones unless explicitly told to keep them.

When CHANGE MASTER to is invoked, some information is dumped to the error log (previous values for MASTER_HOST, MASTER_PORT, MASTER_LOG_FILE, and MASTER_LOG_POS).

Invoking CHANGE MASTER to will implicitly commit any ongoing transactions in the session where the CHANGE MASTER to was run, but not all ongoing transactions on the database."
      solution    : "To remediate this setting you must use the CHANGE MASTER to command.

STOP SLAVE; -- required if replication was already running
CHANGE MASTER to MASTER_SSL_VERIFY_SERVER_CERT=1;
START SLAVE; -- required if you want to restart replication"
      reference   : "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv8|13.9,CSF|PR.IP-1,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|1A,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "select ssl_verify_server_cert from mysql.slave_master_info;"
      sql_types   : STRING
      sql_expect  : "1"
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "9.4 Ensure 'super_priv' Is Not Set to 'Y' for Replication Users"
      info        : "The SUPER privilege found in the mysql.user table governs the use of a variety of MySQL features. These features include, CHANGE MASTER TO, KILL, mysqladmin kill option, PURGE BINARY LOGS, SET GLOBAL, mysqladmin debug option, logging control, and more.

Rationale:

The SUPER privilege allows principals to perform many actions, including view and terminate currently executing MySQL statements (including statements used to manage passwords). This privilege also provides the ability to configure MySQL, such as enable/disable logging, alter data, disable/enable features. Limiting the accounts that have the SUPER privilege reduces the chances that an attacker can exploit these capabilities.

Impact:

When the SUPER privilege is denied to a given user, that user will be unable to take advantage of certain capabilities, such as certain mysqladmin options."
      solution    : "Execute the following steps to remediate this setting:

Enumerate the replication users found in the result set of the audit procedure

For each replication user, issue the following SQL statement (replace repl with your replication user's name):

REVOKE SUPER ON *.* FROM 'repl';"
      reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|4.7,CSCv8|5.4,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "select user, host from mysql.user where user='repl' and Super_priv = 'Y';"
      sql_types   : NULL, NULL
      sql_expect  : NULL, NULL
    </custom_item>

    <custom_item>
      type        : SQL_POLICY
      description : "9.5 Ensure No Replication Users Have Wildcard Hostnames"
      info        : "MySQL can make use of host wildcards when granting permissions to users on specific databases. For example, you may grant a given privilege to '<user>'@'%'.

Rationale:

Avoiding the use of wildcards within hostnames helps control the specific locations from which a given user may connect to and interact with the database."
      solution    : "Perform the following actions to remediate this setting:

Enumerate all users returned after running the audit procedure

Either ALTER the user's host to be specific or DROP the user"
      reference   : "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CN-L3|7.1.3.2(d),CSCv7|14.6,CSCv8|5.1,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1A,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2"
      see_also    : "https://workbench.cisecurity.org/files/3848"
      sql_request : "SELECT user, host FROM mysql.user WHERE user='repl' AND host = '%';"
      sql_types   : NULL, NULL
      sql_expect  : NULL, NULL
    </custom_item>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_MySQL_5.6_Enterprise_Benchmark_v2.0.0_LEVEL_1_DB.audit from CIS Oracle MySQL 5.6 Enterprise Edition Benchmark"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://workbench.cisecurity.org/files/3848"
    </report>
  </else>
</if>

</check_type>
