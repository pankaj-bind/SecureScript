#TRUSTED 844203d9e9a69b4c11b0b69f9d6662b7589fa6ed39db040c35a1b33742a3c1eec5350fb84f8e4da31598a1f300bdb6b333f3d01c712536d68365fa41e99ca999ae07c27f5993a2b4ee10cea87947ac04c0daea93302f826d4e9cbfac7533361c4b53ea54a81cceaadedca750817fe52092d00ad7adbb90f3b094e0a7080c929ba2b3bce2a167160794a8304b986f63ac64653312242748ffcc349c6fca1a1c6f62d1f4a54153ff06fbb8fb16a6bcc3fddddec2333dc1c914b11077f06f0be53438790692f32ae4948416d512c49c4d8c677a77dc31557907dcedf22d13244b056123316203c5ddcafb2f650440bbe724e54b49d11afd412653b5ac91c3168515e75a02a308c241fd4069724ad1769b0f8a8c0dd2d42273ef06844202ad49c21ed92da5a76c2e9499d53a7c9d1c1f932a72d05b64dd650ca07b469a86d32f4799812ed40d1e6703261e6ca6cb8ecc766126387a829c4bb004c7b8a138a0c4b426666cbcef2fe4fdcd094115d0dc216f326a58e1ac76c1a7f137145f8ac52fcb55d38291b1b8aae7cf57d06fb67ad772b9471350b8818011027f7d1b17d0d109e02cdd088b43c2b1460ad8f24686f5a145007e64b09c279d0eded1aa72dab3e917e9c0daaa680071ac57288640f0732cf9ffe902cb905fe3d78e2db11d711eed4277d64856d9e05c5eb1d70b3a3635f67b63f4687f96d5e6975d31e419e376538a
#TRUST-RSA-SHA256 5f645f01ec7b936beb1e6454e51ee17d1d431160ead334ba4ba1fa25ede02d394140f3feecf23b5230ffe3befca1e842291bd5f5157706e038223fa2424837f56991ad7ff48bc450baebcdfa0ceb2b111c4032c31fe4fa5f7ab8efafb7eb18e4eee1ed92f847ee1afd160cc5cd09ecf55fad6636c6e255dafe7e1c0f025050710b4f84e45f2f2e405b865b942a983eee1851b140859db2dc1e428a9f68ecb187cff7926fa5acb43d72ee5099c9b5d9f4bdba4265eae213050bb6d90d040347acae453232df908e3b88e9de7b8c8c0fb328f5510af7a6243c4f07c240f35caed60cb2e1513514391812943ae47ee4c112e3a35cde6b9459e817a9087d0f1aecb6181bb29d1c9762a75f9d12bedbeaeca7c1651fa0334cd42f6e003eb08e1b1068bdf55f42eb6a11f55e8dcf6e57f57616723fccfa2e75b28c439ab82e1a31b1b2edf7f7b2a9c82ad2d0d1bb60100d3c16ab83b0ef4e71ca9341e8e623ff4875a0bcb3381fa72f15bddb2f5e3f7db6865e074a4e8131abb3a238865bd41e331a56a4019fe2b01c3096512742ca11372c8307a09d3a09b735f10aecae0f4567c9db1c4f1348c7fb6c63f5a0867964f158c49457581e8f7c42cc2c44189283eb6b1d71e5975e11b2b20c449f6ac1f23045afbdebf97ad9953576b70beef4849aeda71c2d9a960de4723ffff1fcf8c71a24c1d1d2513c09673c84ad3007be4570172e
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.1 $
# $Date: 2024/06/17 $
#
# Description   : This document implements the security configuration as recommended by the CIS IBM DB2 11 Benchmark v1.1.0
#
#<ui_metadata>
#<display_name>CIS IBM DB2 11 v1.1.0 Database Level 2</display_name>
#<spec>
#  <type>CIS</type>
#  <name>IBM DB2 11</name>
#  <profile>L2 DB</profile>
#  <version>1.1.0</version>
#  <link>https://workbench.cisecurity.org/benchmarks/10752</link>
#</spec>
#<labels>database,cis,ibm,db2</labels>
#<benchmark_refs>CCE,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#</ui_metadata>

<check_type:"IBM_DB2DB">

<custom_item>
  type        : SQL_POLICY
  description : "4.1.1 Creating the Database Without PUBLIC Grants (RESTRICTIVE)"
  info        : "This parameter indicates whether the database was created with the RESTRICTIVE clause in the CREATE DATABASE statement. When creating a database, the use of the RESTRICTIVE clause will cause certain privileges to be revoked from PUBLIC.

Rationale:

Impact:

Allowing the default privileges granted to the group PUBLIC to remain in tack can have negative impacts on the database as well as undermine measures put in place to limit access to authorized users."
  solution    : "There is no remediation for this parameter due to the fact that the placement of the RESTRICTIVE clause happens within the CREATE DATABASE statement. Unless your backup strategies allow for a complete overhaul of your environment where you are able to recreate the database with the RESTRICTIVE clause, we do not recommend changing this parameter. However, if you would like to align your database configuration to that which the RESTRICTIVE clause would provide, please ensure the following:

SYSCAT.DBAUTH - Ensure PUBLIC is NOT granted the following authorities:

CREATETAB

BINDADD

CONNECT

IMPLICIT_SCHEMA

SYSCAT.TABAUTH - Ensure PUBLIC is NOT granted the following privileges:

SELECT on all SYSCAT and SYSIBM tables

SELECT and UPDATE on all SYSSTAT tables

SELECT on the following views in schema SYSIBMADM:

ALL_*

USER_*

ROLE_*

SESSION_*

DICTIONARY

TAB

SYSCAT.ROUTINEAUTH - Ensure PUBLIC is NOT granted the following privileges:

EXECUTE with GRANT on all procedures in schema SQLJ

EXECUTE with GRANT on all functions and procedures in schema SYSFUN

EXECUTE with GRANT on all functions and procedures in schema SYSPROC

EXECUTE on all table functions in schema SYSIBM

EXECUTE on all other procedures in schema SYSIBM

SYSCAT.MODULEAUTH - Ensure PUBLIC is NOT granted the following privileges:

EXECUTE on the following modules in schema SYSIBMADM:

DBMS_DDL

DBMS_JOB

DBMS_LOB

DBMS_OUTPUT

DBMS_SQL

DBMS_STANDARD

DBMS_UTILITY

SYSCAT.PACKAGEAUTH - Ensure PUBLIC is NOT granted the following privileges:

BIND on all packages created in the NULLID schema

EXECUTE on all packages created in the NULLID schema

SYSCAT.SCHEMAAUTH - Ensure PUBLIC' is NOT granted the following privileges:

CREATEIN on schema SQLJ

CREATEIN on schema NULLID

SYSCAT.TBSPACEAUTH - Ensure PUBLIC is NOT granted the USE privilege on table space USERSPACE1.

SYSCAT.WORKLOADAUTH - Ensure PUBLIC is NOT granted the USAGE privilege on SYSDEFAULTUSERWORKLOAD.

SYSCAT.VARIABLEAUTH - Ensure PUBLIC is NOT granted the READ privilege on schema global variables in the SYSIBM schema."
  reference   : "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|2A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
  sql_request : "select value from sysibmadm.dbcfg where name = 'restrict_access'"
  sql_types   : STRING
  sql_expect  : "YES"
</custom_item>

<custom_item>
  type        : SQL_POLICY
  description : "6.4.1 Ensure Trusted Contexts are Enabled"
  info        : "A Trusted Context object provides a means of enforcing encryption, assigning privileges based on roles, and ensuring that the actions performed on behalf of a user are performed in the context of the user's ID and privileges.

Rationale:

Creating Trusted Context objects to enforce encryption and assign roles will protect data in transit and limit access to information on a per user/role basis. Additionally, it ensures actions can be traced back to the user."
  solution    : "If there is no enabled Trusted Context object, create a Trusted Context object if needed and enable it."
  reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2M,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
  sql_request : "select contextname, enabled from syscat.contexts where enabled = 'Y'"
  sql_types   : REGEX, STRING
  sql_expect  : ".+", "Y"
</custom_item>

<report type:"WARNING">
  description : "8.2.1 Encrypt the Database"
  info        : "Encrypting the database will protect your data and may be required for compliance with certain government regulations (e.g. NIST).

Rationale:

A malicious user can steal physical media like the hard drive, and restore the database and browse the data. To prevent access to the data at rest, encrypt sensitive data in a database and use an encryption key that encrypt the data. This prevents anyone without the keys from using the data.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "To determine if a database is encrypted you should check the Encrypted database database configuration parameter:

db2 => get db cfg | grep -i encrypt

Encryption Library for Backup (ENCRLIB) = libdb2encr.so
Encryption Options for Backup (ENCROPTS) = CIPHER=AES:MODE=CBC:KEY LENGTH=256
Encrypted database = YES

You should see that the encrypted database is set to YES.

You should check the type of key manger used by checking dbm configuration:

db2 => get dbm cfg | grep -i keystore

Keystore type (KEYSTORE_TYPE) = KMIP
Keystore location (KEYSTORE_LOCATION) = /path/ekeystore.cfg

You can also check the current database encryption settings:

db2 => SELECT * FROM TABLE(SYSPROC.ADMIN_GET_ENCRYPTION_INFO())

You must be connected to the database to run this command. The following information will be shown for the connected database:

OBJECT_NAME

OBJECT_TYPE

ALGORITHM

ALGORITHM_MODE

KEY_LENGTH

MASTER_KEY_LABEL KEYSTORE_NAME KEYSTORE_TYPE

KEYSTORE_HOST KEYSTORE_IP

KEYSTORE_IP_TYPE

PREVIOUS_MASTER_KEY_LABEL AUTH_ID

APPL_ID

ROTATION_TIME

This information should be filled in for an encrypted database."
  reference   : "800-171|3.5.2,800-171|3.13.16,800-53|IA-5(1),800-53|SC-28,800-53|SC-28(1),800-53r5|IA-5(1),800-53r5|SC-28,800-53r5|SC-28(1),CN-L3|8.1.4.7(b),CN-L3|8.1.4.8(b),CSCv7|14.8,CSCv8|3.11,CSF|PR.AC-1,CSF|PR.DS-1,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(d),HIPAA|164.312(e)(2)(ii),ITSG-33|IA-5(1),ITSG-33|SC-28,ITSG-33|SC-28a.,ITSG-33|SC-28(1),LEVEL|2M,NESA|T5.2.3,PCI-DSSv3.2.1|3.4,PCI-DSSv4.0|3.3.2,PCI-DSSv4.0|3.5.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1,TBA-FIISB|28.1"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

<report type:"WARNING">
  description : "8.2.2 Do Not Use Encryption Algorithms that are Not Secure"
  info        : "Encryption can be performed with various algorithms, some of which are outdated and should no longer be used.

Rationale:

Using an outdated algorithm can leave the data vulnerable. As new methods of attack are created and hardware processing speeds increase, the encryption algorithms can become vulnerable. Thus, only current encryption algorithms should be used. 3DES is an outdated encryption algorithm and should not be used.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "To determine what encryption options used to encrypt the database you can run the following command:

db2 => get db cfg | grep -i encrypt

Encryption Library for Backup (ENCRLIB) = libdb2encr.so
Encryption Options for Backup (ENCROPTS) = CIPHER=AES:MODE=CBC:KEY LENGTH=256
Encrypted database = YES

ENCROPS should not contain CIPHER=3DES algorithm, because 3DES is not secure. CIPHER=AES is secure.

You can also check the current database encryption settings:

db2 => SELECT * FROM TABLE(SYSPROC.ADMIN_GET_ENCRYPTION_INFO())

You must be connected to the database to run this command. From the information retrieved, the ALGORITHM should not be 3DES."
  reference   : "800-53|SA-15,800-53r5|SA-15,CSCv7|18.5,CSCv8|16.11,CSF|PR.IP-2,GDPR|32.1.b,HIPAA|164.306(a)(1),LEVEL|2M,NIAv2|SS5,NIAv2|SS6a,QCSC-v1|4.2"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

<report type:"WARNING">
  description : "8.2.3 Secure the Configuration File"
  info        : "A configuration file, ekeystore.cfg, is created by the user in order to configure external keymanager functionality. This file should be secured against tampering via OS permissions.

Rationale:

Set this file to be readable and writeable by only the Db2 instance owner. If this file is not secured, an attacker may delete it, causing potential interruption of operations.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Change the permissions for the file:

$ chmod 600 ekeystore.cfg"
  reference   : "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|2A,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

<report type:"WARNING">
  description : "8.2.4 Secure the Stash File"
  info        : "A stash file is an obfuscated file that contains the credentials that are needed to access the keystore. If a keystore password was not provided during db2start, the password will be retrieved from the stash file.

A stash file is created when -stash command is used during the creation of the keystore.

Rationale:

Set this file to be readable by only the Db2 instance owner. If this file is not secured, an attacker may delete it, causing potential interruption of operations.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Change the permissions for the file:

$ chmod 600 keystore.sth"
  reference   : "800-171|3.1.1,800-171|3.1.4,800-171|3.1.5,800-171|3.8.1,800-171|3.8.2,800-171|3.8.3,800-53|AC-3,800-53|AC-5,800-53|AC-6,800-53|MP-2,800-53r5|AC-3,800-53r5|AC-5,800-53r5|AC-6,800-53r5|MP-2,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|3.3,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-2,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.6.1.2,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,ITSG-33|AC-5,ITSG-33|AC-6,ITSG-33|MP-2,ITSG-33|MP-2a.,LEVEL|2M,NESA|T1.3.2,NESA|T1.3.3,NESA|T1.4.1,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,NIAv2|SS29,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

<report type:"WARNING">
  description : "8.2.5 Backup the Stash File"
  info        : "A stash file is an obfuscated file that contains the credentials that are needed to access the keystore. If a keystore password was not provided during db2start, the password will be retrieved from the stash file.

A stash file is created when -stash command is used during the creation of the keystore.

Rationale:

Backup the stash file. If access to the stash file is lost, and it can not be re-created because knowledge of the password has been lost, then you will not have access to the keystore file. This may result in the inability to decrypt the database or backup files.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Backup the stash file to a safe location."
  reference   : "800-171|3.8.9,800-53|CP-9,800-53|CP-10,800-53r5|CP-9,800-53r5|CP-10,CSCv7|10.2,CSCv8|11.2,CSF|PR.IP-4,CSF|RC.RP-1,CSF|RS.RP-1,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(ii),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|2M,NESA|M5.2.3,NESA|T2.2.4,QCSC-v1|5.2.3,QCSC-v1|10.2.1,QCSC-v1|11.2"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

<report type:"WARNING">
  description : "8.2.6 Create a Strong Password"
  info        : "When creating or changing passwords for local keystone files, ensure that the passwords are strong, by using the -strong parameter of the gsk8capicmd_64 command.

Rationale:

A stronger password prevents unauthorized access to the database.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Use the -strong parameter on the gsk8capicmd_64 command:

$ gsk8capicmd_64 -keydb -create -dbmykeystore.p12
     -pw <yourpasswordhere> -strong -stash"
  reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv7|4.4,CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|2M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

<report type:"WARNING">
  description : "8.2.7 Backup Your Keystore"
  info        : "The keystore stores encryption keys used to encrypt your database. Losing the key will make the data inaccessible. If the keystore with encryption keys is lost, there is no way to decrypt the data.

Rationale:

The contents of your keystore are critical and it is important that you back up the keystore at regular intervals. Backups should be done whenever the contents of the keystore changes, such as when a key or certificate is added, a master key (MK) is rotated, or the password is changed.

For local keystore files, the configuration file is not included as part of a Db2 database backup and must be backed up manually.

For a centralized keystore, consult the documentation for your keystore product to understand their recommendations for keystore backups.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Regularly backup your keystore and stash files, using mechanisms outside of Db2."
  reference   : "800-171|3.8.9,800-53|CP-9,800-53|CP-10,800-53r5|CP-9,800-53r5|CP-10,CSCv7|10.2,CSCv8|11.2,CSF|PR.IP-4,CSF|RC.RP-1,CSF|RS.RP-1,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(ii),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|2M,NESA|M5.2.3,NESA|T2.2.4,QCSC-v1|5.2.3,QCSC-v1|10.2.1,QCSC-v1|11.2"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

<report type:"WARNING">
  description : "8.2.8 Backup Your Password In Case Stash File is Inaccessible or Corrupted"
  info        : "If the keystore is inaccessible, there is no way to decrypt the data in the database. Therefore, protecting and backing up the password to the keystore is important to avoid data loss.

Rationale:

Ensure that you back up your passwords, in addition to using a stash file. This applies particularly to the password used for a local keystore file. Should your stash file ever become corrupted, you will need to manually supply the password. If you forget the password, and do not created a backup, access to your keys and data is lost.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "You may use a password manager to store the password in a secure manner."
  reference   : "800-171|3.8.9,800-53|CP-9,800-53r5|CP-9,CSF|PR.IP-4,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,LEVEL|2M,NESA|M5.2.3,NESA|T2.2.4"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

<custom_item>
  type        : SQL_POLICY
  description : "8.2.9 Rotate the Master Key"
  info        : "Key rotation refers to the process of changing encryption keys and is often required for compliance purposes. Similar to a password change, key rotation is done to reduce the risk that can come from exposure of the key, while it exists. Since the DEK used by Db2 for encryption is never outside of the encrypted database, backup, or transaction log, there is little risk of exposure. The same is not true for the MK, which lives outside of the database.

The rotation of the MK does not affect the encryption of the DEK within existing backups or archived transaction logs.

The master key (MK) should be rotated based on the frequency needed for compliance. Rotating MK requires decrypting any DEK encrypted with the old MK and then re-encrypting it with the new MK. The data is encrypted with a DEK and does not get re-encrypted.

Rationale:

Consider rotating the MK as being similar to changing passwords every X number of days. You may also have external requirements to rotate the MK after a certain period of time.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "The SYSPROC.ADMIN_ROTATE_MASTER_KEY procedure can be used to change the database key to comply with key rotation requirement. You must be connected to the database to run this command.

db2 => CALL SYSPROC.ADMIN_ROTATE_MASTER_KEY('newMasterKeyLabel')

Db2 will automatically generate the new MK and label unless you provide a MK label for an existing MK. Key rotation is logged in the db2diag.log file:

$ grep -A 3 'Key Rotation' ~/sqllib/db2dump/db2diag.log
Key Rotation successful using label:
DATA #2 : String, 46 bytes
DB2_SYSGEN_db2inst1_SECRET_2021-04-29-11.22.01

The DEK is not externalized and does not need to be rotated. However, if you wish to rotate the DEK you can take an offline backup and restore to a new encrypted database, thus generating a new DEK."
  reference   : "800-171|3.5.2,800-53|IA-5(1),800-53r5|IA-5(1),CSCv7|4.4,CSCv8|5.2,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(1),LEVEL|2M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
  sql_request : "SELECT * FROM TABLE(SYSPROC.ADMIN_GET_ENCRYPTION_INFO())"
  sql_types   : STRING
  sql_expect  : ""
  severity    : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "8.2.10 Turn Off ALLOW_KEY_INSERT_WITHOUT_KEYSTORE_BACKUP"
  info        : "The ALLOW_KEY_INSERT_WITHOUT_KEYSTORE_BACKUP setting in ekeystore.cfg file for external key managers (KMIP or PKCS11) allows writing to the keystore. The setting is false by default. Check that the setting has not been turned on.

Rationale:

Keeping the setting as false does not allow Db2 to create master keys. If you choose to turn the setting on, you acknowledge that Db2 does not backup changes to the keystore. Always backup your keystore before making changes.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "$ cat ekeystore.cfg

VERSION=1
PRODUCT_NAME=Luna
ALLOW_KEY_INSERT_WITHOUT_KEYSTORE_BACKUP=false
LIBRARY=/usr/safenet/lunaclient/luna6.1/lib/libCryptoki2_64.so
SLOT_LABEL=DB2Partition
NEW_OBJECT_TYPE=PRIVATE
KEYSTORE_STASH=/home/db2inst1/sqllib/security/pkcs11.sth

For maximum security, turn the setting off and create the keys outside of Db2. This way you will also be able to manage the labeling scheme across the Db2 instances and prevent name collision between different databases."
  reference   : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

<report type:"WARNING">
  description : "8.2.11 Keep Master Key Labels Unique"
  info        : "Db2 uses the MK label to uniquely identify each MK, and stores the label value in each encrypted object, be it a database, transaction log, or backup file. This stored MK label value identifies the MK key material that is used to decrypt the data in the object. Creating MK labels is part of an organizations standard operating procedures (SOP).

Rationale:

It is critical to use unique MK labels across the organization to avoid duplication. If unique labels are not used, access to encrypted data can be lost through human error. Access to encrypted data is lost when the key that is retrieved from the keystore for a label is different from the key that was used to encrypt the database using the same label.

It may not be possible to migrate databases using a local keystore file to a centralized keystore file if multiple databases are using the same master key label, but different master keys associated with that label.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Update the SOP to provide guidance found missing during the audit."
  reference   : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

<report type:"WARNING">
  description : "8.2.12 Retain All Master Keys"
  info        : "Master keys are needed to access the DEKs that are stored in encrypted databases, transaction logs, and backup images. Since multiple MKs can exist over the life time of these objects, it is necessary to retain them all while the encrypted data is retained. If a MK is lost, the encrypted data in the object cannot be retrieved. An organizations standard operating procedures (SOP) should have a methodology for tracking what data is encrypted with a specific master key, and be consulted before any master keys are archived.

Rationale:

Any failure or human error in tracking what data encrypted with a specific master key could result in loss of access to that data should the master key be deleted. Master keys should not be deleted. Instead they should be archived to a secure location for long term storage in case they are required at some point in the future.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Update the SOP to provide guidance found missing during the audit."
  reference   : "800-171|3.8.9,800-53|CP-9,800-53|CP-10,800-53r5|CP-9,800-53r5|CP-10,CSCv7|10.2,CSCv8|11.2,CSF|PR.IP-4,CSF|RC.RP-1,CSF|RS.RP-1,GDPR|32.1.b,GDPR|32.1.c,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(ii),ISO/IEC-27001|A.12.3.1,ITSG-33|CP-9,ITSG-33|CP-10,ITSG-33|CP-10a.,LEVEL|2M,NESA|M5.2.3,NESA|T2.2.4,QCSC-v1|5.2.3,QCSC-v1|10.2.1,QCSC-v1|11.2"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

<report type:"WARNING">
  description : "8.2.13 Set CFG Values in a Single Command"
  info        : "Db2 uses KEYSTORE_TYPE and KEYSTORE_LOCATION to access the keystore.

Rationale:

Although the Db2 database manager configuration parameters KEYSTORE_TYPE and KEYSTORE_LOCATION are configurable online, you should set them in the a single DB2 UPDATE DBM CFG command. Otherwise, Db2 might attempt to access the keystore between the updates and report an access error.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "You can execute the following command to change the values in one line:

db2 => update dbm cfg using keystore_type pkcs12
       keystore_location /path/to/file.p12;

DB20000I The UPDATE DATABASE MANAGER CONFIGURATION command completed
successfully."
  reference   : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

<report type:"WARNING">
  description : "8.2.14 Key Rotation in HADR Environment"
  info        : "Some additional considerations are needed when working in an HADR environment.

A key rotation on the primary database in an HADR environment drives a key rotation automatically on the standby. The change, however, does not occur until other log records are sent to the standby database. If you want to force the rotated key to the standby, the archive log command can be used to generate the log records that are needed to replay the rotation on the standby.

Rationale:

When the MK is rotated, the database begins to use the new key immediately, but access to the old MK value is still needed in the following scenarios:

Transaction log files that have not been reused since the key rotation

Archived encrypted transaction log files that used the previous MK value

Encrypted backup images that used the previous MK value

Do not delete an MK from the keystore unless you are certain it is no longer referenced by any encrypted object on any of the hosts of the HADR environment.

When using a local keystore file, you need to provide an identical copy of the keystore at each Db2 member that is associated with the database. If you choose to use a shared file system, ensure that network access is maintained for that file system while Db2 is actively working with the encrypted database. In an HADR setup, you should copy the keystore containing the encryption keys between the hosts.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Retain all Master Keys until you are certain they are not use on any of the hosts in an HADR environment.

The same DEK and master key is used on all members in a DPF or pureScale deployment and each member requires access to the keystore to access master keys, which can be a shared file."
  reference   : "800-171|3.4.2,800-53|CM-6b.,800-53r5|CM-6b.,CN-L3|8.1.10.6(d),CSF|PR.IP-1,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6b.,LEVEL|2M,NESA|T3.2.1,SWIFT-CSCv1|2.3"
  see_also    : "https://workbench.cisecurity.org/benchmarks/10752"
</report>

</check_type>
