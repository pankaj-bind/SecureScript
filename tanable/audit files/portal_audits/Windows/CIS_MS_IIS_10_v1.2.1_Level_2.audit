#TRUSTED 7ffa64e8540f7522f7468081d2921095a6d4cfce8012013a88140eeb328377cca26f02994861e69eac3ab8705e83abfa5b44f8ce9c51966d03f5c511514181628a0ef6c8f3829b9a53f8fbd06f56f21254f1e13f4785aa83294bd9d51b1db3efffaad8093e86d6a34a5423c8cb3a6bfd3321c505c33feab5c7075c59fce549d6b483551ec1f9fad54d84c1c75769ddbd14812790c3b839e1460e992bb3a6e670e5b46e38bdc2fe9f75ac89cf70de96a14657775b0c7ee62dcd95708d442f1c5078c0a7ffbd682a50ac603d3d183ce42b5a38671392ea81fad651381815159616fe01dd0257331d79d93e41ae990ae735f9f8d35f311929d3102dfbee22a1f1110c50b73179b757bc95319be43f96f87b553a59d63d5cb4ed79fbf40baaad9919a98fcc8ca2c814bb7075904366cb5d187125eeb6c9757841de54a3bd7bb7befcabe78dccaf6de04fd268810519c92a4a8844b4409fd4ae4e5aeb5ac5038f660b743b760a1b07f4235e7eef8a560263046bcfa2d6a81183fb8391b5e4117955e74b46598eda4d3f821efb855ba1cffcc9431abddbe17daa9c0812f4d08761fbd34890d5bb482259b78552ac1cf056215de052fb1ec6cde64591b5fccffcd0a3688fb3c4c2f9d98c5e280eb03a8e87489b0ad601dc7ae5740585b9a681b37ba5051ba90e21f1c055d329ffae64bd1f2e87670b86b3c0a2e38961fd869063724b4f
#TRUST-RSA-SHA256 49baf4853f3a49b9440c111ff14fd5479ed2b44c140389960a02079a4d2d35db26bee2b83c0bace9a3b5105fe600809691cf52f8cbae43acfaca418a50e26c91efbd08c41251ae1e1c56307cc953c4581e393695e8a9426f7dba2422cf7bd9e300a0fda76d5ff38718d6d3b004dc1b2ffea271aae1d0549e974aa255400b5c9d198355c2109fd0591c1acb4b63fd704fb00344b4556d9883d370e2674f723195823550eebd40ab2f7bf3d9b934916641794a2ae2adaadaef52ac8cfd362b7dfaea919c3ee83e9133b66e366468c518e5117c076ecf8b5f47fc87e52525f7ee67f478507de279549285aa1abaa8cdb0bd6fad2d991bbbe5c5f7caa6dea0c1a923172924e10ebdf0507202a546e3f97ccd78a6bfb75c23655c68a41d6af5853ccf3a88f40d13436a3037575b338056269e73d0867ecec11d972ba2de164857fce29aad97ca40e6cc842b4d02f5ffab1db866e77bfca6a3f3525a43677fff3c1cd10c5cd2651de4a7c59231272132276fc806a0fc7d8871d51c5fd1fc8cbf065d49054f20b103fc9690774d1c1b6eb488e80e44275d07189aa83e733e1e2f4d77d91320182feb552592ca2eee9c64c049b5e9f82731d92e884a14a162056f1b3d722102e233aed003f2223eeb36cb0854f237190c6042872fa3d7d573d0bf2953d04c3e938c44e8eda98012abe645425318d787db519050c51b39565e825ad1e98a
#
# This script is Copyright (C) 2004-2025 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.4 $
# $Date: 2025/01/06 $
#
# Description	: This .audit is designed to query targets against the CIS Microsoft IIS 10 Benchmark.
#
#<ui_metadata>
#<display_name>CIS IIS 10 v1.2.1 Level 2</display_name>
#<spec>
#  <type>CIS</type>
#  <name>IIS 10</name>
#  <profile>L2</profile>
#  <version>1.2.1</version>
#  <link>https://workbench.cisecurity.org/benchmarks/13949</link>
#</spec>
#<labels>cis,windows_iis_10,agent</labels>
#<benchmark_refs>CCE,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>PLATFORM_VERSION</name>
#    <default>(10|20[12][269])</default>
#    <description>Windows Platform Version</description>
#    <info>Windows Platform Version</info>
#    <value_type>STRING</value_type>
#  </variable>
#  <variable>
#    <name>PRODUCT_VERSION</name>
#    <default>10\.0</default>
#    <description>IIS Product Version</description>
#    <info>IIS Product Version</info>
#    <value_type>STRING</value_type>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Windows" version:"2">
<group_policy:"CIS Microsoft IIS 10 Benchmark">

<if>
  <condition type:"AND">
    <custom_item>
      type        : REGISTRY_SETTING
      description : "Verify IIS is installed."
      value_type  : POLICY_TEXT
      value_data  : "(internet|iis)"
      reg_key     : "HKLM\SYSTEM\CurrentControlSet\Services\W3SVC"
      reg_item    : "ImagePath"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "Verify IIS 10 installed."
      value_type  : POLICY_TEXT
      value_data  : "^Version @PRODUCT_VERSION@[\s]*$"
      reg_key     : "HKLM\Software\Microsoft\Inetstp"
      reg_item    : "VersionString"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : REGISTRY_SETTING
      description : "Windows Server 2016/2019/2022 and Windows 10"
      value_type  : POLICY_TEXT
      value_data  : "^[a-zA-Z0-9\(\)\s]*@PLATFORM_VERSION@[a-zA-Z0-9\(\)\s]*$"
      reg_key     : "HKLM\Software\Microsoft\Windows Nt\Currentversion"
      reg_item    : "ProductName"
      check_type  : CHECK_REGEX
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_MS_IIS_10_v1.2.1_Level_2.audit from CIS Microsoft IIS 10 Benchmark v1.2.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
    </report>

    <if>
      <condition type:"OR">
        <custom_item>
          type        : REGISTRY_SETTING
          description : "Verify .net extensibility is installed - NetFxExtensibility45"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\Software\Microsoft\Inetstp\Components"
          reg_item    : "NetFxExtensibility45"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>

        <custom_item>
          type        : REGISTRY_SETTING
          description : "Verify .net extensibility is installed - ASPNET45"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\Software\Microsoft\Inetstp\Components"
          reg_item    : "ASPNET45"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "2.4 Ensure 'forms authentication' is set to use cookies - Default"
          info        : "Forms Authentication can be configured to maintain the site visitor's session identifier in either a URI or cookie. It is recommended that Forms Authentication be set to use cookies.

Rationale:

Using cookies to manage session state may help mitigate the risk of session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL. Moving session information identifiers into the URL may cause session IDs to show up in proxy logs, browsing history, and be accessible to client scripting via document.location.

Impact:

Site visitor's session identifier will be stored via cookies."
          solution    : "Open IIS Manager and navigate to the level where Forms Authentication is enabled

In Features View, double-click Authentication

On the Authentication page, select Forms Authentication

In the Actions pane, click Edit

In the Cookie settings section, select Use cookies from the Mode dropdown

OR

Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd set config  -section:system.web/authentication /forms.cookieless:'UseCookies'

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'cookieless' -value 'UseCookies'

Default Value:

The default setting for Cookie Mode is Auto Detect which will only use cookies if the device profile supports cookies."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
          value_type  : POLICY_TEXT
          value_data  : "UseCookies"
          appcmd_args : "list config /section:system.web/authentication /text:forms.cookieless"
        </custom_item>

        <custom_item>
          type                : AUDIT_IIS_APPCMD
          description         : "2.4 Ensure 'forms authentication' is set to use cookies - Application"
          info                : "Forms Authentication can be configured to maintain the site visitor's session identifier in either a URI or cookie. It is recommended that Forms Authentication be set to use cookies.

Rationale:

Using cookies to manage session state may help mitigate the risk of session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL. Moving session information identifiers into the URL may cause session IDs to show up in proxy logs, browsing history, and be accessible to client scripting via document.location.

Impact:

Site visitor's session identifier will be stored via cookies."
          solution            : "Open IIS Manager and navigate to the level where Forms Authentication is enabled

In Features View, double-click Authentication

On the Authentication page, select Forms Authentication

In the Actions pane, click Edit

In the Cookie settings section, select Use cookies from the Mode dropdown

OR

Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd set config  -section:system.web/authentication /forms.cookieless:'UseCookies'

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'cookieless' -value 'UseCookies'

Default Value:

The default setting for Cookie Mode is Auto Detect which will only use cookies if the device profile supports cookies."
          reference           : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also            : "https://workbench.cisecurity.org/benchmarks/13949"
          value_type          : POLICY_TEXT
          value_data          : "UseCookies"
          appcmd_args         : "list config {} /section:system.web/authentication /text:forms.cookieless"
          appcmd_filter       : "list config {} /section:system.web/authentication /text:mode"
          appcmd_filter_value : "Forms"
          appcmd_list         : "list apps"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "2.4 Ensure 'forms authentication' is set to use cookies - Default"
          info        : "Forms Authentication can be configured to maintain the site visitor's session identifier in either a URI or cookie. It is recommended that Forms Authentication be set to use cookies.

Rationale:

Using cookies to manage session state may help mitigate the risk of session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL. Moving session information identifiers into the URL may cause session IDs to show up in proxy logs, browsing history, and be accessible to client scripting via document.location.

Impact:

Site visitor's session identifier will be stored via cookies."
          solution    : "Open IIS Manager and navigate to the level where Forms Authentication is enabled

In Features View, double-click Authentication

On the Authentication page, select Forms Authentication

In the Actions pane, click Edit

In the Cookie settings section, select Use cookies from the Mode dropdown

OR

Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd set config  -section:system.web/authentication /forms.cookieless:'UseCookies'

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'cookieless' -value 'UseCookies'

Default Value:

The default setting for Cookie Mode is Auto Detect which will only use cookies if the device profile supports cookies."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
        </report>

        <report type:"PASSED">
          description : "2.4 Ensure 'forms authentication' is set to use cookies - Application"
          info        : "Forms Authentication can be configured to maintain the site visitor's session identifier in either a URI or cookie. It is recommended that Forms Authentication be set to use cookies.

Rationale:

Using cookies to manage session state may help mitigate the risk of session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL. Moving session information identifiers into the URL may cause session IDs to show up in proxy logs, browsing history, and be accessible to client scripting via document.location.

Impact:

Site visitor's session identifier will be stored via cookies."
          solution    : "Open IIS Manager and navigate to the level where Forms Authentication is enabled

In Features View, double-click Authentication

On the Authentication page, select Forms Authentication

In the Actions pane, click Edit

In the Cookie settings section, select Use cookies from the Mode dropdown

OR

Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd set config  -section:system.web/authentication /forms.cookieless:'UseCookies'

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'cookieless' -value 'UseCookies'

Default Value:

The default setting for Cookie Mode is Auto Detect which will only use cookies if the device profile supports cookies."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
        </report>
      </else>
    </if>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "2.8 Ensure 'credentials' are not stored in configuration files - Default"
      info        : "The <credentials> element of the <authentication> element allows optional definitions of name and password for IIS Manager User accounts within the configuration file. Forms based authentication also uses these elements to define the users. IIS Manager Users can use the administration interface to connect to sites and applications in which they've been granted authorization.

Note: The <credentials> element only applies when the default provider, ConfigurationAuthenticationProvider, is configured as the authentication provider.

It is recommended to avoid storing passwords in the configuration file even in form of hash.

Rationale:

Authentication credentials should always be protected to reduce the risk of stolen authentication credentials. For security reasons, it is recommended that user credentials not be stored an any IIS configuration files.

Impact:

Passwords in the configuration file will be stored in form of a hash."
      solution    : "Authentication mode is configurable at the machine.config, root-level web.config, or application-level web.config:

Locate and open the configuration file where the credentials are stored

Find the <credentials> element

If present, remove the section

This will remove all references to stored users in the configuration files.

OR

Enter the following command in PowerShell to configure:

Remove-WebConfigurationProperty  -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/authentication/forms/credentials' -name '.'"
      reference   : "800-171|3.5.2,800-53|IA-5,800-53|IA-5(1),800-53r5|IA-5,800-53r5|IA-5(1),CSCv7|16.4,CSF|PR.AC-1,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,ITSG-33|IA-5(1),LEVEL|2A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : ".*user.*"
      appcmd_args : "list config /section:system.web/authentication"
      check_type  : CHECK_NOT_REGEX
    </custom_item>

    <custom_item>
      type                : AUDIT_IIS_APPCMD
      description         : "2.8 Ensure 'credentials' are not stored in configuration files - Applications"
      info                : "The <credentials> element of the <authentication> element allows optional definitions of name and password for IIS Manager User accounts within the configuration file. Forms based authentication also uses these elements to define the users. IIS Manager Users can use the administration interface to connect to sites and applications in which they've been granted authorization.

Note: The <credentials> element only applies when the default provider, ConfigurationAuthenticationProvider, is configured as the authentication provider.

It is recommended to avoid storing passwords in the configuration file even in form of hash.

Rationale:

Authentication credentials should always be protected to reduce the risk of stolen authentication credentials. For security reasons, it is recommended that user credentials not be stored an any IIS configuration files.

Impact:

Passwords in the configuration file will be stored in form of a hash."
      solution            : "Authentication mode is configurable at the machine.config, root-level web.config, or application-level web.config:

Locate and open the configuration file where the credentials are stored

Find the <credentials> element

If present, remove the section

This will remove all references to stored users in the configuration files.

OR

Enter the following command in PowerShell to configure:

Remove-WebConfigurationProperty  -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/authentication/forms/credentials' -name '.'"
      reference           : "800-171|3.5.2,800-53|IA-5,800-53|IA-5(1),800-53r5|IA-5,800-53r5|IA-5(1),CSCv7|16.4,CSF|PR.AC-1,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,ITSG-33|IA-5(1),LEVEL|2A,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also            : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type          : POLICY_TEXT
      value_data          : ".*user.*"
      appcmd_args         : "list config /section:system.web/authentication"
      appcmd_filter       : "list config {} /section:system.web/authentication /text:mode"
      appcmd_filter_value : "Forms"
      appcmd_list         : "list apps"
      check_type          : CHECK_NOT_REGEX
    </custom_item>

    <if>
      <condition type:"OR">
        <custom_item>
          type        : REGISTRY_SETTING
          description : "Verify .net extensibility is installed - ASPNET45"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\Software\Microsoft\Inetstp\Components"
          reg_item    : "ASPNET45"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>

        <custom_item>
          type        : REGISTRY_SETTING
          description : "Verify .net extensibility is installed - NetFxExtensibility45"
          value_type  : POLICY_DWORD
          value_data  : 1
          reg_key     : "HKLM\Software\Microsoft\Inetstp\Components"
          reg_item    : "NetFxExtensibility45"
          reg_option  : CAN_NOT_BE_NULL
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.2 Ensure 'debug' is turned off - Default"
          info        : "Developers often enable the debug mode during active ASP.NET development so that they do not have to continually clear their browsers cache every time they make a change to a resource handler. The problem would arise from this being left 'on' or set to 'true'. Compilation debug output is displayed to the end user, allowing malicious persons to obtain detailed information about applications.

This is a defense in depth recommendation due to the <deployment retail='true' /> in the machine.config configuration file overriding any debug settings.

It is recommended that debugging still be turned off.

Rationale:

Setting <compilation debug> to false ensures that detailed error information does not inadvertently display during live application usage, mitigating the risk of application information leakage falling into unscrupulous hands.

Impact:

Debugging will be disabled."
          solution    : "To use the UI to make this change:

Open IIS Manager and navigate desired server, site, or application

In Features View, double-click .NET Compilation

On the .NET Compilation page, in the Behavior section, ensure the Debug field is set to False

When finished, click Apply in the Actions pane

Note: The <compilation debug> switch will not be present in the web.config file unless it has been added manually, or has previously been configured using the IIS Manager GUI.

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/compilation' -name 'debug' -value 'False'

Default Value:

The compilation of debug binaries is not enabled by default."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
          value_type  : POLICY_TEXT
          value_data  : "false"
          appcmd_args : "list config /section:system.web/compilation /text:debug"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.2 Ensure 'debug' is turned off - Applications"
          info        : "Developers often enable the debug mode during active ASP.NET development so that they do not have to continually clear their browsers cache every time they make a change to a resource handler. The problem would arise from this being left 'on' or set to 'true'. Compilation debug output is displayed to the end user, allowing malicious persons to obtain detailed information about applications.

This is a defense in depth recommendation due to the <deployment retail='true' /> in the machine.config configuration file overriding any debug settings.

It is recommended that debugging still be turned off.

Rationale:

Setting <compilation debug> to false ensures that detailed error information does not inadvertently display during live application usage, mitigating the risk of application information leakage falling into unscrupulous hands.

Impact:

Debugging will be disabled."
          solution    : "To use the UI to make this change:

Open IIS Manager and navigate desired server, site, or application

In Features View, double-click .NET Compilation

On the .NET Compilation page, in the Behavior section, ensure the Debug field is set to False

When finished, click Apply in the Actions pane

Note: The <compilation debug> switch will not be present in the web.config file unless it has been added manually, or has previously been configured using the IIS Manager GUI.

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/compilation' -name 'debug' -value 'False'

Default Value:

The compilation of debug binaries is not enabled by default."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
          value_type  : POLICY_TEXT
          value_data  : "false"
          appcmd_args : "list config {} /section:system.web/compilation /text:debug"
          appcmd_list : "list apps"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.3 Ensure custom error messages are not off - Default"
          info        : "When an ASP.NET application fails and causes an HTTP/1.x 500 Internal Server Error, or a feature configuration (such as Request Filtering) prevents a page from being displayed, an error message will be generated. Administrators can choose whether or not the application should display a friendly message to the client, detailed error message to the client, or detailed error message to localhost only. The <customErrors> tag in the web.config has three modes:

On: Specifies that custom errors are enabled. If no defaultRedirect attribute is specified, users see a generic error. The custom errors are shown to the remote clients and to the local host

Off: Specifies that custom errors are disabled. The detailed ASP.NET errors are shown to the remote clients and to the local host

RemoteOnly: Specifies that custom errors are shown only to the remote clients, and that ASP.NET errors are shown to the local host. This is the default value

This is a defense in depth recommendation due to the <deployment retail='true' /> in the machine.config file overriding any settings for customErrors to be turned Off.

It is recommended that customErrors still be turned to On or RemoteOnly.

Rationale:

customErrors can be set to On or RemoteOnly without leaking detailed application information to the client. Ensuring that customErrors is not set to Off will help mitigate the risk of malicious persons learning detailed application error and server configuration information.

Impact:

N/A"
          solution    : "customErrors may be set for a server, site, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the customErrors mode to RemoteOnly or On for a Web Site in the IIS Manager GUI:

Open the IIS Manager GUI and navigate to the site to be configured

In Features View, find and double-click .NET Error Pages icon

In the Actions Pane, click Edit Feature Settings

In modal dialog, choose On or Remote Only for Mode settings

Click OK

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/customErrors' -name 'mode' -value 'RemoteOnly'

Default Value:

The default value is <customErrors mode= 'RemoteOnly' />."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
          value_type  : POLICY_TEXT
          value_data  : "RemoteOnly" || "On"
          appcmd_args : "list config /section:system.web/customErrors /text:mode"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.3 Ensure custom error messages are not off - Applications"
          info        : "When an ASP.NET application fails and causes an HTTP/1.x 500 Internal Server Error, or a feature configuration (such as Request Filtering) prevents a page from being displayed, an error message will be generated. Administrators can choose whether or not the application should display a friendly message to the client, detailed error message to the client, or detailed error message to localhost only. The <customErrors> tag in the web.config has three modes:

On: Specifies that custom errors are enabled. If no defaultRedirect attribute is specified, users see a generic error. The custom errors are shown to the remote clients and to the local host

Off: Specifies that custom errors are disabled. The detailed ASP.NET errors are shown to the remote clients and to the local host

RemoteOnly: Specifies that custom errors are shown only to the remote clients, and that ASP.NET errors are shown to the local host. This is the default value

This is a defense in depth recommendation due to the <deployment retail='true' /> in the machine.config file overriding any settings for customErrors to be turned Off.

It is recommended that customErrors still be turned to On or RemoteOnly.

Rationale:

customErrors can be set to On or RemoteOnly without leaking detailed application information to the client. Ensuring that customErrors is not set to Off will help mitigate the risk of malicious persons learning detailed application error and server configuration information.

Impact:

N/A"
          solution    : "customErrors may be set for a server, site, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the customErrors mode to RemoteOnly or On for a Web Site in the IIS Manager GUI:

Open the IIS Manager GUI and navigate to the site to be configured

In Features View, find and double-click .NET Error Pages icon

In the Actions Pane, click Edit Feature Settings

In modal dialog, choose On or Remote Only for Mode settings

Click OK

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/customErrors' -name 'mode' -value 'RemoteOnly'

Default Value:

The default value is <customErrors mode= 'RemoteOnly' />."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
          value_type  : POLICY_TEXT
          value_data  : "RemoteOnly" || "On"
          appcmd_args : "list config {} /section:system.web/customErrors /text:mode"
          appcmd_list : "list apps"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.5 Ensure ASP.NET stack tracing is not enabled - Default"
          info        : "The trace element configures the ASP.NET code tracing service that controls how trace results are gathered, stored, and displayed. When tracing is enabled, each page request generates trace messages that can be appended to the page output or stored in an application trace log.

This is a defense in depth recommendation due to the <deployment retail='true' /> in the machine.config file overriding any settings for ASP.NET stack tracing that are left on.

It is recommended that ASP.NET stack tracing still be turned off.

Rationale:

In an active Web Site, tracing should not be enabled because it can display sensitive configuration and detailed stack trace information to anyone who views the pages in the site.

If necessary, the localOnly attribute can be set to true to have trace information displayed only for localhost requests. Ensuring that ASP.NET stack tracing is not on will help mitigate the risk of malicious persons learning detailed stack trace information.

Impact:

ASP.NET stack tracing still be turned off and sensitive configuration and detailed stack trace information will not be viewable to anyone who views the pages in the site."
          solution    : "Ensure <deployment retail='true' /> is enabled in the machine.config.

Remove all attribute references to ASP.NET tracing by deleting the trace and trace enable attributes.

Per Page:

Remove any references to:

Trace='true'

Per Application:

<configuration>
  <system.web>
     <trace enabled='true'>
  </system.web>
</configuration>

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/trace' -name 'enabled' -value 'False'

Default Value:

The default value for ASP.NET tracing is off."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
          value_type  : POLICY_TEXT
          value_data  : "false"
          appcmd_args : "list config /section:system.web/trace /text:enabled"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.5 Ensure ASP.NET stack tracing is not enabled - Applications"
          info        : "The trace element configures the ASP.NET code tracing service that controls how trace results are gathered, stored, and displayed. When tracing is enabled, each page request generates trace messages that can be appended to the page output or stored in an application trace log.

This is a defense in depth recommendation due to the <deployment retail='true' /> in the machine.config file overriding any settings for ASP.NET stack tracing that are left on.

It is recommended that ASP.NET stack tracing still be turned off.

Rationale:

In an active Web Site, tracing should not be enabled because it can display sensitive configuration and detailed stack trace information to anyone who views the pages in the site.

If necessary, the localOnly attribute can be set to true to have trace information displayed only for localhost requests. Ensuring that ASP.NET stack tracing is not on will help mitigate the risk of malicious persons learning detailed stack trace information.

Impact:

ASP.NET stack tracing still be turned off and sensitive configuration and detailed stack trace information will not be viewable to anyone who views the pages in the site."
          solution    : "Ensure <deployment retail='true' /> is enabled in the machine.config.

Remove all attribute references to ASP.NET tracing by deleting the trace and trace enable attributes.

Per Page:

Remove any references to:

Trace='true'

Per Application:

<configuration>
  <system.web>
     <trace enabled='true'>
  </system.web>
</configuration>

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/trace' -name 'enabled' -value 'False'

Default Value:

The default value for ASP.NET tracing is off."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
          value_type  : POLICY_TEXT
          value_data  : "false"
          appcmd_args : "list config {} /section:system.web/trace /text:enabled"
          appcmd_list : "list apps"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.6 Ensure 'httpcookie' mode is configured for session state - Default"
          info        : "A session cookie associates session information with client information for that session, which can be the duration of a user's connection to a site. The cookie is passed in a HTTP header together with all requests between the client and server.

Session information can also be stored in the URL. However, storing session information in this manner has security implications that can open attack vectors such as session hijacking. An effective method used to prevent session hijacking attacks is to force web applications to use cookies to store the session token. This is accomplished by setting the cookieless attribute of the sessionState node to UseCookies or False which will in turn keep session state data out of URI.

It is recommended that session state be configured to UseCookies.

Rationale:

Cookies that have been properly configured help mitigate the risk of attacks such as session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL; moving session information in URI causes session IDs to show up in proxy logs and is accessible to client scripting via document.location.

Impact:

Session information in URI session IDs will not show up in proxy logs."
          solution    : "SessionState can be set to UseCookies by using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the cookieless attribute of the sessionState node to UseCookies in the IIS Manager GUI:

Open the IIS Manager GUI and navigate desired server, site, or application

In Features View, find and double-click the Session State icon

In the Cookie Settings section, choose Use Cookies from the Mode dropdown

In the Actions Pane, click Apply

To use AppCmd.exe to configure sessionState at the server level, the command would look like this:

%systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:sessionState /cookieless:UseCookies /cookieName:ASP.NET_SessionID /timeout:20

When Appcmd.exe is used to configure the <sessionstate> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/sessionState' -name 'mode' -value 'StateServer'

Default Value:

By default, IIS maintains session state data for a managed code application in the worker process where the application runs e.g. In Process."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
          value_type  : POLICY_TEXT
          value_data  : "UseCookies"
          appcmd_args : "list config /section:system.web/sessionState /text:cookieless"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.6 Ensure 'httpcookie' mode is configured for session state - Applications"
          info        : "A session cookie associates session information with client information for that session, which can be the duration of a user's connection to a site. The cookie is passed in a HTTP header together with all requests between the client and server.

Session information can also be stored in the URL. However, storing session information in this manner has security implications that can open attack vectors such as session hijacking. An effective method used to prevent session hijacking attacks is to force web applications to use cookies to store the session token. This is accomplished by setting the cookieless attribute of the sessionState node to UseCookies or False which will in turn keep session state data out of URI.

It is recommended that session state be configured to UseCookies.

Rationale:

Cookies that have been properly configured help mitigate the risk of attacks such as session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL; moving session information in URI causes session IDs to show up in proxy logs and is accessible to client scripting via document.location.

Impact:

Session information in URI session IDs will not show up in proxy logs."
          solution    : "SessionState can be set to UseCookies by using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the cookieless attribute of the sessionState node to UseCookies in the IIS Manager GUI:

Open the IIS Manager GUI and navigate desired server, site, or application

In Features View, find and double-click the Session State icon

In the Cookie Settings section, choose Use Cookies from the Mode dropdown

In the Actions Pane, click Apply

To use AppCmd.exe to configure sessionState at the server level, the command would look like this:

%systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:sessionState /cookieless:UseCookies /cookieName:ASP.NET_SessionID /timeout:20

When Appcmd.exe is used to configure the <sessionstate> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/sessionState' -name 'mode' -value 'StateServer'

Default Value:

By default, IIS maintains session state data for a managed code application in the worker process where the application runs e.g. In Process."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
          value_type  : POLICY_TEXT
          value_data  : "UseCookies"
          appcmd_args : "list config {} /section:system.web/sessionState /text:cookieless"
          appcmd_list : "list apps"
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.8 Ensure 'MachineKey validation method - .Net 3.5' is configured - Default"
          info        : "The machineKey element of the ASP.NET web.config specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to specify hashing and encryption settings for application services such as view state, Forms authentication, membership and roles, and anonymous identification.

The following validation methods are available:

Advanced Encryption Standard (AES) is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits. This method uses the same private key to encrypt and decrypt data, whereas a public-key method must use a pair of keys

Message Digest 5 (MD5) is used for digital signing of applications. This method produces a 128-bit message digest, which is a compressed form of the original data

Secure Hash Algorithm (SHA1) is considered more secure than MD5 because it produces a 160-bit message digest

Triple Data Encryption Standard (TripleDES) is a minor variation of Data Encryption Standard (DES). It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance is not a primary consideration, consider using TripleDES

It is recommended that AES or SHA1 methods be configured for use at the global level.

Rationale:

Setting the validation property to AES will provide confidentiality and integrity protection to the viewstate. AES is the strongest encryption algorithm supported by the validation property. Setting the validation property to SHA1 will provide integrity protection to the viewstate. SHA1 is the strongest hashing algorithm supported by the validation property.

Impact:

N/A"
          solution    : "Machine key encryption can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the Machine Key encryption at the global level using an appcmd.exe command:

%systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:machineKey /validation:SHA1

Note: When Appcmd.exe is used to configure the <machineKey> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.

Default Value:

The default Machine Key validation method is SHA1."
          reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,CSF2.0|PR.AA-05,CSF2.0|PR.DS-02,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
          value_type  : POLICY_TEXT
          value_data  : "^(SHA1|AES|HMACSHA256|HMACSHA512)[\s]*$"
          appcmd_args : "list config /section:machineKey /text:validation"
          check_type  : CHECK_REGEX
        </custom_item>

        <custom_item>
          type        : AUDIT_IIS_APPCMD
          description : "3.8 Ensure 'MachineKey validation method - .Net 3.5' is configured - Applications"
          info        : "The machineKey element of the ASP.NET web.config specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to specify hashing and encryption settings for application services such as view state, Forms authentication, membership and roles, and anonymous identification.

The following validation methods are available:

Advanced Encryption Standard (AES) is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits. This method uses the same private key to encrypt and decrypt data, whereas a public-key method must use a pair of keys

Message Digest 5 (MD5) is used for digital signing of applications. This method produces a 128-bit message digest, which is a compressed form of the original data

Secure Hash Algorithm (SHA1) is considered more secure than MD5 because it produces a 160-bit message digest

Triple Data Encryption Standard (TripleDES) is a minor variation of Data Encryption Standard (DES). It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance is not a primary consideration, consider using TripleDES

It is recommended that AES or SHA1 methods be configured for use at the global level.

Rationale:

Setting the validation property to AES will provide confidentiality and integrity protection to the viewstate. AES is the strongest encryption algorithm supported by the validation property. Setting the validation property to SHA1 will provide integrity protection to the viewstate. SHA1 is the strongest hashing algorithm supported by the validation property.

Impact:

N/A"
          solution    : "Machine key encryption can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the Machine Key encryption at the global level using an appcmd.exe command:

%systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:machineKey /validation:SHA1

Note: When Appcmd.exe is used to configure the <machineKey> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.

Default Value:

The default Machine Key validation method is SHA1."
          reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,CSF2.0|PR.AA-05,CSF2.0|PR.DS-02,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
          value_type  : POLICY_TEXT
          value_data  : "^(SHA1|AES|HMACSHA256|HMACSHA512)[\s]*$"
          appcmd_args : "list config {} /section:machineKey /text:validation"
          appcmd_list : "list apps"
          check_type  : CHECK_REGEX
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "3.2 Ensure 'debug' is turned off - Default"
          info        : "Developers often enable the debug mode during active ASP.NET development so that they do not have to continually clear their browsers cache every time they make a change to a resource handler. The problem would arise from this being left 'on' or set to 'true'. Compilation debug output is displayed to the end user, allowing malicious persons to obtain detailed information about applications.

This is a defense in depth recommendation due to the <deployment retail='true' /> in the machine.config configuration file overriding any debug settings.

It is recommended that debugging still be turned off.

Rationale:

Setting <compilation debug> to false ensures that detailed error information does not inadvertently display during live application usage, mitigating the risk of application information leakage falling into unscrupulous hands.

Impact:

Debugging will be disabled."
          solution    : "To use the UI to make this change:

Open IIS Manager and navigate desired server, site, or application

In Features View, double-click .NET Compilation

On the .NET Compilation page, in the Behavior section, ensure the Debug field is set to False

When finished, click Apply in the Actions pane

Note: The <compilation debug> switch will not be present in the web.config file unless it has been added manually, or has previously been configured using the IIS Manager GUI.

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/compilation' -name 'debug' -value 'False'

Default Value:

The compilation of debug binaries is not enabled by default."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
        </report>

        <report type:"PASSED">
          description : "3.2 Ensure 'debug' is turned off - Applications"
          info        : "Developers often enable the debug mode during active ASP.NET development so that they do not have to continually clear their browsers cache every time they make a change to a resource handler. The problem would arise from this being left 'on' or set to 'true'. Compilation debug output is displayed to the end user, allowing malicious persons to obtain detailed information about applications.

This is a defense in depth recommendation due to the <deployment retail='true' /> in the machine.config configuration file overriding any debug settings.

It is recommended that debugging still be turned off.

Rationale:

Setting <compilation debug> to false ensures that detailed error information does not inadvertently display during live application usage, mitigating the risk of application information leakage falling into unscrupulous hands.

Impact:

Debugging will be disabled."
          solution    : "To use the UI to make this change:

Open IIS Manager and navigate desired server, site, or application

In Features View, double-click .NET Compilation

On the .NET Compilation page, in the Behavior section, ensure the Debug field is set to False

When finished, click Apply in the Actions pane

Note: The <compilation debug> switch will not be present in the web.config file unless it has been added manually, or has previously been configured using the IIS Manager GUI.

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/compilation' -name 'debug' -value 'False'

Default Value:

The compilation of debug binaries is not enabled by default."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
        </report>

        <report type:"PASSED">
          description : "3.3 Ensure custom error messages are not off - Default"
          info        : "When an ASP.NET application fails and causes an HTTP/1.x 500 Internal Server Error, or a feature configuration (such as Request Filtering) prevents a page from being displayed, an error message will be generated. Administrators can choose whether or not the application should display a friendly message to the client, detailed error message to the client, or detailed error message to localhost only. The <customErrors> tag in the web.config has three modes:

On: Specifies that custom errors are enabled. If no defaultRedirect attribute is specified, users see a generic error. The custom errors are shown to the remote clients and to the local host

Off: Specifies that custom errors are disabled. The detailed ASP.NET errors are shown to the remote clients and to the local host

RemoteOnly: Specifies that custom errors are shown only to the remote clients, and that ASP.NET errors are shown to the local host. This is the default value

This is a defense in depth recommendation due to the <deployment retail='true' /> in the machine.config file overriding any settings for customErrors to be turned Off.

It is recommended that customErrors still be turned to On or RemoteOnly.

Rationale:

customErrors can be set to On or RemoteOnly without leaking detailed application information to the client. Ensuring that customErrors is not set to Off will help mitigate the risk of malicious persons learning detailed application error and server configuration information.

Impact:

N/A"
          solution    : "customErrors may be set for a server, site, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the customErrors mode to RemoteOnly or On for a Web Site in the IIS Manager GUI:

Open the IIS Manager GUI and navigate to the site to be configured

In Features View, find and double-click .NET Error Pages icon

In the Actions Pane, click Edit Feature Settings

In modal dialog, choose On or Remote Only for Mode settings

Click OK

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/customErrors' -name 'mode' -value 'RemoteOnly'

Default Value:

The default value is <customErrors mode= 'RemoteOnly' />."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
        </report>

        <report type:"PASSED">
          description : "3.3 Ensure custom error messages are not off - Applications"
          info        : "When an ASP.NET application fails and causes an HTTP/1.x 500 Internal Server Error, or a feature configuration (such as Request Filtering) prevents a page from being displayed, an error message will be generated. Administrators can choose whether or not the application should display a friendly message to the client, detailed error message to the client, or detailed error message to localhost only. The <customErrors> tag in the web.config has three modes:

On: Specifies that custom errors are enabled. If no defaultRedirect attribute is specified, users see a generic error. The custom errors are shown to the remote clients and to the local host

Off: Specifies that custom errors are disabled. The detailed ASP.NET errors are shown to the remote clients and to the local host

RemoteOnly: Specifies that custom errors are shown only to the remote clients, and that ASP.NET errors are shown to the local host. This is the default value

This is a defense in depth recommendation due to the <deployment retail='true' /> in the machine.config file overriding any settings for customErrors to be turned Off.

It is recommended that customErrors still be turned to On or RemoteOnly.

Rationale:

customErrors can be set to On or RemoteOnly without leaking detailed application information to the client. Ensuring that customErrors is not set to Off will help mitigate the risk of malicious persons learning detailed application error and server configuration information.

Impact:

N/A"
          solution    : "customErrors may be set for a server, site, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the customErrors mode to RemoteOnly or On for a Web Site in the IIS Manager GUI:

Open the IIS Manager GUI and navigate to the site to be configured

In Features View, find and double-click .NET Error Pages icon

In the Actions Pane, click Edit Feature Settings

In modal dialog, choose On or Remote Only for Mode settings

Click OK

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/customErrors' -name 'mode' -value 'RemoteOnly'

Default Value:

The default value is <customErrors mode= 'RemoteOnly' />."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
        </report>

        <report type:"PASSED">
          description : "3.5 Ensure ASP.NET stack tracing is not enabled - Default"
          info        : "The trace element configures the ASP.NET code tracing service that controls how trace results are gathered, stored, and displayed. When tracing is enabled, each page request generates trace messages that can be appended to the page output or stored in an application trace log.

This is a defense in depth recommendation due to the <deployment retail='true' /> in the machine.config file overriding any settings for ASP.NET stack tracing that are left on.

It is recommended that ASP.NET stack tracing still be turned off.

Rationale:

In an active Web Site, tracing should not be enabled because it can display sensitive configuration and detailed stack trace information to anyone who views the pages in the site.

If necessary, the localOnly attribute can be set to true to have trace information displayed only for localhost requests. Ensuring that ASP.NET stack tracing is not on will help mitigate the risk of malicious persons learning detailed stack trace information.

Impact:

ASP.NET stack tracing still be turned off and sensitive configuration and detailed stack trace information will not be viewable to anyone who views the pages in the site."
          solution    : "Ensure <deployment retail='true' /> is enabled in the machine.config.

Remove all attribute references to ASP.NET tracing by deleting the trace and trace enable attributes.

Per Page:

Remove any references to:

Trace='true'

Per Application:

<configuration>
  <system.web>
     <trace enabled='true'>
  </system.web>
</configuration>

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/trace' -name 'enabled' -value 'False'

Default Value:

The default value for ASP.NET tracing is off."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
        </report>

        <report type:"PASSED">
          description : "3.5 Ensure ASP.NET stack tracing is not enabled - Applications"
          info        : "The trace element configures the ASP.NET code tracing service that controls how trace results are gathered, stored, and displayed. When tracing is enabled, each page request generates trace messages that can be appended to the page output or stored in an application trace log.

This is a defense in depth recommendation due to the <deployment retail='true' /> in the machine.config file overriding any settings for ASP.NET stack tracing that are left on.

It is recommended that ASP.NET stack tracing still be turned off.

Rationale:

In an active Web Site, tracing should not be enabled because it can display sensitive configuration and detailed stack trace information to anyone who views the pages in the site.

If necessary, the localOnly attribute can be set to true to have trace information displayed only for localhost requests. Ensuring that ASP.NET stack tracing is not on will help mitigate the risk of malicious persons learning detailed stack trace information.

Impact:

ASP.NET stack tracing still be turned off and sensitive configuration and detailed stack trace information will not be viewable to anyone who views the pages in the site."
          solution    : "Ensure <deployment retail='true' /> is enabled in the machine.config.

Remove all attribute references to ASP.NET tracing by deleting the trace and trace enable attributes.

Per Page:

Remove any references to:

Trace='true'

Per Application:

<configuration>
  <system.web>
     <trace enabled='true'>
  </system.web>
</configuration>

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/trace' -name 'enabled' -value 'False'

Default Value:

The default value for ASP.NET tracing is off."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
        </report>

        <report type:"PASSED">
          description : "3.6 Ensure 'httpcookie' mode is configured for session state - Default"
          info        : "A session cookie associates session information with client information for that session, which can be the duration of a user's connection to a site. The cookie is passed in a HTTP header together with all requests between the client and server.

Session information can also be stored in the URL. However, storing session information in this manner has security implications that can open attack vectors such as session hijacking. An effective method used to prevent session hijacking attacks is to force web applications to use cookies to store the session token. This is accomplished by setting the cookieless attribute of the sessionState node to UseCookies or False which will in turn keep session state data out of URI.

It is recommended that session state be configured to UseCookies.

Rationale:

Cookies that have been properly configured help mitigate the risk of attacks such as session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL; moving session information in URI causes session IDs to show up in proxy logs and is accessible to client scripting via document.location.

Impact:

Session information in URI session IDs will not show up in proxy logs."
          solution    : "SessionState can be set to UseCookies by using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the cookieless attribute of the sessionState node to UseCookies in the IIS Manager GUI:

Open the IIS Manager GUI and navigate desired server, site, or application

In Features View, find and double-click the Session State icon

In the Cookie Settings section, choose Use Cookies from the Mode dropdown

In the Actions Pane, click Apply

To use AppCmd.exe to configure sessionState at the server level, the command would look like this:

%systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:sessionState /cookieless:UseCookies /cookieName:ASP.NET_SessionID /timeout:20

When Appcmd.exe is used to configure the <sessionstate> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/sessionState' -name 'mode' -value 'StateServer'

Default Value:

By default, IIS maintains session state data for a managed code application in the worker process where the application runs e.g. In Process."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
        </report>

        <report type:"PASSED">
          description : "3.6 Ensure 'httpcookie' mode is configured for session state - Applications"
          info        : "A session cookie associates session information with client information for that session, which can be the duration of a user's connection to a site. The cookie is passed in a HTTP header together with all requests between the client and server.

Session information can also be stored in the URL. However, storing session information in this manner has security implications that can open attack vectors such as session hijacking. An effective method used to prevent session hijacking attacks is to force web applications to use cookies to store the session token. This is accomplished by setting the cookieless attribute of the sessionState node to UseCookies or False which will in turn keep session state data out of URI.

It is recommended that session state be configured to UseCookies.

Rationale:

Cookies that have been properly configured help mitigate the risk of attacks such as session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL; moving session information in URI causes session IDs to show up in proxy logs and is accessible to client scripting via document.location.

Impact:

Session information in URI session IDs will not show up in proxy logs."
          solution    : "SessionState can be set to UseCookies by using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the cookieless attribute of the sessionState node to UseCookies in the IIS Manager GUI:

Open the IIS Manager GUI and navigate desired server, site, or application

In Features View, find and double-click the Session State icon

In the Cookie Settings section, choose Use Cookies from the Mode dropdown

In the Actions Pane, click Apply

To use AppCmd.exe to configure sessionState at the server level, the command would look like this:

%systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:sessionState /cookieless:UseCookies /cookieName:ASP.NET_SessionID /timeout:20

When Appcmd.exe is used to configure the <sessionstate> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/sessionState' -name 'mode' -value 'StateServer'

Default Value:

By default, IIS maintains session state data for a managed code application in the worker process where the application runs e.g. In Process."
          reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
        </report>

        <report type:"PASSED">
          description : "3.8 Ensure 'MachineKey validation method - .Net 3.5' is configured - Default"
          info        : "The machineKey element of the ASP.NET web.config specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to specify hashing and encryption settings for application services such as view state, Forms authentication, membership and roles, and anonymous identification.

The following validation methods are available:

Advanced Encryption Standard (AES) is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits. This method uses the same private key to encrypt and decrypt data, whereas a public-key method must use a pair of keys

Message Digest 5 (MD5) is used for digital signing of applications. This method produces a 128-bit message digest, which is a compressed form of the original data

Secure Hash Algorithm (SHA1) is considered more secure than MD5 because it produces a 160-bit message digest

Triple Data Encryption Standard (TripleDES) is a minor variation of Data Encryption Standard (DES). It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance is not a primary consideration, consider using TripleDES

It is recommended that AES or SHA1 methods be configured for use at the global level.

Rationale:

Setting the validation property to AES will provide confidentiality and integrity protection to the viewstate. AES is the strongest encryption algorithm supported by the validation property. Setting the validation property to SHA1 will provide integrity protection to the viewstate. SHA1 is the strongest hashing algorithm supported by the validation property.

Impact:

N/A"
          solution    : "Machine key encryption can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the Machine Key encryption at the global level using an appcmd.exe command:

%systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:machineKey /validation:SHA1

Note: When Appcmd.exe is used to configure the <machineKey> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.

Default Value:

The default Machine Key validation method is SHA1."
          reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,CSF2.0|PR.AA-05,CSF2.0|PR.DS-02,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
        </report>

        <report type:"PASSED">
          description : "3.8 Ensure 'MachineKey validation method - .Net 3.5' is configured - Applications"
          info        : "The machineKey element of the ASP.NET web.config specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to specify hashing and encryption settings for application services such as view state, Forms authentication, membership and roles, and anonymous identification.

The following validation methods are available:

Advanced Encryption Standard (AES) is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits. This method uses the same private key to encrypt and decrypt data, whereas a public-key method must use a pair of keys

Message Digest 5 (MD5) is used for digital signing of applications. This method produces a 128-bit message digest, which is a compressed form of the original data

Secure Hash Algorithm (SHA1) is considered more secure than MD5 because it produces a 160-bit message digest

Triple Data Encryption Standard (TripleDES) is a minor variation of Data Encryption Standard (DES). It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance is not a primary consideration, consider using TripleDES

It is recommended that AES or SHA1 methods be configured for use at the global level.

Rationale:

Setting the validation property to AES will provide confidentiality and integrity protection to the viewstate. AES is the strongest encryption algorithm supported by the validation property. Setting the validation property to SHA1 will provide integrity protection to the viewstate. SHA1 is the strongest hashing algorithm supported by the validation property.

Impact:

N/A"
          solution    : "Machine key encryption can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the Machine Key encryption at the global level using an appcmd.exe command:

%systemroot%\system32\inetsrv\appcmd set config /commit:WEBROOT /section:machineKey /validation:SHA1

Note: When Appcmd.exe is used to configure the <machineKey> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config.

Default Value:

The default Machine Key validation method is SHA1."
          reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,CSF2.0|PR.AA-05,CSF2.0|PR.DS-02,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
          see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
        </report>
      </else>
    </if>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "3.11 Ensure X-Powered-By Header is removed - Default"
      info        : "The x-powered-by headers specify the underlying technology used by the webserver.

Rationale:

Attackers are able to conduct reconnaissance on a website using these response headers. This header could be used to target attacks for specific known vulnerabilities associated with the underlying technology. Removing this header will prevent targeting of your application for specific exploits by non-determined attackers.

While this is not the only way to fingerprint a site through the response headers, it makes it harder and prevents some potential attackers.

Impact:

X-powered-by headers will not be available on the webserver."
      solution    : "Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.webServer/httpProtocol /-'customHeaders.[name='X-Powered-By']' /commit:apphost

OR

Enter the following command in PowerShell to configure:

Remove-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webserver/httpProtocol/customHeaders' -name '.' -AtElement @{name='X-Powered-By'}"
      reference   : "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,CSF2.0|DE.CM-09,CSF2.0|PR.PS-01,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|2M,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : "X-powered-by"
      appcmd_args : "list config /section:system.webServer/httpProtocol"
      check_type  : CHECK_NOT_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "3.11 Ensure X-Powered-By Header is removed - Applications"
      info        : "The x-powered-by headers specify the underlying technology used by the webserver.

Rationale:

Attackers are able to conduct reconnaissance on a website using these response headers. This header could be used to target attacks for specific known vulnerabilities associated with the underlying technology. Removing this header will prevent targeting of your application for specific exploits by non-determined attackers.

While this is not the only way to fingerprint a site through the response headers, it makes it harder and prevents some potential attackers.

Impact:

X-powered-by headers will not be available on the webserver."
      solution    : "Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd.exe set config  -section:system.webServer/httpProtocol /-'customHeaders.[name='X-Powered-By']' /commit:apphost

OR

Enter the following command in PowerShell to configure:

Remove-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webserver/httpProtocol/customHeaders' -name '.' -AtElement @{name='X-Powered-By'}"
      reference   : "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,CSF2.0|DE.CM-09,CSF2.0|PR.PS-01,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|2M,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : "X-powered-by"
      appcmd_args : "list config {} /section:system.webServer/httpProtocol"
      appcmd_list : "list apps"
      check_type  : CHECK_NOT_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "3.12 Ensure Server Header is removed - Default"
      info        : "The server header headers specify the underlying technology used by the application.

Rationale:

While this is not the only way to fingerprint a site through the response headers, it makes it harder and prevents some potential attackers. The server header removal directive is a new feature in IIS 10 that can assist in mitigating this risk.

Impact:

This will remove the server header."
      solution    : "Enter the following command to use AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd.exe set config -section:system.webServer/security/requestFiltering /removeServerHeader:'True'  /commit:apphost

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/' -filter 'system.webServer/security/requestFiltering' -name 'removeServerHeader' -value 'True'

Default Value:

Microsoft-IIS/10.0"
      reference   : "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,CSF2.0|DE.CM-09,CSF2.0|PR.PS-01,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|2M,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : '^[\\s]*<requestFiltering.*removeServerHeader="true".*>[\\s]*$'
      appcmd_args : "list config /section:system.webServer/security/requestFiltering"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "3.12 Ensure Server Header is removed - Applications"
      info        : "The server header headers specify the underlying technology used by the application.

Rationale:

While this is not the only way to fingerprint a site through the response headers, it makes it harder and prevents some potential attackers. The server header removal directive is a new feature in IIS 10 that can assist in mitigating this risk.

Impact:

This will remove the server header."
      solution    : "Enter the following command to use AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd.exe set config -section:system.webServer/security/requestFiltering /removeServerHeader:'True'  /commit:apphost

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/' -filter 'system.webServer/security/requestFiltering' -name 'removeServerHeader' -value 'True'

Default Value:

Microsoft-IIS/10.0"
      reference   : "800-171|3.4.2,800-171|3.4.6,800-171|3.4.7,800-53|CM-6,800-53|CM-7,800-53r5|CM-6,800-53r5|CM-7,CSCv8|4.8,CSF|PR.IP-1,CSF|PR.PT-3,CSF2.0|DE.CM-09,CSF2.0|PR.PS-01,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-6,ITSG-33|CM-7,LEVEL|2M,NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,SWIFT-CSCv1|2.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : '^[\\s]*<requestFiltering.*removeServerHeader="true".*>[\\s]*$'
      appcmd_args : "list config {} /section:system.webServer/security/requestFiltering"
      appcmd_list : "list apps"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.1 Ensure 'maxAllowedContentLength' is configured - Default"
      info        : "The maxAllowedContentLength Request Filter is the maximum size of the http request, measured in bytes, which can be sent from a client to the server. Configuring this value enables the total request size to be restricted to a configured value.

It is recommended that the overall size of requests be restricted to a maximum value appropriate for the server, site, or application.

Rationale:

Setting an appropriate value that has been tested for the maxAllowedContentLength filter will lower the impact an abnormally large request would otherwise have on IIS and/or web applications. This helps to ensure availability of web content and services, and may also help mitigate the risk of buffer overflow type attacks in unmanaged components.

Impact:

Size of requests be restricted to the maximum value set."
      solution    : "The MaxAllowedContentLength Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:

Open Internet Information Services (IIS) Manager

In the Connections pane, click on the server, site, application, or directory to be configured

In the Home pane, double-click Request Filtering

Click Edit Feature Settings... in the Actions pane

Under the Request Limits section, key the maximum content length in bytes that will allow applications to retain their intended functionality, such as 30000000 (approx. 28.6 MB)

Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /requestLimits.maxAllowedContentLength:30000000

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/requestFiltering/requestLimits' -name 'maxAllowedContentLength' -value 30000000

Default Value:

When request filtering is installed on a system, the default value is: maxAllowedContentLength='30000000', which is approximately 28.6MB."
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2M,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : "^(3[0]{7}|[0-2][0-9]{7}|[0-9]{1,7})$"
      appcmd_args : "list config /section:system.webServer/security/requestFiltering /text:requestLimits.maxAllowedContentLength"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.1 Ensure 'maxAllowedContentLength' is configured - Applications"
      info        : "The maxAllowedContentLength Request Filter is the maximum size of the http request, measured in bytes, which can be sent from a client to the server. Configuring this value enables the total request size to be restricted to a configured value.

It is recommended that the overall size of requests be restricted to a maximum value appropriate for the server, site, or application.

Rationale:

Setting an appropriate value that has been tested for the maxAllowedContentLength filter will lower the impact an abnormally large request would otherwise have on IIS and/or web applications. This helps to ensure availability of web content and services, and may also help mitigate the risk of buffer overflow type attacks in unmanaged components.

Impact:

Size of requests be restricted to the maximum value set."
      solution    : "The MaxAllowedContentLength Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:

Open Internet Information Services (IIS) Manager

In the Connections pane, click on the server, site, application, or directory to be configured

In the Home pane, double-click Request Filtering

Click Edit Feature Settings... in the Actions pane

Under the Request Limits section, key the maximum content length in bytes that will allow applications to retain their intended functionality, such as 30000000 (approx. 28.6 MB)

Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /requestLimits.maxAllowedContentLength:30000000

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/requestFiltering/requestLimits' -name 'maxAllowedContentLength' -value 30000000

Default Value:

When request filtering is installed on a system, the default value is: maxAllowedContentLength='30000000', which is approximately 28.6MB."
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2M,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : "^(3[0]{7}|[0-2][0-9]{7}|[0-9]{1,7})$"
      appcmd_args : "list config {} /section:system.webServer/security/requestFiltering /text:requestLimits.maxAllowedContentLength"
      appcmd_list : "list apps"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.2 Ensure 'maxURL request filter' is configured - Default"
      info        : "The maxURL attribute of the <requestLimits> property is the maximum length (in Bytes) in which a requested URL can be (excluding query string) in order for IIS to accept. Configuring this Request Filter enables administrators to restrict the length of the requests that the server will accept.

It is recommended that a limit be put on the length of URL.

Rationale:

With a properly configured Request Filter limiting the amount of data accepted in the URL, chances of undesired application behaviors affecting the availability of content and services are reduced.

Impact:

Length of the URL will be restricted to the maximum value set."
      solution    : "The MaxURL Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:

Open Internet Information Services (IIS) Manager

In the Connections pane, click on the connection, site, application, or directory to be configured

In the Home pane, double-click Request Filtering

Click Edit Feature Settings... in the Actions pane

Under the Request Limits section, key the maximum URL length in bytes that has been tested with web applications

Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /requestLimits.maxURL:4096

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/requestFiltering/requestLimits' -name 'maxUrl' -value 4096

Default Value:

When Request Filtering is installed on a system, the default value for maxURL='4096'."
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : "^(409[0-6]|40[0-8][0-9]|[0-3][0-9]{3}|[0-9]{1,3})$"
      appcmd_args : "list config /section:system.webServer/security/requestFiltering /text:requestLimits.maxURL"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.2 Ensure 'maxURL request filter' is configured - Applications"
      info        : "The maxURL attribute of the <requestLimits> property is the maximum length (in Bytes) in which a requested URL can be (excluding query string) in order for IIS to accept. Configuring this Request Filter enables administrators to restrict the length of the requests that the server will accept.

It is recommended that a limit be put on the length of URL.

Rationale:

With a properly configured Request Filter limiting the amount of data accepted in the URL, chances of undesired application behaviors affecting the availability of content and services are reduced.

Impact:

Length of the URL will be restricted to the maximum value set."
      solution    : "The MaxURL Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:

Open Internet Information Services (IIS) Manager

In the Connections pane, click on the connection, site, application, or directory to be configured

In the Home pane, double-click Request Filtering

Click Edit Feature Settings... in the Actions pane

Under the Request Limits section, key the maximum URL length in bytes that has been tested with web applications

Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /requestLimits.maxURL:4096

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.webServer/security/requestFiltering/requestLimits' -name 'maxUrl' -value 4096

Default Value:

When Request Filtering is installed on a system, the default value for maxURL='4096'."
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : "^(409[0-6]|40[0-8][0-9]|[0-3][0-9]{3}|[0-9]{1,3})$"
      appcmd_args : "list config {} /section:system.webServer/security/requestFiltering /text:requestLimits.maxURL"
      appcmd_list : "list apps"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.3 Ensure 'MaxQueryString request filter' is configured - Default"
      info        : "The MaxQueryString Request Filter describes the upper limit on the length of the query string that the configured IIS server will allow for websites or applications.

It is recommended that values always be established to limit the amount of data that can be accepted in the query string.

Rationale:

With a properly configured Request Filter limiting the amount of data accepted in the query string, chances of undesired application behaviors such as app pool failures are reduced.

Impact:

The amount of data to be accepted in the query string will be limited."
      solution    : "The MaxQueryString Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:

Open Internet Information Services (IIS) Manager

In the Connections pane, go to the connection, site, application, or directory to be configured

In the Home pane, double-click Request Filtering

Click Edit Feature Settings... in the Actions pane

Under the Request Limits section, key in a safe upper bound in the Maximum query string (Bytes) textbox

Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /requestLimits.maxQueryString:2048

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webServer/security/requestFiltering/requestLimits' -name 'maxQueryString' -value 2048

Default Value:

When request filtering is installed on a system, the default value is maxQueryString='2048'."
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : "^(204[0-8]|20[0-3][0-9]|[0-1][0-9]{3}|[0-9]{1,3})$"
      appcmd_args : "list config /section:system.webServer/security/requestFiltering /text:requestLimits.maxQueryString"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.3 Ensure 'MaxQueryString request filter' is configured - Applications"
      info        : "The MaxQueryString Request Filter describes the upper limit on the length of the query string that the configured IIS server will allow for websites or applications.

It is recommended that values always be established to limit the amount of data that can be accepted in the query string.

Rationale:

With a properly configured Request Filter limiting the amount of data accepted in the query string, chances of undesired application behaviors such as app pool failures are reduced.

Impact:

The amount of data to be accepted in the query string will be limited."
      solution    : "The MaxQueryString Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:

Open Internet Information Services (IIS) Manager

In the Connections pane, go to the connection, site, application, or directory to be configured

In the Home pane, double-click Request Filtering

Click Edit Feature Settings... in the Actions pane

Under the Request Limits section, key in a safe upper bound in the Maximum query string (Bytes) textbox

Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /requestLimits.maxQueryString:2048

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webServer/security/requestFiltering/requestLimits' -name 'maxQueryString' -value 2048

Default Value:

When request filtering is installed on a system, the default value is maxQueryString='2048'."
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : "^(204[0-8]|20[0-3][0-9]|[0-1][0-9]{3}|[0-9]{1,3})$"
      appcmd_args : "list config {} /section:system.webServer/security/requestFiltering /text:requestLimits.maxQueryString"
      appcmd_list : "list apps"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.4 Ensure non-ASCII characters in URLs are not allowed - Default"
      info        : "This feature is used to allow or reject all requests to IIS that contain non-ASCII characters. When using this feature, Request Filtering will deny the request if high-bit characters are present in the URL. The UrlScan equivalent is AllowHighBitCharacters.

It is recommended that requests containing non-ASCII characters be rejected, where possible.

Rationale:

This feature can help defend against canonicalization attacks, reducing the potential attack surface of servers, sites, and/or applications.

Impact:

Requests containing non-ASCII characters be rejected."
      solution    : "The AllowHighBitCharacters Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:

Open Internet Information Services (IIS) Manager

In the Connections pane, go to the connection, site, application, or directory to be configured

In the Home pane, double-click Request Filtering

Click Edit Feature Settings... in the Actions pane

Under the General section, uncheck Allow high-bit characters

Note: Disallowing high-bit ASCII characters in the URL may negatively impact the functionality of sites requiring international language support.
Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /allowHighBitCharacters:false

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webServer/security/requestFiltering' -name 'allowHighBitCharacters' -value 'False'

Default Value:

When Request Filtering is installed on a system, the default behavior is to allow high-bit characters in URI."
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : "false"
      appcmd_args : "list config /section:system.webServer/security/requestFiltering /text:allowHighBitCharacters"
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "4.4 Ensure non-ASCII characters in URLs are not allowed - Applications"
      info        : "This feature is used to allow or reject all requests to IIS that contain non-ASCII characters. When using this feature, Request Filtering will deny the request if high-bit characters are present in the URL. The UrlScan equivalent is AllowHighBitCharacters.

It is recommended that requests containing non-ASCII characters be rejected, where possible.

Rationale:

This feature can help defend against canonicalization attacks, reducing the potential attack surface of servers, sites, and/or applications.

Impact:

Requests containing non-ASCII characters be rejected."
      solution    : "The AllowHighBitCharacters Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI:

Open Internet Information Services (IIS) Manager

In the Connections pane, go to the connection, site, application, or directory to be configured

In the Home pane, double-click Request Filtering

Click Edit Feature Settings... in the Actions pane

Under the General section, uncheck Allow high-bit characters

Note: Disallowing high-bit ASCII characters in the URL may negatively impact the functionality of sites requiring international language support.
Enter the following command in AppCmd.exe to configure:

%systemroot%\system32\inetsrv\appcmd set config /section:requestfiltering /allowHighBitCharacters:false

OR

Enter the following command in PowerShell to configure:

Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webServer/security/requestFiltering' -name 'allowHighBitCharacters' -value 'False'

Default Value:

When Request Filtering is installed on a system, the default behavior is to allow high-bit characters in URI."
      reference   : "800-171|3.13.1,800-171|3.13.2,800-53|SA-8,800-53r5|SA-8,CSCv7|18,CSF|PR.IP-2,CSF2.0|ID.AM-08,CSF2.0|ID.IM-01,CSF2.0|ID.IM-02,CSF2.0|ID.IM-03,CSF2.0|PR.DS-10,CSF2.0|PR.IR-03,CSF2.0|PR.PS-06,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SA-8,ITSG-33|SA-8a.,LEVEL|2A,NESA|T3.4.1,NESA|T4.5.3,NESA|T4.5.4,NESA|T7.6.5,NIAv2|SS3,NIAv2|VL2"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : "false"
      appcmd_args : "list config {} /section:system.webServer/security/requestFiltering /text:allowHighBitCharacters"
      appcmd_list : "list apps"
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "7.1 Ensure HSTS Header is set - Server"
      info        : "HTTP Strict Transport Security (HSTS) allows a site to inform the user agent to communicate with the site only over HTTPS. This header takes two parameters: max-age, 'specifies the number of seconds, after the reception of the STS header field, during which the user agent regards the host (from whom the message was received) as a Known HSTS Host [speaks only HTTPS]'; and includeSubDomains. includeSubDomains is an optional directive that defines how this policy is applied to subdomains. If includeSubDomains is included in the header, it provides the following definition: this HSTS Policy also applies to any hosts whose domain names are subdomains of the Known HSTS Host's domain name.

Rationale:

HTTP Strict Transport Security (HSTS) is a simple and widely supported standard to protect visitors by ensuring that their browsers always connect to a website over HTTPS. HSTS exists to remove the need for the common, insecure practice of redirecting users from http:// to https:// URLs. HSTS relies on the User Agent/Browser to enforce the required behavior. All major browsers support it. If the browser doesn't support HSTS, it will be ignored.

When a browser knows that a domain has enabled HSTS, it does two things:

Always uses an https:// connection, even when clicking on an http:// link or after typing a domain into the location bar without specifying a protocol.

Removes the ability for users to click through warnings about invalid certificates.

A domain instructs browsers that it has enabled HSTS by returning an HTTP header over an HTTPS connection.

Impact:

The user agent will only be able to communicate with the site over HTTPS."
      solution    : "Any value greater than 0 meets this recommendation. The examples below are specific to 8 minutes but can be adjusted to meet your requirements.

To set the HTTP Header at the server level using an AppCmd.exe command, run the following command from an elevated command prompt:

%systemroot%\system32\inetsrv\appcmd.exe set config -section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; preload']'

To set the HTTP Header and include subdomains at the server level using an AppCmd.exe command, run the following command from an elevated command prompt:

%systemroot%\system32\inetsrv\appcmd.exe set config -section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; includeSubDomains; preload']'

To set the HTTP Header at the Website level using an AppCmd.exe command, run the following command from an elevated command prompt:

%systemroot%\system32\inetsrv\appcmd.exe set config '<em>Website'</em> -section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; preload']'

To set the HTTP Header and include subdomains at the Website level using an AppCmd.exe command, run the following command from an elevated command prompt:

%systemroot%\system32\inetsrv\appcmd.exe set config '<em>Website'</em> -section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; includeSubDomains; preload']'"
      reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|18,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,CSF2.0|PR.AA-05,CSF2.0|PR.DS-02,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2M,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : '<add name="Strict-Transport-Security" value="max-age=([1-9]|[1-9][0-9]+)(; .+)?" />'
      appcmd_args : "list config /section:system.webServer/httpProtocol /xml:*"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type        : AUDIT_IIS_APPCMD
      description : "7.1 Ensure HSTS Header is set - Sites"
      info        : "HTTP Strict Transport Security (HSTS) allows a site to inform the user agent to communicate with the site only over HTTPS. This header takes two parameters: max-age, 'specifies the number of seconds, after the reception of the STS header field, during which the user agent regards the host (from whom the message was received) as a Known HSTS Host [speaks only HTTPS]'; and includeSubDomains. includeSubDomains is an optional directive that defines how this policy is applied to subdomains. If includeSubDomains is included in the header, it provides the following definition: this HSTS Policy also applies to any hosts whose domain names are subdomains of the Known HSTS Host's domain name.

Rationale:

HTTP Strict Transport Security (HSTS) is a simple and widely supported standard to protect visitors by ensuring that their browsers always connect to a website over HTTPS. HSTS exists to remove the need for the common, insecure practice of redirecting users from http:// to https:// URLs. HSTS relies on the User Agent/Browser to enforce the required behavior. All major browsers support it. If the browser doesn't support HSTS, it will be ignored.

When a browser knows that a domain has enabled HSTS, it does two things:

Always uses an https:// connection, even when clicking on an http:// link or after typing a domain into the location bar without specifying a protocol.

Removes the ability for users to click through warnings about invalid certificates.

A domain instructs browsers that it has enabled HSTS by returning an HTTP header over an HTTPS connection.

Impact:

The user agent will only be able to communicate with the site over HTTPS."
      solution    : "Any value greater than 0 meets this recommendation. The examples below are specific to 8 minutes but can be adjusted to meet your requirements.

To set the HTTP Header at the server level using an AppCmd.exe command, run the following command from an elevated command prompt:

%systemroot%\system32\inetsrv\appcmd.exe set config -section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; preload']'

To set the HTTP Header and include subdomains at the server level using an AppCmd.exe command, run the following command from an elevated command prompt:

%systemroot%\system32\inetsrv\appcmd.exe set config -section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; includeSubDomains; preload']'

To set the HTTP Header at the Website level using an AppCmd.exe command, run the following command from an elevated command prompt:

%systemroot%\system32\inetsrv\appcmd.exe set config '<em>Website'</em> -section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; preload']'

To set the HTTP Header and include subdomains at the Website level using an AppCmd.exe command, run the following command from an elevated command prompt:

%systemroot%\system32\inetsrv\appcmd.exe set config '<em>Website'</em> -section:system.webServer/httpProtocol /+'customHeaders.[name='Strict-Transport-Security',value='max-age=480; includeSubDomains; preload']'"
      reference   : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|18,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,CSF2.0|PR.AA-05,CSF2.0|PR.DS-02,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2M,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type  : POLICY_TEXT
      value_data  : '<add name="Strict-Transport-Security" value="max-age=([1-9]|[1-9][0-9]+)(; .+)?" />'
      appcmd_args : "list config {} /section:system.webServer/httpProtocol /xml:*"
      appcmd_list : "list sites"
      check_type  : CHECK_REGEX
    </custom_item>

    <custom_item>
      type            : AUDIT_POWERSHELL
      description     : "7.12 Ensure TLS Cipher Suite ordering is Configured"
      info            : "Cipher suites are a named combination of authentication, encryption, message authentication code, and key exchange algorithms used for the security settings of a network connection using TLS protocol. Clients send a cipher list and a list of ciphers that it supports in order of preference to a server. The server then replies with the cipher suite that it selects from the client cipher suite list.

Rationale:

Cipher suites should be ordered from strongest to weakest in order to ensure that the more secure configuration is used for encryption between the server and client.

TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256

Avoid cipher suits that do not provide Perfect Forward Secrecy or use weak hashing function, use them only if you need to support backwards compatibility and in the bottom of the list and you will have to create exceptions for the items that cause this to become out of compliance:

TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (uses SHA-1)
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (uses SHA-1)
TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (uses SHA-1)
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (uses SHA-1)
TLS_RSA_WITH_AES_256_GCM_SHA384 (lack of Perfect Forward Secrecy)
TLS_RSA_WITH_AES_128_GCM_SHA256 (lack of Perfect Forward Secrecy)
TLS_RSA_WITH_AES_256_CBC_SHA256 (lack of Perfect Forward Secrecy)
TLS_RSA_WITH_AES_128_CBC_SHA256 (lack of Perfect Forward Secrecy)
TLS_RSA_WITH_AES_256_CBC_SHA (uses SHA-1, lack of Perfect Forward Secrecy)
TLS_RSA_WITH_AES_128_CBC_SHA (uses SHA-1, lack of Perfect Forward Secrecy)

Note: HTTP/2 compatibility: first 4 ciphers (in bold) in the top part list are compatible with HTTP/2

Impact:

Cipher ordering is important to ensure that the most secure ciphers are listed first and will be applied over weaker ciphers when possible."
      solution        : "Perform the following to configure TLS cipher suite order:

Set the following Registry key to TLS_AES_256_GCM_SHA384, TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256.

HKLM\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002:Functions

To configure TLS cipher suite order using PowerShell enter the following command:

New-Item 'HKLM:\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002' -Force | Out-Null

New-ItemProperty -path 'HKLM:\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002' -name 'Functions' -value 'TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' -PropertyType 'MultiString' -Force | Out-Null"
      reference       : "800-171|3.1.13,800-171|3.5.2,800-171|3.13.8,800-53|AC-17(2),800-53|IA-5,800-53|IA-5(1),800-53|SC-8,800-53|SC-8(1),800-53r5|AC-17(2),800-53r5|IA-5,800-53r5|IA-5(1),800-53r5|SC-8,800-53r5|SC-8(1),CN-L3|7.1.2.7(g),CN-L3|7.1.3.1(d),CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.1(c),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSCv8|3.10,CSF|PR.AC-1,CSF|PR.AC-3,CSF|PR.DS-2,CSF|PR.DS-5,CSF|PR.PT-4,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,CSF2.0|PR.AA-05,CSF2.0|PR.DS-02,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ISO/IEC-27001|A.6.2.2,ISO/IEC-27001|A.10.1.1,ISO/IEC-27001|A.13.2.3,ITSG-33|AC-17(2),ITSG-33|IA-5,ITSG-33|IA-5(1),ITSG-33|SC-8,ITSG-33|SC-8a.,ITSG-33|SC-8(1),LEVEL|2A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T5.2.3,NESA|T5.4.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|AM37,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS5d,NIAv2|NS6b,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|13.2,SWIFT-CSCv1|2.1,SWIFT-CSCv1|2.6,SWIFT-CSCv1|4.1,TBA-FIISB|29.1"
      see_also        : "https://workbench.cisecurity.org/benchmarks/13949"
      value_type      : POLICY_TEXT
      value_data      : "TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
      powershell_args : "$output=([string](Get-ItemProperty -Path HKLM:\SOFTWARE\Policies\Microsoft\Cryptography\Configuration\SSL\00010002).Functions); foreach-object { if(!$output){ $result='No entries found' } else { $result=$output }; $result };"
    </custom_item>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_MS_IIS_10_v1.2.1_Level_2.audit from CIS Microsoft IIS 10 Benchmark v1.2.1"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://workbench.cisecurity.org/benchmarks/13949"
    </report>
  </else>
</if>

</group_policy>
</check_type>
