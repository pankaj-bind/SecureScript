#TRUSTED 9bbfa11515224eafe149a1413fa8ea4beae6f6ec5088ad199cf3a882d83133bf09ebdafa97f2cf94631fedb88548f72822b3a00ef744dfea5b4ee111a83677e22c095331e0fc650a68f13c2be54db0a0cd1db163852213af6f40f25c502fdd654e84f4efc15732b14324fa39654949dbc5a0837d7f30f70e9fa18921a88fc34cc9525c0ebfcc5c615dabbd21750f2a3ab2cbb6e628cbecad6ceaf9020af49397b09340d4397c064962759e49e08dd67e2d3c4d9c67b5146ca52a6668b4e41e77ede82e2170af8d04e025833277a3d3315e5304605f81eb08a2e6373a0b986fe8bd28f207ad16e135a4d13c9ac698c75f6c0caf8b03099b20ef4e99a3ec16e0850ca247af70cc1d75e4bf8aee3f1fce165f6f6baf0a87f0fb847293877f8bbce74b057bbdf8e85d8e19551ab52709bb9701cbc66233e27e47a5a6b03639bd43363a10a8c2b41fb35bb24a4e207bd7c043947f5eaaba0b45ff241beb8237c577c7cf914ad1d8603ba0ca299e933276d1bf28a0ad17a0dce0a06f36710edc94c1c328d38a59e399fe09bafc2cd0f9751b4fc275a906b5b79ec49d946a43abb0427846e99fbef91658b0f5685032e3dd20be6531cf3dd29c3603803d247876ad79181a3db440fc737841a1c2e00af46f34d7720ebed4b4b37fa8bb2c069ae7360d89d7032bf5a142f31f3bc2317a8e3df8437a4d96a21f1234388fe48e77b1e1bd8c
#TRUST-RSA-SHA256 6831024f7b224bb1dcab936b55a179f67b4ab7c872875ed475417c51d7762dc9c82e206a2d55091c36e4a08e63ac467eeada10b63b95d613d2aff1662ce31a74d3c391e92f561bfa2992db2b15bb718d20932669a7e9156a1f716b26fbfd4be01e09a902e82faf0450f5c8beb53c300ad9b7eca284b889ae8784eaa81d58d32ee1051ed6750cc396b256b0c0a667f6b621d67b5bdc1433c10af18261ad84d44948078af4609e6dc023f99c7c987624156b2d7ef2211e48ce670318143c7eb3363a8b2c0f341ff823b30fb721933ea263efe6a5bfbcabe64af14edb6eb629cf76c308031268a8944567465584b80cac02b6ff70b5bbfa205cb6ecb33c9ce2f77d88068af2d2255acd94832067e0ffd09f8f28ebaa77942a13b3d215a4b2af404da6cb19951e98a7ef481cfc25309f0e03e00734c0d177bd85bca316b392451ac01f1c5f27befe0581b48b48e8a83da1d0327d00582d9b35625c4211897d4adde43fb8d4363a2afd62785d8c2ca924cc5d297a8e323dd242c2a3ce61f62adbd014e3e80ce632360f112cbdb42a670b055d2f74b42c667307fce313ab418c7d704f3711daafd49ea184328347b861d6d91e1ec638cb861be5bc756f1542966d80c988f39924d9aec60010b901f2596f3cc31d01eb8ccd5ee978d3a2ee76b19b1085569ebd89a813e65687b587e47808e90228ab881b244d6364835833c169065333
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.11 $
# $Date: 2024/06/17 $
#
# description	: This .audit file is based on the recommendations from the CIS MongoDB Benchmark v1.0.0
#
#<ui_metadata>
#<display_name>CIS MongoDB Database Audit L2 v1.0.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>MongoDB 3.0</name>
#  <profile>L2 DB</profile>
#  <version>1.0.0</version>
#  <link>https://workbench.cisecurity.org/files/168</link>
#</spec>
#<labels>mongodb,cis,update_20230227</labels>
#<benchmark_refs>CCE,CIS_Recommendation,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#</ui_metadata>

<check_type:"MongoDB">

<custom_item>
  description : "3.4 Ensure that each role for each MongoDB database is needed and grants only the necessary privileges"
  info        : "Reviewing all roles periodically and eliminating unneeded roles as well as unneeded privileges from necessary roles helps minimize the privileges that each user has.

Rationale:

Although role-based access control (RBAC) has many advantages for regulating access to resources, over time some roles may no longer be needed, and some roles may grant privileges that are no longer needed.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To revoke specified privileges from the user-defined role on the database where the command is run. The revokePrivilegesFromRole command has the following syntax:

{

 revokePrivilegesFromRole: '<role>',

 privileges:

   [

    { resource: { <resource> }, actions: [ '<action>', ... ] },

    ...

   ],

}"
  reference   : "800-171|3.1.5,800-53|AC-6(5),800-53r5|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/168"
  regex       : ".*"
  collection  : "admin.$cmd"
  query       : '{"rolesInfo":1,"showPrivileges": true, "showBuiltinRoles": true}'
  severity    : MEDIUM
</custom_item>

<custom_item>
  description : "3.5 Review User-Defined Roles"
  info        : "Reviewing all roles periodically and removing all users from those roles who do not need to belong to them helps minimize the privileges that each user has.

Rationale:

Although role-based access control (RBAC) has many advantages for regulating access to resources, over time some users may be assigned to roles that are no longer necessary, such as a user changing jobs within the organization. Users who have excessive privileges pose unnecessary risk to the organization.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To remove a user from one or more roles on the current database, use the following command:

use <dbName>

db.revokeRolesFromUser( '<username>', [ <roles> ])"
  reference   : "800-171|3.1.5,800-53|AC-6(5),800-53r5|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/168"
  regex       : ".*"
  collection  : "admin.$cmd"
  query       : '{"rolesInfo":1,"showPrivileges": true, "showBuiltinRoles": true}'
  severity    : MEDIUM
</custom_item>

<custom_item>
  description : "3.6 Review Superuser/Admin Roles - dbOwner"
  info        : "Roles provide several advantages that make it easier to manage privileges in a database system. Security administrators can control access to their databases in a way that mirrors the structure of their organizations (they can create roles in the database that map directly to the job functions in their organizations). The assignment of privileges is simplified. Instead of granting the same set of privileges to each individual user in a particular job function, the administrator can grant this set of privileges to a role representing that job function and then grant that role to each user in that job function.

Rationale:

Reviewing the Superuser/Admin roles within a database helps minimize the possibility of privileged unwanted access.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To remove a user from one or more roles on the current database.

use <dbName>

db.revokeRolesFromUser( '<username>', [ <roles> ])"
  reference   : "800-171|3.1.5,800-53|AC-6(5),800-53r5|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/168"
  regex       : ".*"
  collection  : "admin.$cmd"
  query       : '{"rolesInfo":"dbOwner"}'
  severity    : MEDIUM
</custom_item>

<custom_item>
  description : "3.6 Review Superuser/Admin Roles - userAdmin"
  info        : "Roles provide several advantages that make it easier to manage privileges in a database system. Security administrators can control access to their databases in a way that mirrors the structure of their organizations (they can create roles in the database that map directly to the job functions in their organizations). The assignment of privileges is simplified. Instead of granting the same set of privileges to each individual user in a particular job function, the administrator can grant this set of privileges to a role representing that job function and then grant that role to each user in that job function.

Rationale:

Reviewing the Superuser/Admin roles within a database helps minimize the possibility of privileged unwanted access.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To remove a user from one or more roles on the current database.

use <dbName>

db.revokeRolesFromUser( '<username>', [ <roles> ])"
  reference   : "800-171|3.1.5,800-53|AC-6(5),800-53r5|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/168"
  regex       : ".*"
  collection  : "admin.$cmd"
  query       : '{"rolesInfo":"userAdmin"}'
  severity    : MEDIUM
</custom_item>

<custom_item>
  description : "3.6 Review Superuser/Admin Roles - userAdminAnyDatabase"
  info        : "Roles provide several advantages that make it easier to manage privileges in a database system. Security administrators can control access to their databases in a way that mirrors the structure of their organizations (they can create roles in the database that map directly to the job functions in their organizations). The assignment of privileges is simplified. Instead of granting the same set of privileges to each individual user in a particular job function, the administrator can grant this set of privileges to a role representing that job function and then grant that role to each user in that job function.

Rationale:

Reviewing the Superuser/Admin roles within a database helps minimize the possibility of privileged unwanted access.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To remove a user from one or more roles on the current database.

use <dbName>

db.revokeRolesFromUser( '<username>', [ <roles> ])"
  reference   : "800-171|3.1.5,800-53|AC-6(5),800-53r5|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/168"
  regex       : ".*"
  collection  : "admin.$cmd"
  query       : '{"rolesInfo":"userAdminAnyDatabase"}'
  severity    : MEDIUM
</custom_item>

<custom_item>
  description : "3.6 Review Superuser/Admin Roles - readWriteAnyDatabase"
  info        : "Roles provide several advantages that make it easier to manage privileges in a database system. Security administrators can control access to their databases in a way that mirrors the structure of their organizations (they can create roles in the database that map directly to the job functions in their organizations). The assignment of privileges is simplified. Instead of granting the same set of privileges to each individual user in a particular job function, the administrator can grant this set of privileges to a role representing that job function and then grant that role to each user in that job function.

Rationale:

Reviewing the Superuser/Admin roles within a database helps minimize the possibility of privileged unwanted access.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To remove a user from one or more roles on the current database.

use <dbName>

db.revokeRolesFromUser( '<username>', [ <roles> ])"
  reference   : "800-171|3.1.5,800-53|AC-6(5),800-53r5|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/168"
  regex       : ".*"
  collection  : "admin.$cmd"
  query       : '{"rolesInfo":"readWriteAnyDatabase"}'
  severity    : MEDIUM
</custom_item>

<custom_item>
  description : "3.6 Review Superuser/Admin Roles - dbAdminAnyDatabase"
  info        : "Roles provide several advantages that make it easier to manage privileges in a database system. Security administrators can control access to their databases in a way that mirrors the structure of their organizations (they can create roles in the database that map directly to the job functions in their organizations). The assignment of privileges is simplified. Instead of granting the same set of privileges to each individual user in a particular job function, the administrator can grant this set of privileges to a role representing that job function and then grant that role to each user in that job function.

Rationale:

Reviewing the Superuser/Admin roles within a database helps minimize the possibility of privileged unwanted access.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To remove a user from one or more roles on the current database.

use <dbName>

db.revokeRolesFromUser( '<username>', [ <roles> ])"
  reference   : "800-171|3.1.5,800-53|AC-6(5),800-53r5|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/168"
  regex       : ".*"
  collection  : "admin.$cmd"
  query       : '{"rolesInfo":"dbAdminAnyDatabase"}'
  severity    : MEDIUM
</custom_item>

<custom_item>
  description : "3.6 Review Superuser/Admin Roles - clusterAdmin"
  info        : "Roles provide several advantages that make it easier to manage privileges in a database system. Security administrators can control access to their databases in a way that mirrors the structure of their organizations (they can create roles in the database that map directly to the job functions in their organizations). The assignment of privileges is simplified. Instead of granting the same set of privileges to each individual user in a particular job function, the administrator can grant this set of privileges to a role representing that job function and then grant that role to each user in that job function.

Rationale:

Reviewing the Superuser/Admin roles within a database helps minimize the possibility of privileged unwanted access.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To remove a user from one or more roles on the current database.

use <dbName>

db.revokeRolesFromUser( '<username>', [ <roles> ])"
  reference   : "800-171|3.1.5,800-53|AC-6(5),800-53r5|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/168"
  regex       : ".*"
  collection  : "admin.$cmd"
  query       : '{"rolesInfo":"clusterAdmin"}'
  severity    : MEDIUM
</custom_item>

<custom_item>
  description : "3.6 Review Superuser/Admin Roles - hostManager"
  info        : "Roles provide several advantages that make it easier to manage privileges in a database system. Security administrators can control access to their databases in a way that mirrors the structure of their organizations (they can create roles in the database that map directly to the job functions in their organizations). The assignment of privileges is simplified. Instead of granting the same set of privileges to each individual user in a particular job function, the administrator can grant this set of privileges to a role representing that job function and then grant that role to each user in that job function.

Rationale:

Reviewing the Superuser/Admin roles within a database helps minimize the possibility of privileged unwanted access.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To remove a user from one or more roles on the current database.

use <dbName>

db.revokeRolesFromUser( '<username>', [ <roles> ])"
  reference   : "800-171|3.1.5,800-53|AC-6(5),800-53r5|AC-6(5),CN-L3|8.1.10.6(a),CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(5),LEVEL|2A,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM32,NIAv2|AM33,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/files/168"
  regex       : ".*"
  collection  : "admin.$cmd"
  query       : '{"rolesInfo":"hostManager"}'
  severity    : MEDIUM
</custom_item>

</check_type>
