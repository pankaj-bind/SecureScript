#TRUSTED 0301818b944607960e0e482e4d9ab7bdf70c4903c967be177c8352d921a15d5aac578aedaf695b428d061e7f8082def14dac3f3537a66ebd774f2aa7afa99073209c16ea6a7c6bd61616b7e1ba95d08ec619a70c3b1930b9110ac7b7bddf13e002346b6c236f82e623d43c7f2ad885f887b13c742a850052a1ecacfcf77f4c4741833d622fe26fb26ec6898c40df38cee052418cee41e34390084eee16370188c9fe85387a231a61ed1fada370548cee274bd4fac7bd393d27dfeddbecdfcc89f3ff0b001aa728756e279dd4034d1c1f7d30b2a3ff21ea053c532ac4cf2d5af59208c3e4934ad949a4d2ded14b8050887ba8f32e7ed57bc6fc426c8029679adf1ee1c7aa5631414fc00965b90d29a6d47c73b3f7c66b1d7d32c5d73c367d76a96ae08411548601fea78260bb1f26b1e248804ab32ecc747750a55a3ab00abcdc19a470aeae1d48dfc4ad0921d3a1c4f8b38065d14333692c5a071562a1c1880d5a827fbb86dc7d23b939294bfaee26111a3a65fb368bf6928ff05e750d9eb3d9cb944169a02f2a8925c6092f487ce3fd17721317c1bc83c719a1fc97edd424b5a88357211c29197dc187b93af54d6d51d1ea2fdea333f8171e9888f4735b770fb08698bcb3498cbaa3082138f579fafcbbc1b8e73e6f7abcad36e36b846df05fbce505182a16150dbbf9487bef9c9da6a803b74a43d6fbbbb02f2e608d3272b4
#TRUST-RSA-SHA256 70885d2007f75ae4061e8f94a7f98458955369982d5b89ff61b2e712c57e3406951852be79c0789bca945c067be0e1d3267ee6afe88a9ccb8a035eab04d0aa77fbb96d8d23ba706726e81b04c1171236abb300edca867a0f19d27b7c6340bdb0c180f263d45d3e3da687af6f3ee1761b702f8e40badd26c5c093472fa1dd70001452a3d860696bda49dd84af724300aae407245dfac44e67105d8f3f6d99e6b028fb9556688397a2fa90659f03251f755c4c77ccfb8101eb6bed030700ebd06f2760c8ab1323aadaba618ed8a0b8b7db6a2cc040bcaae48124fcddb416de68cab51504d86e33c49fcf571cc748cc3ba22eef26622b5eb07abd05bd0454deeda517bc5e07b055331af05f1cd41294aedfbb0b75224215d5cf015c2976127710e42270c1bccc5e2357449d21cf115e5f496868ef4a7a64acd3e1d30d0e574a035af4c2363413abfc72699fd2d87d9bb8fe0fd55057cbfe221602eb32c085136986076e00a95cf240948e2cc871b9b3242f67feedfa790e104f81fc957496e0d81077f813cdf5578a08979bfd18823e0ad6603df9b65619e3a0ea3aa0633090e912350787217eb0f420fb023ce9ebc74211f36299341adfbed528f1b5cf773add55ed23eaabc4b98a0a6df887d5416f82530814c1492781a91165fd333893ba71ce40c77f7e9f3f75c454dc34275a4f5c0ade8ef84c015082f276866d972099a368
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.0 $
# $Date: 2024/12/09 $
#
# description : This .audit is designed against the DISA MongoDB Enterprise Advanced 7.x STIG v1r1
#
#<ui_metadata>
#<display_name>DISA MongoDB Enterprise Advanced 7.x STIG v1r1</display_name>
#<spec>
#  <type>DISA STIG</type>
#  <name>MongoDB Enterprise Advanced 7.x</name>
#  <profile>DB</profile>
#  <version>1.1.0</version>
#  <link>https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip</link>
#</spec>
#<labels>disa,mongodb_enterprise_advanced_7.x_stig</labels>
#<benchmark_refs>CAT,CCE,CCI,DISA_Benchmark,Group-ID,Rule-ID,STIG-ID,STIG-Legacy,Vuln-ID</benchmark_refs>
#</ui_metadata>

<check_type:"MongoDB">

<custom_item>
  description : "MD7X-00-000300 MongoDB must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies."
  info        : "MongoDB must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Use the following statements to add and remove permissions on MongoDB server securables, bringing them into line with the documented requirements:

createRole(),
updateRole(),
dropRole(),
grantRolesToUser()

MongoDB commands for role management can be found here:
https://www.mongodb.com/docs/v7.0/reference/method/js-role-management/"
  reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CAT|I,CCI|CCI-000213,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSF|PR.AC-4,CSF|PR.PT-3,CSF2.0|PR.AA-05,CSF2.0|PR.DS-10,CSF2.0|PR.IR-01,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-265906r1028504_rule,STIG-ID|MD7X-00-000300,TBA-FIISB|31.1,Vuln-ID|V-265906"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
  regex       : ".*"
  expect      : "^Manual Review Required$"
  collection  : "admin.$cmd"
  query       : '{"rolesInfo":1,"showPrivileges": true, "showBuiltinRoles": true}'
  severity    : MEDIUM
</custom_item>

<custom_item>
  description : "MD7X-00-002900 Database objects (including but not limited to tables, indexes, storage, stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be owned by database/DBMS principals authorized for ownership."
  info        : "Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who uses the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.

Conversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when an account is removed.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "For each user identified as having a \"dbOwner\" role on a database they are not authorized for, revoke the \"dbOwner\" role from that user on that database by running the following commands:

use <database>
db.revokeRolesFromUser() command

https://www.mongodb.com/docs/v7.0/reference/command/revokeRolesFromUser/

Example to revoke \"dbOwner\" role from \"user1\" on the \"anotherDatabase\" in the \"admin\" database:

use admin
db.revokeRolesFromUser(
    \"user1\",
    [
        { role: \"dbOwner\", db: \"anotherDatabase\" }
    ]
)"
  reference   : "800-171|3.4.5,800-53|CM-5(6),800-53r5|CM-5(6),CAT|II,CCI|CCI-001499,CSF|PR.IP-1,CSF2.0|PR.PS-01,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-5(6),NESA|T3.2.3,NESA|T5.1.1,NESA|T5.6.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.3,QCSC-v1|7.2,Rule-ID|SV-265913r1028525_rule,STIG-ID|MD7X-00-002900,Vuln-ID|V-265913"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
  regex       : ".*"
  expect      : "^Manual Review Required$"
  collection  : 'admin.$cmd'
  query       : '{"usersInfo": 1 }'
  severity    : MEDIUM
</custom_item>

<if>
  <condition auto:"WARNING" type:"AND">
    <custom_item>
      description : "users"
      regex       : ".*"
      expect      : "^Manual Review Required$"
      collection  : 'admin.$cmd'
      query       : '{"usersInfo": 1 }'
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      description : "roles"
      regex       : ".*"
      expect      : "^Manual Review Required$"
      collection  : "admin.$cmd"
      query       : '{"rolesInfo":1,"showPrivileges": true, "showBuiltinRoles": true}'
      severity    : MEDIUM
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "MD7X-00-003000 The role(s)/group(s) used to modify database structure (including but not limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be restricted to authorized users."
      info        : "If MongoDB were to allow any user to make changes to database structure or logic, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.

Accordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.

Unmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Use the following commands to remove unauthorized access to a MongoDB database:

db.revokePrivilegesFromRole()
db.revokeRolesFromUser()

MongoDB commands for role management can be found here:

https://www.mongodb.com/docs/v7.0/reference/method/js-role-management/"
      reference   : "800-171|3.4.5,800-53|CM-5(6),800-53r5|CM-5(6),CAT|II,CCI|CCI-001499,CSF|PR.IP-1,CSF2.0|PR.PS-01,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-5(6),NESA|T3.2.3,NESA|T5.1.1,NESA|T5.6.1,NESA|T7.5.1,NESA|T7.5.3,NESA|T7.6.3,QCSC-v1|7.2,Rule-ID|SV-265914r1028528_rule,STIG-ID|MD7X-00-003000,Vuln-ID|V-265914"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
      show_output : YES
    </report>
  </then>
</if>

<custom_item>
  description : "MD7X-00-003600 MongoDB must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users)."
  info        : "To ensure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system.

Organizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). Organizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:

(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and
(ii) Accesses that occur through authorized use of group authenticators without individual authentication. Organizations may require unique identification of individuals using shared accounts, for detailed accountability of individual activity.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "For any user not a member of an appropriate organization and has access to a database in the system run the following command:

// Change to the appropriate database
> use <database>
> db.dropUser(\"<username>\", {w: \"majority\", wtimeout: 5000})

The MongoDB configuration file (default location: /etc/mongod.conf) must contain the following:

security:
  authorization: \"enabled\"

If not, edit the MongoDB configuration file. Add the parameters and stop/start (restart) any mongod or mongos process using this MongoDB configuration file."
  reference   : "800-171|3.5.1,800-53|IA-2,800-53r5|IA-2,CAT|II,CCI|CCI-000764,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSF|PR.AC-1,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2,ITSG-33|IA-2a.,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-265916r1028534_rule,STIG-ID|MD7X-00-003600,TBA-FIISB|35.1,TBA-FIISB|36.1,Vuln-ID|V-265916"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
  regex       : ".*"
  expect      : "^Manual Review Required$"
  collection  : 'admin.$cmd'
  query       : '{"usersInfo": 1 }'
  severity    : MEDIUM
</custom_item>

<custom_item>
  description : "MD7X-00-004200 MongoDB must map the PKI-authenticated identity to an associated user account."
  info        : "The DOD standard for authentication is DOD-approved PKI certificates. Once a PKI certificate has been validated, it must be mapped to a DBMS user account for the authenticated identity to be meaningful to MongoDB and useful for authorization decisions.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Add x.509 Certificate subject as an authorized user.

To authenticate with a client certificate, first add the value of the subject from the client certificate as a MongoDB user.

Each unique x.509 client certificate corresponds to a single MongoDB user; meaning a single client certificate cannot authenticate more than one MongoDB user.

Note: The RDNs in the subject string must be compatible with the RFC2253 standard.

Retrieve the RFC2253 formatted subject from the client certificate with the following command:

$ openssl x509 -in <pathToClient PEM> -inform PEM -subject -nameopt RFC2253

The command returns the subject string as well as certificate:

subject= CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry
-----BEGIN CERTIFICATE-----
# ...
-----END CERTIFICATE-----

Add the RFC2253 compliant value of the subject as a user. Omit spaces as needed.

For example, in the mongo shell, to add the user with both the \"readWrite\" role in the test database and the \"userAdminAnyDatabase\" role which is defined only in the admin database:

> db.getSiblingDB(\"$external\").runCommand(
  {
    createUser: \"CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry\",
    roles: [
             { role: 'readWrite', db: 'test' },
             { role: 'userAdminAnyDatabase', db: 'admin' }
           ],
    writeConcern: { w: \"majority\" , wtimeout: 5000 }
  }
)

In the above example, to add the user with the \"readWrite\" role in the test database, the role specification document specified \"test\" in the \"db\" field.

To add \"userAdminAnyDatabase\" role for the user, the above example specified \"admin\" in the \"db\" field.

Note: Some roles are defined only in the admin database, including: clusterAdmin, readAnyDatabase, readWriteAnyDatabase, dbAdminAnyDatabase, and userAdminAnyDatabase.

To add a user with these roles, specify \"admin\" in the \"db\" field. Refer to Manage Users and Roles for details on adding a user with roles.

To remove a user that is not authorized run the following command:

> use $external
> db.dropUser(\"<RDN of user>\")"
  reference   : "800-171|3.5.2,800-53|IA-5(2)(c),800-53r5|IA-5(2)(a)(2),CAT|II,CCI|CCI-000187,CSF|PR.AC-1,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5(2)(c),NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-265920r1028546_rule,STIG-ID|MD7X-00-004200,Vuln-ID|V-265920"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
  regex       : ".*"
  expect      : "^Manual Review Required$"
  collection  : "admin.$cmd"
  query       : '{"connectionStatus":"1"}'
  severity    : MEDIUM
</custom_item>

<if>
  <condition auto:"WARNING" type:"AND">
    <custom_item>
      description : "users"
      regex       : ".*"
      expect      : "^Manual Review Required$"
      collection  : 'admin.$cmd'
      query       : '{"usersInfo": 1 }'
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      description : "roles"
      regex       : ".*"
      expect      : "^Manual Review Required$"
      collection  : "admin.$cmd"
      query       : '{"rolesInfo":1,"showPrivileges": true, "showBuiltinRoles": true}'
      severity    : MEDIUM
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "MD7X-00-004500 MongoDB must uniquely identify and authenticate nonorganizational users (or processes acting on behalf of nonorganizational users)."
      info        : "Nonorganizational users include all information system users other than organizational users, which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations).

Nonorganizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server.

Accordingly, a risk assessment is used in determining the authentication needs of the organization.

Scalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use for access to federal information and information systems with the need to protect and adequately mitigate risk to organizational operations, organizational assets, individuals, other organizations, and the nation.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Administrators using MongoDB should document the appropriate privileges for various roles appropriate to the application.

Prerequisite: To view a user's roles, must have the \"viewUser\" privilege.

Connect to MongoDB.

For each database, identify the user's roles for the database.

use <database>
db.getUser(\"[username]\")

The server will return a document with the user's roles.

To revoke a user's role from a database use the db.revokeRolesFromUser() method.

To grant a role to a user use the db.grantRolesToUser() method."
      reference   : "800-53|IA-8,800-53r5|IA-8,CAT|II,CCI|CCI-000804,CSF|PR.AC-1,CSF2.0|PR.AA-01,CSF2.0|PR.AA-03,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-8,ITSG-33|IA-8a.,NESA|T4.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-265923r1028800_rule,STIG-ID|MD7X-00-004500,SWIFT-CSCv1|2.8,Vuln-ID|V-265923"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
      show_output : YES
    </report>
  </then>
</if>

<if>
  <condition auto:"WARNING" type:"AND">
    <custom_item>
      description : "users"
      regex       : ".*"
      expect      : "^Manual Review Required$"
      collection  : 'admin.$cmd'
      query       : '{"usersInfo": 1 }'
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      description : "roles"
      regex       : ".*"
      expect      : "^Manual Review Required$"
      collection  : "admin.$cmd"
      query       : '{"rolesInfo":1,"showPrivileges": true, "showBuiltinRoles": true}'
      severity    : MEDIUM
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "MD7X-00-004600 MongoDB must separate user functionality (including user interface services) from database management functionality."
      info        : "Information system management functionality includes functions necessary to administer databases, network components, workstations, or servers and typically requires privileged user access.

The separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, combinations of these methods, or other methods, as appropriate.

An example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources.

This may include isolating the administrative interface on a different domain and with additional access controls.

If administrative functionality or information regarding DBMS management is presented on an interface available for users, information on DBMS settings may be inadvertently made available to the user.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Administrators using MongoDB should document the appropriate privileges for various roles appropriate to the application.

For each database, identify the user's roles for the database.

> use <database>
> db.getUser(\"<username>\")

The server will return a document with the user's roles.

To revoke a user's role from a database use the following:

> db.revokeRolesFromUser( \"<username>\", [ <roles> ], { <writeConcern> } )

To grant a role to a user use the following:

> db.grantRolesToUser( \"<username>\", [ <roles> ], { <writeConcern> } )"
      reference   : "800-171|3.13.3,800-53|SC-2,800-53r5|SC-2,CAT|II,CCI|CCI-001082,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SC-2,ITSG-33|SC-2a.,NESA|T3.4.1,NIAv2|SS15b,Rule-ID|SV-265924r1028722_rule,STIG-ID|MD7X-00-004600,Vuln-ID|V-265924"
      see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
      show_output : YES
    </report>
  </then>
</if>

<report type:"WARNING">
  description : "MD7X-00-005700 MongoDB must check the validity of all data inputs except those specifically identified by the organization."
  info        : "Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.

With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.

Even when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Disable the javascriptEnabled option in the MongoDB configuration file (default location: /etc/mongod.conf) to include the following:

security:
   javascriptEnabled: false

If document validation is needed, it should be configured according to the documentation page at: https://www.mongodb.com/docs/v7.0/core/schema-validation/."
  reference   : "800-53|SI-10,800-53r5|SI-10,CAT|II,CCI|CCI-001310,CN-L3|8.1.4.4(d),CSF2.0|PR.DS-10,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-10,ITSG-33|SI-10a.,NESA|T7.3.1,NESA|T7.3.2,NIAv2|SS6e,Rule-ID|SV-265929r1028804_rule,STIG-ID|MD7X-00-005700,Vuln-ID|V-265929"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "MD7X-00-006000 MongoDB must provide nonprivileged users with error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries."
  info        : "Any DBMS or associated application providing too much information in error messages on the screen or printout risks compromising the data and security of the system. The structure and content of error messages need to be carefully considered by the organization and development team.

Databases can inadvertently provide a wealth of information to an attacker through improperly handled error messages. In addition to sensitive business or personal information, database errors can provide host names, IP addresses, usernames, and other system information not required for troubleshooting but very useful to someone targeting the system.

Carefully consider the structure/content of error messages. The extent to which information systems are able to identify and handle error conditions is guided by organizational policy and operational requirements. Information that could be exploited by adversaries includes, for example, logon attempts with passwords entered by mistake as the username, mission/business information that can be derived from (if not stated explicitly by) information recorded, and personal information, such as account numbers, social security numbers, and credit card numbers.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Configure custom application code so as not to divulge sensitive information or information useful for system identification in custom application error messages.

To configure MongoDB to redact client information from its log file, do the following:

Edit the MongoDB Configuration file (default location: /etc/mongod.conf)

Add the following option to the security section:

security:
   redactClientLogData: true

Restart the MongoDB server from the operating system:

$ sudo systemctl restart mongod"
  reference   : "800-53|SI-11a.,800-53r5|SI-11a.,CAT|II,CCI|CCI-001312,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-11b.,Rule-ID|SV-265931r1028807_rule,STIG-ID|MD7X-00-006000,Vuln-ID|V-265931"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "MD7X-00-006100 MongoDB must reveal detailed error messages only to the information system security officer (ISSO), information system security manager (ISSM), system administrator (SA), and database administrator (DBA)."
  info        : "If MongoDB provides too much information in error logs and administrative messages to the screen, this could lead to compromise. The structure and content of error messages must be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.

Some default DBMS error messages can contain information that could aid an attacker in, among other things, identifying the database type, host address, or state of the database. Custom errors may contain sensitive customer information.

It is important that detailed error messages be visible only to those who are authorized to view them; that general users receive only generalized acknowledgment that errors have occurred; and that these generalized messages appear only when relevant to the user's task. For example, a message along the lines of, \"An error has occurred. Unable to save your changes. If this problem persists, contact your help desk\" would be relevant. A message such as \"Warning: your transaction generated a large number of page splits\" would likely not be relevant.

Administrative users authorized to review detailed error messages typically are the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified according to organization-specific needs, with appropriate approval.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Edit the MongoDB configuration file (default location: /etc/mongod.conf) and add the following parameter \"redactClientLogData\" in the security section of that file. Example:

security:
  redactClientLogData: true

Restart the MongoDB service from the OS.

$ sudo systemctl restart mongod

Identify and remove all unnecessary roles and privileges from application users."
  reference   : "800-53|SI-11b.,800-53r5|SI-11b.,CAT|II,CCI|CCI-001314,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-11c.,Rule-ID|SV-265932r1028808_rule,STIG-ID|MD7X-00-006100,Vuln-ID|V-265932"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "MD7X-00-006200 The DBMS must automatically terminate a user session after organization-defined conditions or trigger events requiring session disconnect."
  info        : "This addresses the termination of user-initiated logical sessions in contrast to the termination of network connections that are associated with communications sessions (i.e., network disconnect). A logical session (for local, network, and remote access) is initiated whenever a user (or process acting on behalf of a user) accesses an organizational information system. Such user sessions can be terminated (and thus terminate user access) without terminating network sessions.

Session termination ends all processes associated with a user's logical session except those batch processes/jobs that are specifically created by the user (i.e., session owner) to continue after the session is terminated.

Conditions or trigger events requiring automatic session termination can include, for example, organization-defined periods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on information system use.

This capability is typically reserved for specific cases where the system owner, data owner, or organization requires additional assurance.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Determine the situations when a user-initiated database session must be terminated.

Note: The user running the commands shown below must have privileges with listSessions, killAnySession and impersonate action on the cluster.

In the MongoDB shell, as an authenticated user, run the following command to list all user sessions:

> use config
> db.system.sessions.aggregate( [ { $listSessions: { allUsers: true } }

Reference: https://docs.mongodb.com/v7.0/reference/operator/aggregation/listSessions/

Example output:

{ \"_id\" : { \"id\" : UUID(\"b3b50641-54c6-4d6d-a96e-a2239fadce3c\"), \"uid\" : BinData(0,\"Y5mrDaxi8gv8RmdTsQ+1j7fmkr7JUsabhNmXAheU0fg=\") }, \"lastUse\" : ISODate(\"2021-09-23T23:34:43.951Z\"), \"user\" : { \"name\" : \"jsmith@admin\" } }

From the output identify the names of users whose sessions should be terminated. Using the user for each session to be terminated, run the following command (still in MongoDB shell).

> db.runCommand( { killAllSessionsByPattern: [ { users: [ { user: <user>, db: <dbname> }, ... ] }] } )

Example to terminate user \"jsmith@admin\" sessions from example output:

> db.runCommand( { killAllSessionsByPattern: [ { users: [ { user: \"jsmith\", db: \"admin\" } ] }]} )

To terminate all user sessions running on the database, run the following command (still in MongoDB shell):

> db.runCommand( { killAllSessionsByPattern: [ ] } )

Reference: https://docs.mongodb.com/v7.0/reference/command/killAllSessionsByPattern/"
  reference   : "800-171|3.1.11,800-53|AC-12,800-53r5|AC-12,CAT|II,CCI|CCI-002361,CN-L3|7.1.2.2(d),CN-L3|7.1.3.7(b),CN-L3|8.1.4.1(b),CSF2.0|PR.AA-03,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iii),ITSG-33|AC-12,NIAv2|NS49,Rule-ID|SV-265933r1028585_rule,STIG-ID|MD7X-00-006200,Vuln-ID|V-265933"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "MD7X-00-006400 MongoDB must associate organization-defined types of security labels having organization-defined security label values with information in storage."
  info        : "Without the association of security labels to information, there is no basis for MongoDB to make security-related access-control decisions.

Security labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.

These labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling, or distribution instructions, or support other aspects of the information security policy.

One example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.

The mechanism used to support security labeling may be a feature of MongoDB product, a third-party product, or custom application code.

Satisfies: SRG-APP-000311-DB-000308, SRG-APP-000313-DB-000309, SRG-APP-000314-DB-000310

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "To implement security labeling, ensure the following:

1. Organizational or site specific documentation and guidance is available or developed.

2. Ensure security labels are applied to MongoDB collection(s) requiring them in accordance with the organization or site specific documentation.

3. Create a Security Label Tag Viewer role (\"SLTagViewer\") with \"find\" privileges on the specific database and collection that requires security labeling.

In the example below, there are three databases and collections in those databases where security labels are required:

> use admin
> db.createRole(
   {
     role: \"SLTagViewer\",
     privileges: [
       { resource: { db: \"db1\", collection: \"coll1\" }, actions: [ \"find\" ] },
       { resource: { db: \"db1\", collection: \"coll2\" }, actions: [ \"find\" ] },
       { resource: { db: \"db1\", collection: \"coll3\" }, actions: [ \"find\" ] },
       { resource: { db: \"db2\", collection: \"coll1\" }, actions: [ \"find\" ] },
       { resource: { db: \"db2\", collection: \"coll5\" }, actions: [ \"find\" ] },
       { resource: { db: \"db2\", collection: \"coll9\" }, actions: [ \"find\" ] },
       { resource: { db: \"db3\", collection: \"coll81\" }, actions: [ \"find\" ] }
     ],
     roles: [ ]
   },
   { w: \"majority\" , wtimeout: 5000 }
)

4. Ensure that any query that targets the databases/collections that have security labeling have the appropriate MongoDB $redact operation applied.

The $redact operator is applied through trusted middleware. This trusted middleware configuration is purpose built (custom) code and integrations and is organizational or site specific.
Information on the basics of how this is constructed can be found here: https://www.mongodb.com/docs/v7.0/reference/operator/aggregation/redact/"
  reference   : "800-53|AC-16a.,800-53r5|AC-16a.,CAT|II,CCI|CCI-002262,CCI|CCI-002263,CCI|CCI-002264,CSF|PR.AC-4,CSF2.0|PR.AA-05,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.8.2.1,ISO/IEC-27001|A.8.2.2,ITSG-33|AC-16a.,NESA|T1.3.2,NESA|T1.3.3,NIAv2|SS28,QCSC-v1|5.2.2,QCSC-v1|13.2,Rule-ID|SV-265934r1028811_rule,STIG-ID|MD7X-00-006400,Vuln-ID|V-265934"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
</report>

<custom_item>
  description : "MD7X-00-006800 MongoDB must prevent nonprivileged users from executing privileged functions, to include disabling, circumventing, or altering implemented security safeguards/countermeasures."
  info        : "Preventing nonprivileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges.

System documentation should include a definition of the functionality considered privileged.

Depending on circumstances, privileged functions can include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Nonprivileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from nonprivileged users.

A privileged function in the DBMS/database context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In a MongoDB environment, it encompasses, but is not necessarily limited to:

createCollection()
dropCollection()
grantRolesToUsers()
revokeRolesFromUsers()

There may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples include:

deleteOne(), deleteMany()
updateOne(), updateMany()

any find(), insertXXX(), updateXXX(), deleteXXX() to an application-defined security table executed by other than a security principal.

Depending on the capabilities of the DBMS and the design of the database and associated applications, the prevention of unauthorized use of privileged functions may be achieved by means of DBMS security features, database triggers, other mechanisms, or a combination of these.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Ensure users are assigned only to authorized roles.

To revoke a role from a user in a database, run the following commands:

> use <database>
> db.revokeRolesFromUser( \"<username>\", [ <roles> ], { <writeConcern> } )

https://www.mongodb.com/docs/v7.0/reference/method/db.revokeRolesFromUser/"
  reference   : "800-171|3.1.7,800-53|AC-6(10),800-53r5|AC-6(10),CAT|II,CCI|CCI-002235,CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSF|PR.AC-4,CSF2.0|PR.AA-05,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ITSG-33|AC-6,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM23f,NIAv2|SS13c,NIAv2|SS15c,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,Rule-ID|SV-265936r1028813_rule,STIG-ID|MD7X-00-006800,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3,Vuln-ID|V-265936"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
  regex       : ".*"
  expect      : "^Manual Review Required$"
  collection  : 'admin.$cmd'
  query       : '{"usersInfo": 1 }'
  severity    : MEDIUM
</custom_item>

<custom_item>
  description : "MD7X-00-007700 MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status."
  info        : "Allowing regular users to install software without explicit privileges creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceed the rights of a regular user.

DBMS functionality and the nature and requirements of databases will vary; so while users are not permitted to install unapproved software, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository. The requirements for production servers will be more restrictive than those used for development and research.

MongoDB must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization.

In the case of a database management system, this requirement covers stored procedures, functions, triggers, views, etc.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "Revoke unapproved roles from nonadministrative users as per the site-specific document by executing db.revokeRolesFromUser for each user and database:

> use <database>
> db.revokeRolesFromUser( \"<username>\", [ <roles> ], { <writeConcern> } )

https://www.mongodb.com/docs/v7.0/reference/method/db.revokeRolesFromUser/

Edit the MongoDB configuration file (default location: /etc/mongod.conf) to include the following:

security:
  javascriptEnabled: false"
  reference   : "800-171|3.4.9,800-53|CM-11(2),800-53r5|CM-11(2),CAT|II,CCI|CCI-001812,CSF|DE.CM-3,CSF2.0|DE.CM-03,CSF2.0|DE.CM-09,CSF2.0|PR.PS-01,CSF2.0|PR.PS-02,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ISO/IEC-27001|A.12.6.2,QCSC-v1|8.2.1,Rule-ID|SV-265941r1028609_rule,STIG-ID|MD7X-00-007700,SWIFT-CSCv1|5.1,Vuln-ID|V-265941"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
  regex       : ".*"
  expect      : "^Manual Review Required$"
  collection  : 'admin.$cmd'
  query       : '{"usersInfo": 1 }'
  severity    : MEDIUM
</custom_item>

<report type:"WARNING">
  description : "MD7X-00-007800 MongoDB must enforce access restrictions associated with changes to the configuration of MongoDB or database(s)."
  info        : "Failure to provide logical access restrictions associated with changes to configuration may have significant effects on the overall security of the system.

When dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system can potentially have significant effects on the overall security of the system.

Accordingly, only qualified and authorized individuals should be allowed to obtain access to system components for the purposes of initiating changes, including upgrades and modifications.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Locate a machine that can access the MongoDB Security Checklist here: https://www.mongodb.com/docs/v7.0/administration/security-checklist/

Review the MongoDB Security Checklist.

Follow the procedures to enable MongoDB access control here: https://www.mongodb.com/docs/v7.0/tutorial/enable-authentication/#enable-access-control"
  reference   : "800-171|3.4.5,800-53|CM-5(1),800-53r5|CM-5(1)(a),CAT|II,CCI|CCI-001813,CSF|PR.IP-1,CSF2.0|PR.PS-01,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-5(1),NESA|T5.1.1,NESA|T5.6.1,NESA|T7.5.3,QCSC-v1|7.2,Rule-ID|SV-265942r1028817_rule,STIG-ID|MD7X-00-007800,Vuln-ID|V-265942"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "MD7X-00-008000 The DBMS must disable network functions, ports, protocols, and services deemed by the organization to be nonsecure, in accord with the Ports, Protocols, and Services Management (PPSM) guidance."
  info        : "Use of nonsecure network functions, ports, protocols, and services exposes the system to avoidable threats.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Deploy a DBMS capable of disabling a network function, port, protocol, or service prohibited by the PPSM guidance.

Disable each prohibited network function, port, protocol, or service.

More information for MongoDB port management can be found at the following link:
https://www.mongodb.com/docs/manual/reference/default-mongodb-port/"
  reference   : "800-171|3.4.7,800-53|CM-7(1)(b),800-53r5|CM-7(1)(b),CAT|II,CCI|CCI-001762,CSF|PR.IP-1,CSF|PR.PT-3,CSF2.0|PR.PS-01,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-7(1),NIAv2|SS15a,PCI-DSSv3.2.1|2.2.2,QCSC-v1|3.2,Rule-ID|SV-265943r1028615_rule,STIG-ID|MD7X-00-008000,SWIFT-CSCv1|2.3,Vuln-ID|V-265943"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "MD7X-00-008300 MongoDB must use NSA-approved cryptography to protect classified information in accordance with the data owner's requirements."
  info        : "Use of weak or untested encryption algorithms undermines the purposes of using encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.

It is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.

NSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of a DBMS with the encryption devices.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Enable FIPS mode for MongoDB Enterprise.

Edit the MongoDB database configuration file (default location: /etc/mongod.conf) to contain the following parameter setting:

net:
   tls:
      FIPSMode: true

Stop/start (restart) the mongod or mongos instance using this configuration and run the following command to verify the output is \"true\":

> db.getSiblingDB(\"admin\").runCommand({getCmdLineOpts: 1}).parsed.net.tls.FIPSMode

The output of this command must be \"true\".

Alternatively, run the following command to search the mongod logfile for \"FIPS mode 140-2 activated\":

$ grep \"FIPS 140-2 mode activated\" /var/log/mongodb/mongod.log

There should be a line similar to what is shown below:

{\"t\":{\"$date\":\"2024-05-21T19:17:49.262+00:00\"},\"s\":\"I\", \"c\":\"NETWORK\", \"id\":23172, \"ctx\":\"main\",\"msg\":\"FIPS 140-2 mode activated\"}"
  reference   : "800-171|3.13.11,800-53|SC-13,800-53r5|SC-13b.,CAT|I,CCI|CCI-002450,CSF|PR.DS-5,CSF2.0|PR.DS-01,CSF2.0|PR.DS-02,CSF2.0|PR.DS-10,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(iv),HIPAA|164.312(e)(2)(ii),ISO/IEC-27001|A.10.1.1,ITSG-33|SC-13,ITSG-33|SC-13a.,NESA|M5.2.6,NESA|T7.4.1,NIAv2|CY3,NIAv2|CY4,NIAv2|CY5b,NIAv2|CY5c,NIAv2|CY5d,NIAv2|CY7,NIAv2|NS5e,QCSC-v1|6.2,Rule-ID|SV-265945r1028621_rule,STIG-ID|MD7X-00-008300,Vuln-ID|V-265945"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
</report>

<report type:"WARNING">
  description : "MD7X-00-009000 When invalid inputs are received, MongoDB must behave in a predictable and documented manner that reflects organizational and system objectives."
  info        : "A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.

The behavior will be derived from the organizational and system requirements and includes, but is not limited to, notification of the appropriate personnel, creating an audit record, and rejecting invalid input.

This calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.

MongoDB schema validation allows database administrators to create rules at the collection level for fields, specifying allowed data types and value ranges. This is distinct from application-level checks and input validation. It is particularly important in MongoDB due to its flexible schema model, which allows documents in a collection to have different fields and data types by default.

NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance."
  solution    : "Document validation can be added at the time of creation of a new collection.

Also, existing collections can be modified with document validation rules.

Use the \"validator\" option to create or update a collection with the desired validation rules.

Refer to Schema Validation documentation for details:

https://www.mongodb.com/docs/v7.0/core/schema-validation/"
  reference   : "800-53|SI-10(3),800-53r5|SI-10(3),CAT|II,CCI|CCI-002754,CN-L3|8.1.4.4(d),CSF2.0|PR.DS-10,DISA_Benchmark|MongoDB_Enterprise_Advanced_7-x_STIG,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-10,ITSG-33|SI-10a.,NESA|T7.3.1,NIAv2|SS6e,Rule-ID|SV-265950r1028819_rule,STIG-ID|MD7X-00-009000,Vuln-ID|V-265950"
  see_also    : "https://dl.dod.cyber.mil/wp-content/uploads/stigs/zip/U_MongoDB_Enterprise_Advanced_7-x_V1R1_STIG.zip"
</report>

</check_type>
