#TRUSTED 50f84a97f2da511881f6e6043daf5e942e8136884779187bddbc20555dff8c32fb4712a67603e5d8586c1c85cdbaf88f8e0959c611129d5849eacac4219801e90f8a353b9d1f8edd12879a5c87df49709caaa01967c0b0d81d3d3f9cbb97db55f8c4193d0d591830662895dfe46f42847cec24061635cbbccac299e5a3144fb5f796b8d3b0065ee8a4e8fe8bfeb9725a8ec798a5b7f0685346045d3a1931b6c938a7d1a41d3b04a98b767c98eb74d619b771591458341e08118caa9e9ff718f732674bf7b07dbabbea0bad54ff50c7efca400e5e855d8733ca41c675967455b6cb72bcc15fe02339e4ca2d785298e8779dd4cd8ae6eb983123922f3f290d37fe8ebc5785236c750f458c1034c3fd40b849e29d6a3ce682196405ba3ab127e4d4cdb9dceb14783ca1906f8df743f6a4e1efd8314840a1c98a3dc3b4e1743806afae6ec74c5da1ddca2986a7c52a174b09d5577a8a489b74f1394255004ceb6b1712ac1b4e5fa8ed3e8e0a6563aa463ebaa15bdaa2f8ae882ea56af4e2b10c6ca7984f4f29265aacdf1fcf4fdecc998d4ced9ea3169b89df454ce8ed3e6b6572805cad21c11a80e1cf95d2362637f6af1bcce41ca3beb76431639d3791ebf28a92852721fbd9b1e3ca0d6f1d5522b6a2e2af882141aceb4303f59e9a94c633d86d04731d1a8f04a85ad249939648aeba7fc70d3ac10cbe5866acc3867b0681aaf5
#TRUST-RSA-SHA256 11b53bbfc39ec64def62a9a77d9bf3db955bc9577df54c8ba4b3f7bcf1475eb5233e17b0c5d957132f396b41c64f0c24c3511fa69271b97916cf30935a5a30e4b96966f058449aa4d831948a38783def5b97a6d773fb5fb0bedb21f025a149e87283b7edc10bbd1e0b78a10a934ee2b81549ef0037cdf2dea4ec214ade2c11a9daa933427191662f2ba38be4d30c429ab8bfc720f9f4734cbea70404b56cf656f6ab678f88453de1b5f77ecf5af19fe65c154492734d46bfa55b0239c0ea9cdac4c42299f0d0dea116204b0329f5cf6c3ea1d55c8fbde6628702e7843bdeced03fe63d64faec4ae2d8ed2e2691bda794b4181a55fe1d9aaa7c0926f4c0f954b62c4cec2bc62b77a9d5264770c1d6fd4d8abeb54ff1ce1c05c4cab7cd396ffbfd5e4989b896a8d550357ea8dcba77111a50b2fd0522bad28608fa6a6028f8fa8bdf495cda1266f2587f672c3b5caaff739ae386532cbd03ae75b72915a2a55b2cf6a75346ca371c8c9d6c1357fe23a1484c8ca68efb7a9de8111da341f73d3601c203a9035dcd25d86bd2cb8158d86091a324178fe7712b8ae8d3698e522e3e471b779ee39078c52326d77ae639f0a005f0d212bbdad06ea861d97066b979c6e3a31337e6802da256167e629846597828754022e9b171f6d541557dc24faaaf17db34c5ce2483cda7fe4d15e4e62114073c87405c582c50cc53cd0b76776ec4bb
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.0 $
# $Date: 2024/11/27 $
#
# description : This .audit is designed against the CIS MongoDB 6 Benchmark 1.2.0
#
#<ui_metadata>
#<display_name>CIS MongoDB 6 v1.2.0 L1 MongoDB</display_name>
#<spec>
#  <type>CIS</type>
#  <name>MongoDB 6</name>
#  <profile>L1 DB</profile>
#  <version>1.2.0</version>
#  <link>https://workbench.cisecurity.org/benchmarks/15675</link>
#</spec>
#<labels>cis,mongodb_6</labels>
#<benchmark_refs>CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#</ui_metadata>

<check_type:"MongoDB">

<custom_item>
  description : "3.1 Ensure least privilege for database accounts"
  info        : "MongoDB grants access to data and commands through \"role-based\" approach, MongoDB is shipped with built-in roles that provide the different levels of access commonly needed in a database system. In addition, you can create custom-roles.

The following roles provide the ability to assign any user any privilege on any database, which means that users with one of these roles can assign themselves any privilege on any database:

dbOwner role, when scoped to the admin database userAdmin role, when scoped to the admin database userAdminAnyDatabase role

Ensuring highly privileged Roles are granted only for database administrators, and roles are not scoped to \"admin\" databases will reduce attack surface and follows the least privilege principle.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "If any accounts were listed with built in-roles:

dbOwner
userAdmin
userAdminAnyDatabase

in \"admin\" database role then drop them."
  reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|4.3,CSCv8|5.4,CSF|PR.AC-4,CSF2.0|PR.AA-05,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/benchmarks/15675"
  regex       : ".*"
  expect      : "^Manual Review Required$"
  collection  : 'admin.$cmd'
  query       : '{"usersInfo": 1 }'
  severity    : MEDIUM
</custom_item>

<if>
  <condition auto:"WARNING" type:"AND">
    <custom_item>
      description : "users"
      regex       : ".*"
      expect      : "^Manual Review Required$"
      collection  : 'admin.$cmd'
      query       : '{"usersInfo": 1 }'
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      description : "roles"
      regex       : ".*"
      expect      : "^Manual Review Required$"
      collection  : "admin.$cmd"
      query       : '{"rolesInfo":1,"showPrivileges": true, "showBuiltinRoles": true}'
      severity    : MEDIUM
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "3.2 Ensure that role-based access control is enabled and configured appropriately"
      info        : "Role-based access control (RBAC) is a method of regulating access to resources based on the roles of individual users within an enterprise. A user is granted one or more roles that determine the user's access to database resources and operations. Outside of role assignments, the user has no access to the system. MongoDB can use RBAC to govern access to MongoDB systems. MongoDB does not enable authorization by default.

When properly implemented, RBAC enables users to carry out a wide range of authorized tasks by dynamically regulating their actions according to flexible functions. This allows an organization to control employees' access to all database tables through RBAC.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "- Establish roles for MongoDB.
 - Assign the appropriate privileges to each role.
 - Assign the appropriate users to each role.
 - Remove any individual privileges assigned to users that are now addressed by the roles.
 - See the reference below for more Information."
      reference   : "800-171|3.1.1,800-171|3.1.5,800-171|3.3.8,800-171|3.3.9,800-53|AC-2,800-53|AC-3,800-53|AC-6,800-53|AC-6(1),800-53|AC-6(7),800-53|AU-9(4),800-53r5|AC-2,800-53r5|AC-5,800-53r5|AC-6,800-53r5|AC-6(1),800-53r5|AC-6(7),800-53r5|AU-9(4),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(d),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.4.2(f),CN-L3|8.1.4.3(d),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.1.10.6(a),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSCv8|6.8,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,CSF|PR.DS-5,CSF|PR.PT-1,CSF|PR.PT-3,CSF2.0|DE.CM-01,CSF2.0|DE.CM-03,CSF2.0|PR.AA-01,CSF2.0|PR.AA-05,CSF2.0|PR.DS-10,CSF2.0|PR.IR-01,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),HIPAA|164.312(b),ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.9.2.5,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.4,ISO/IEC-27001|A.9.4.5,ISO/IEC-27001|A.12.4.2,ITSG-33|AC-2,ITSG-33|AC-3,ITSG-33|AC-6,ITSG-33|AC-6(1),ITSG-33|AU-9(4),ITSG-33|AU-9(4)(a),ITSG-33|AU-9(4)(b),LEVEL|1M,NESA|M1.1.3,NESA|M1.2.2,NESA|M5.2.3,NESA|M5.5.2,NESA|T4.2.1,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.4.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM1,NIAv2|AM3,NIAv2|AM23f,NIAv2|AM28,NIAv2|AM31,NIAv2|GS3,NIAv2|GS4,NIAv2|GS8c,NIAv2|NS5j,NIAv2|SM5,NIAv2|SM6,NIAv2|SS13c,NIAv2|SS14e,NIAv2|SS15c,NIAv2|SS29,NIAv2|VL3b,PCI-DSSv3.2.1|7.1.2,PCI-DSSv3.2.1|10.5,PCI-DSSv3.2.1|10.5.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,PCI-DSSv4.0|10.3.2,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
      see_also    : "https://workbench.cisecurity.org/benchmarks/15675"
      show_output : YES
    </report>
  </then>
</if>

<custom_item>
  description : "3.4 Ensure that each role for each MongoDB database is needed and grants only the necessary privileges"
  info        : "Reviewing all roles periodically and eliminating unneeded roles as well as unneeded privileges from necessary roles helps minimize the privileges that each user has.

Although role-based access control (RBAC) has many advantages for regulating access to resources, over time some roles may no longer be needed, and some roles may grant privileges that are no longer needed.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
  solution    : "To revoke specified privileges from the user-defined role on the database where the command is run. The revokePrivilegesFromRole command has the following syntax:"
  reference   : "800-171|3.1.5,800-171|3.1.6,800-53|AC-6(2),800-53|AC-6(5),800-53r5|AC-6(2),800-53r5|AC-6(5),CN-L3|7.1.3.2(b),CN-L3|7.1.3.2(g),CN-L3|8.1.4.2(d),CN-L3|8.1.10.6(a),CSCv7|14.6,CSCv8|5.4,CSF|PR.AC-4,CSF2.0|PR.AA-05,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.3,ITSG-33|AC-6(2),ITSG-33|AC-6(5),LEVEL|1M,NESA|T5.1.1,NESA|T5.2.2,NESA|T5.6.1,NIAv2|AM1,NIAv2|AM23f,NIAv2|AM32,NIAv2|AM33,NIAv2|SS13c,NIAv2|SS15c,NIAv2|VL3a,PCI-DSSv3.2.1|7.1.2,PCI-DSSv4.0|7.2.1,PCI-DSSv4.0|7.2.2,QCSC-v1|5.2.2,QCSC-v1|6.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|5.1,TBA-FIISB|31.4.2,TBA-FIISB|31.4.3"
  see_also    : "https://workbench.cisecurity.org/benchmarks/15675"
  regex       : ".*"
  expect      : "^Manual Review Required$"
  collection  : "admin.$cmd"
  query       : '{"rolesInfo":1,"showPrivileges": true, "showBuiltinRoles": true}'
  severity    : MEDIUM
</custom_item>

</check_type>
