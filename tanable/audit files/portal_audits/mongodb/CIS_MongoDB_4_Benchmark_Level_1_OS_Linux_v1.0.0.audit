#TRUSTED 961a9097519b5304eb1051e899170ae2517c571f439dc47efccb35de0068146c64ec0190220ca141b0c74436bf289f5344725221066598eb5729bf913db337d4249e41623e4fbeb05e8d2b8d5ef736e5fd71e58ead0b92b84ea96fe71ed1c167d56e87a1ece553c6997a81c7c286e2b104a080a0308eff5f9741ea311d8d0e619e5ce9043860100b154600dc172245b401e8ad0d703890914ab6f81da773437a419949de2b3e1905bc14612230545eca976c37f4807345306a748bfad50c06bb4355de5621351dd4d460f5ad84f2f84be5940909a53f955b3f455abc6aae9eba8987d8ce5c0ba70bd878144df447454c372276130bce4567fa4aa6dc101562e328ebc1e12098643f5cf18c72e5ab8c0ca227bcdc909065fc38d00fd796e8959c712da0b8e077dec1b816d69084747a1a84f61d24c333fe32c75777dca49e9fb56f8edf556c82f11b6f470126ce29e3a1d92c5234ffdad843939654196ca59eaa0070da0a997e5f3a59e8218f23eabd74236f7d97306d0eda316d99a6e1cea367a6aa2435fb065a937119993a476e990e6b8fea35a603ee55f1cd8cdfd71172e89a260409bf88a93be433396731a862e7c4380be6f88b3d676dc77c160599935590717affa6f7c31e30e10b3e22470bb9e30161e68a310734a0db598955cffc1a1e52f0a31ef97440fb6fae72ee6c2abfdff2311cf0ba432f1113e2b039cdb8da
#TRUST-RSA-SHA256 589e0645eb2486e3c179eec2b097cf34e44c66957eb2fe62b8dbce5e92f01b378565b35159e6f76025e28fee30e0d9bb9c31b97761865bde419424409f4406cf92e555f98dff4f22d3178b50980cf28cf901de78b7a2e589ce8b86aedbe7b1df0088464ef42a242edcf3af075edab5142752813c21731419d422f9017c89d3dea4b3d9a3bbdff4501442e1c853a9b082463078b27f6c69427d267f4430ec9ba70d405700479f8acc3070daf513440d52303a9312a849b9de332ecbb2b3bd2e684214e5ccdbf146cee6856526c27c79e308e439be2da2d42cd36abb66d361000caca515bd4803c3b607a995e6749b645fe5d658924377b989aaa357f5dd33eda8dea20ec71aead03befc5f05c4786bcd88897e56c457682f3ec8d74072f8ddce0ff13d6d449e744d9c968fc590be0a616f28c5a8c7e1a15a3138ef15a6c8a31833fd5302435bb605fdb1f352b6bb6aa4d6f6301d1e97dd36e482a3eddc39d513c77f0f76278f4de70b28f75af7f681e00f80bf54fb0eaebce7c51e6f2662eab480ad4338e8f98f40297af54ce139204a6c14f3a0117e7739181b04b68523042ca664ae570ca04b0f13474ef5b9f5c80be9f4b3a556ff38c2094b3035a180e3abaefd30bdc8a62443c653215244a2c86e3f9533d3c85b1cbdcd1a1c39c75356e784e987cf122de6e5184f2af3f44b31554e78869fb021fb2506e9f6cb4071e8230
#
# This script is Copyright (C) 2004-2024 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.13 $
# $Date: 2024/06/17 $
#
# Description : This document implements the security configuration as recommended by the
#               CIS MongoDB 4 benchmark v1.0.0
#
#<ui_metadata>
#<display_name>CIS MongoDB 4 L1 OS Linux v1.0.0</display_name>
#<spec>
#  <type>CIS</type>
#  <name>MongoDB 4</name>
#  <profile>L1 OS Linux</profile>
#  <version>1.0.0</version>
#  <link>https://workbench.cisecurity.org/files/3463</link>
#</spec>
#<labels>mongodb,mongodb_4,cis,linux_mongodb_4,update_20230227</labels>
#<benchmark_refs>CCE,CIS_Recommendation,CSCv6,CSCv7,CSCv8,LEVEL</benchmark_refs>
#<variables>
#  <variable>
#    <name>MONGOD_CONF_FULL_PATH</name>
#    <default>/etc/mongod.conf</default>
#    <description>Full path to the mongodb conf file</description>
#    <info>Full path to the mongodb conf file</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>MONGO_BINARY_FULL_PATH</name>
#    <default>/usr/bin/mongo</default>
#    <description>Full path to the mongo binary</description>
#    <info>Full path to the mongo binary</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>MONGODB_DBPATH</name>
#    <default>/var/lib/mongodb</default>
#    <description>Full path to the mongodb database files</description>
#    <info>Full path to the mongodb database files</info>
#    <value_type>UNIX_FILE_PATH</value_type>
#  </variable>
#  <variable>
#    <name>MONGO_USER</name>
#    <default>mongodb</default>
#    <description>User that owns the mongodb database files</description>
#    <info>User that owns the mongodb database files</info>
#    <value_type>UNIX_ACCT</value_type>
#  </variable>
#  <variable>
#    <name>MONGO_GROUP</name>
#    <default>mongodb</default>
#    <description>Group that owns the mongodb database files</description>
#    <info>Group that owns the mongodb database files</info>
#    <value_type>UNIX_ACCT</value_type>
#  </variable>
#  <variable>
#    <name>MONGODB_VERSION</name>
#    <default>4</default>
#    <description>MongoDB Version</description>
#    <info>MongoDB Version</info>
#    <value_type>STRING</value_type>
#  </variable>
#</variables>
#</ui_metadata>

<check_type:"Unix">

<if>
  <condition type:"AND">
    <custom_item>
      type        : CMD_EXEC
      description : "Check for MongoDB 4"
      cmd         : "mongo --version"
      expect      : "MongoDB shell version v@MONGODB_VERSION@"
    </custom_item>
  </condition>

  <then>
    <report type:"PASSED">
      description : "CIS_MongoDB_4_Benchmark_Level_1_OS_Linux_v1.0.0.audit from CIS MongoDB 4 Benchmark"
      see_also    : "https://workbench.cisecurity.org/files/3463"
    </report>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "2.1 Ensure Authentication is configured"
      info        : "This setting ensures that all clients, users, servers are required to authenticate before being granted access to the MongoDB database.

Authentication is the process of verifying the identity of a client. When access control, i.e. authorization, is enabled, MongoDB requires all clients to authenticate themselves in order to determine their access.

from MongoDB documentation

Authentication Mechanisms

MongoDB supports a number of authentication mechanisms that clients can use to verify their identity. These mechanisms allow MongoDB to integrate into your existing authentication system.

MongoDB supports multiple authentication mechanisms:

SCRAM (Default)

x.509 Certificate Authentication.

Certificate Authority

For production use, your MongoDB deployment should use valid certificates generated and signed by a certificate authority. You or your organization can generate and maintain an independent certificate authority, or use certificates generated by third-party TLS/SSL vendors.

In addition to supporting the aforementioned mechanisms, MongoDB Enterprise also supports the following mechanisms:

LDAP proxy authentication

Kerberos authentication.

Rationale:

Failure to authenticate clients, users, servers can enable unauthorized access to the MongoDB database and can prevent tracing actions back to their sources.

It's highly recommended that password length and complexity also be in-place. When performing the traditional user/password authentication against MongoDB there is not in-place intrinsic password complexity check and there is no LOCKING mechanism with multiple failure logins. So, MongoDB is prone to brute force attacks compared to other database systems."
      solution    : "The authentication mechanism should be implemented before anyone accesses the MongoDB Server.
To enable the authentication mechanism:

Start the MongoDB instance without authentication.

mongod --port 27017 --dbpath /data/db1

Or

mongod.exe --port 27017 --dbpath db1

Create the system user administrator, ensuring that its password meets organizationally-defined password in terms of length and complexity requirements as there is no in-place locking mechanism for multiple failed login attempts against MongoDB.

use admin
db.createUser(
  {
    user: 'MongoAdmin',
    pwd: 'password',
    roles: [ { role: 'root', db: 'admin' } ]
  }
)

Open mongod.conf and change for authorization value to enabled:

security:
    authorization: 'enabled'

Restart the MongoDB instance

service mongod restart

Default Value:

By default, authorization is set to disable."
      reference   : "800-171|3.5.2,800-171|3.5.3,800-53|IA-2(1),800-53|IA-2(2),800-53|IA-5(1),800-53r5|IA-2(1),800-53r5|IA-2(2),800-53r5|IA-5(1),CN-L3|7.1.2.7(b),CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.3,CSCv8|5.2,CSCv8|6.3,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2(1),ITSG-33|IA-2(2),ITSG-33|IA-5(1),LEVEL|1A,NESA|T5.2.3,NESA|T5.4.2,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,NIAv2|AM36,NIAv2|VL3c,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|1.2,SWIFT-CSCv1|4.1,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also    : "https://workbench.cisecurity.org/files/3463"
      file        : "@MONGOD_CONF_FULL_PATH@"
      regex       : "^[\\s]*authorization[\\s]*:"
      expect      : "^[\\s]*authorization[\\s]*:[\\s]*(?i)enabled(?-i)"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "2.2 Ensure that MongoDB does not bypass authentication via the localhost exception"
      info        : "MongoDB should not be set to bypass authentication via the localhost exception. The localhost exception allows the user to enable authorization before creating the first user in the system. When active, the localhost exception allows all connections from the localhost interface to have full access to that instance. The exception applies only when there are no users created in the MongoDB instance.

Note: This recommendation only applies when there are no users created in the MongoDB instance.

Rationale:

Disabling this exception will prevent unauthorized local access to the MongoDB database. It will also ensure the traceability of each database activity to a specific user. Localhost Exception allows direct connect to Mongod's without any UN/PW."
      solution    : "To disable local authentication on the MongoDB database.
Type OS Console Command

mongod --setParameter enableLocalhostAuthBypass=0

or
To manually configure use the setParameter option in the mongo configuration file to set it to false.

setParameter:
  enableLocalhostAuthBypass: false

Default Value:

By default, localhost exception value (enableLocalhostAuthBypass) is true."
      reference   : "800-171|3.5.3,800-53|IA-2(1),800-53|IA-2(2),800-53r5|IA-2(1),800-53r5|IA-2(2),CN-L3|7.1.2.7(b),CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.3,CSCv8|6.3,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-2(1),ITSG-33|IA-2(2),LEVEL|1A,NESA|T5.4.2,NIAv2|AM2,NIAv2|AM8,NIAv2|AM14b,NIAv2|AM36,NIAv2|VL3c,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|1.2,TBA-FIISB|35.1,TBA-FIISB|36.1"
      see_also    : "https://workbench.cisecurity.org/files/3463"
      file        : "@MONGOD_CONF_FULL_PATH@"
      regex       : "^[\\s]*enableLocalhostAuthBypass[\\s]*:"
      expect      : "^[\\s]*enableLocalhostAuthBypass[\\s]*:[\\s]*(?i)false(?-i)"
    </custom_item>

    <if>
      <condition type:"AND">
        <custom_item>
          type        : CMD_EXEC
          description : "Check for isdbgrid / sharding"
          cmd         : "@MONGO_BINARY_FULL_PATH@ --eval \"db.hello()\""
          expect      : "\"msg\"[\\s]*:[\\s]*\"isdbgrid\""
        </custom_item>
      </condition>

      <then>
        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "2.3 Ensure authentication is enabled in the sharded cluster - PEMKeyFile"
          info        : "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.

    With keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.

    For Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.

    For Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.

    Rationale:

    Enforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access."
          solution    : "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.
    MongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.
    Change the configuration file /etc/mongod.conf on each host, adding the following rows:

    net:
       port: 27017
       tls:
          mode: requireSSL
          PEMKeyFile: /etc/mongodb/ssl/server1.pem
          CAFile: /etc/mongodb/ssl/mongoCA.crt
          clusterFile: /etc/mongodb/ssl/server1.pem
       security:
          authorization: enabled
          clusterAuthMode: x509

    Restart the daemon

    sudo service mongodb restart




    To enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)


    Generate A Key File

    On each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:

    keyFile = /srv/mongodb/keyfile

    When starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.

    Default Value:

    Not configured"
          reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2"
          see_also    : "https://workbench.cisecurity.org/files/3463"
          file        : "@MONGOD_CONF_FULL_PATH@"
          regex       : "^[\\s]*PEMKeyFile[\\s]*:"
          expect      : "^[\\s]*PEMKeyFile[\\s]*:[\\s]*.+$"
        </custom_item>

        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "2.3 Ensure authentication is enabled in the sharded cluster - clusterFile"
          info        : "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.

    With keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.

    For Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.

    For Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.

    Rationale:

    Enforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access."
          solution    : "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.
    MongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.
    Change the configuration file /etc/mongod.conf on each host, adding the following rows:

    net:
       port: 27017
       tls:
          mode: requireSSL
          PEMKeyFile: /etc/mongodb/ssl/server1.pem
          CAFile: /etc/mongodb/ssl/mongoCA.crt
          clusterFile: /etc/mongodb/ssl/server1.pem
       security:
          authorization: enabled
          clusterAuthMode: x509

    Restart the daemon

    sudo service mongodb restart




    To enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)


    Generate A Key File

    On each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:

    keyFile = /srv/mongodb/keyfile

    When starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.

    Default Value:

    Not configured"
          reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2"
          see_also    : "https://workbench.cisecurity.org/files/3463"
          file        : "@MONGOD_CONF_FULL_PATH@"
          regex       : "^[\\s]*clusterFile[\\s]*:"
          expect      : "^[\\s]*clusterFile[\\s]*:[\\s]*.+$"
        </custom_item>

        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "2.3 Ensure authentication is enabled in the sharded cluster - CAFile"
          info        : "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.

    With keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.

    For Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.

    For Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.

    Rationale:

    Enforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access."
          solution    : "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.
    MongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.
    Change the configuration file /etc/mongod.conf on each host, adding the following rows:

    net:
       port: 27017
       tls:
          mode: requireSSL
          PEMKeyFile: /etc/mongodb/ssl/server1.pem
          CAFile: /etc/mongodb/ssl/mongoCA.crt
          clusterFile: /etc/mongodb/ssl/server1.pem
       security:
          authorization: enabled
          clusterAuthMode: x509

    Restart the daemon

    sudo service mongodb restart




    To enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)


    Generate A Key File

    On each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:

    keyFile = /srv/mongodb/keyfile

    When starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.

    Default Value:

    Not configured"
          reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2"
          see_also    : "https://workbench.cisecurity.org/files/3463"
          file        : "@MONGOD_CONF_FULL_PATH@"
          regex       : "^[\\s]*CAFile[\\s]*:"
          expect      : "^[\\s]*CAFile[\\s]*:[\\s]*.+$"
        </custom_item>

        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "2.3 Ensure authentication is enabled in the sharded cluster - clusterAuthMode"
          info        : "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.

    With keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.

    For Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.

    For Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.

    Rationale:

    Enforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access."
          solution    : "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.
    MongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.
    Change the configuration file /etc/mongod.conf on each host, adding the following rows:

    net:
       port: 27017
       tls:
          mode: requireSSL
          PEMKeyFile: /etc/mongodb/ssl/server1.pem
          CAFile: /etc/mongodb/ssl/mongoCA.crt
          clusterFile: /etc/mongodb/ssl/server1.pem
       security:
          authorization: enabled
          clusterAuthMode: x509

    Restart the daemon

    sudo service mongodb restart




    To enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)


    Generate A Key File

    On each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:

    keyFile = /srv/mongodb/keyfile

    When starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.

    Default Value:

    Not configured"
          reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2"
          see_also    : "https://workbench.cisecurity.org/files/3463"
          file        : "@MONGOD_CONF_FULL_PATH@"
          regex       : "^[\\s]*clusterAuthMode[\\s]*:"
          expect      : "^[\\s]*clusterAuthMode[\\s]*:[\\s]*x509[\\s]*$"
        </custom_item>

        <custom_item>
          type        : FILE_CONTENT_CHECK
          description : "2.3 Ensure authentication is enabled in the sharded cluster - authenticationMechanisms"
          info        : "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.

    With keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.

    For Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.

    For Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.

    Rationale:

    Enforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access."
          solution    : "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.
    MongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.
    Change the configuration file /etc/mongod.conf on each host, adding the following rows:

    net:
       port: 27017
       tls:
          mode: requireSSL
          PEMKeyFile: /etc/mongodb/ssl/server1.pem
          CAFile: /etc/mongodb/ssl/mongoCA.crt
          clusterFile: /etc/mongodb/ssl/server1.pem
       security:
          authorization: enabled
          clusterAuthMode: x509

    Restart the daemon

    sudo service mongodb restart




    To enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)


    Generate A Key File

    On each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:

    keyFile = /srv/mongodb/keyfile

    When starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.

    Default Value:

    Not configured"
          reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2"
          see_also    : "https://workbench.cisecurity.org/files/3463"
          file        : "@MONGOD_CONF_FULL_PATH@"
          regex       : "^[\\s]*authenticationMechanisms[\\s]*:"
          expect      : "^[\\s]*authenticationMechanisms[\\s]*:[\\s]*MONGODB-X509[\\s]*$"
        </custom_item>
      </then>

      <else>
        <report type:"PASSED">
          description : "2.3 Ensure authentication is enabled in the sharded cluster - PEMKeyFile"
          info        : "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.

    With keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.

    For Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.

    For Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.

    Rationale:

    Enforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access.

    NOTE: Nessus has not identified that sharding is enabled for this target."
          solution    : "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.
    MongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.
    Change the configuration file /etc/mongod.conf on each host, adding the following rows:

    net:
       port: 27017
       tls:
          mode: requireSSL
          PEMKeyFile: /etc/mongodb/ssl/server1.pem
          CAFile: /etc/mongodb/ssl/mongoCA.crt
          clusterFile: /etc/mongodb/ssl/server1.pem
       security:
          authorization: enabled
          clusterAuthMode: x509

    Restart the daemon

    sudo service mongodb restart




    To enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)


    Generate A Key File

    On each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:

    keyFile = /srv/mongodb/keyfile

    When starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.

    Default Value:

    Not configured"
          reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2"
          see_also    : "https://workbench.cisecurity.org/files/3463"
        </report>

        <report type:"PASSED">
          description : "2.3 Ensure authentication is enabled in the sharded cluster - clusterFile"
          info        : "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.

    With keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.

    For Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.

    For Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.

    Rationale:

    Enforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access.

    NOTE: Nessus has not identified that sharding is enabled for this target."
          solution    : "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.
    MongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.
    Change the configuration file /etc/mongod.conf on each host, adding the following rows:

    net:
       port: 27017
       tls:
          mode: requireSSL
          PEMKeyFile: /etc/mongodb/ssl/server1.pem
          CAFile: /etc/mongodb/ssl/mongoCA.crt
          clusterFile: /etc/mongodb/ssl/server1.pem
       security:
          authorization: enabled
          clusterAuthMode: x509

    Restart the daemon

    sudo service mongodb restart




    To enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)


    Generate A Key File

    On each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:

    keyFile = /srv/mongodb/keyfile

    When starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.

    Default Value:

    Not configured"
          reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2"
          see_also    : "https://workbench.cisecurity.org/files/3463"
        </report>

        <report type:"PASSED">
          description : "2.3 Ensure authentication is enabled in the sharded cluster - CAFile"
          info        : "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.

    With keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.

    For Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.

    For Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.

    Rationale:

    Enforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access.

    NOTE: Nessus has not identified that sharding is enabled for this target."
          solution    : "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.
    MongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.
    Change the configuration file /etc/mongod.conf on each host, adding the following rows:

    net:
       port: 27017
       tls:
          mode: requireSSL
          PEMKeyFile: /etc/mongodb/ssl/server1.pem
          CAFile: /etc/mongodb/ssl/mongoCA.crt
          clusterFile: /etc/mongodb/ssl/server1.pem
       security:
          authorization: enabled
          clusterAuthMode: x509

    Restart the daemon

    sudo service mongodb restart




    To enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)


    Generate A Key File

    On each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:

    keyFile = /srv/mongodb/keyfile

    When starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.

    Default Value:

    Not configured"
          reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2"
          see_also    : "https://workbench.cisecurity.org/files/3463"
        </report>

        <report type:"PASSED">
          description : "2.3 Ensure authentication is enabled in the sharded cluster - clusterAuthMode"
          info        : "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.

    With keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.

    For Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.

    For Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.

    Rationale:

    Enforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access.

    NOTE: Nessus has not identified that sharding is enabled for this target."
          solution    : "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.
    MongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.
    Change the configuration file /etc/mongod.conf on each host, adding the following rows:

    net:
       port: 27017
       tls:
          mode: requireSSL
          PEMKeyFile: /etc/mongodb/ssl/server1.pem
          CAFile: /etc/mongodb/ssl/mongoCA.crt
          clusterFile: /etc/mongodb/ssl/server1.pem
       security:
          authorization: enabled
          clusterAuthMode: x509

    Restart the daemon

    sudo service mongodb restart




    To enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)


    Generate A Key File

    On each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:

    keyFile = /srv/mongodb/keyfile

    When starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.

    Default Value:

    Not configured"
          reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2"
          see_also    : "https://workbench.cisecurity.org/files/3463"
        </report>

        <report type:"PASSED">
          description : "2.3 Ensure authentication is enabled in the sharded cluster - authenticationMechanisms"
          info        : "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster.

    With keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster.

    For Production Environment: x.509 certificate authentication with secure TSL/SSL connection must be used for authentication.

    For Development Purpose: Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.

    Rationale:

    Enforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access.

    NOTE: Nessus has not identified that sharding is enabled for this target."
          solution    : "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords.
    MongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password.
    Change the configuration file /etc/mongod.conf on each host, adding the following rows:

    net:
       port: 27017
       tls:
          mode: requireSSL
          PEMKeyFile: /etc/mongodb/ssl/server1.pem
          CAFile: /etc/mongodb/ssl/mongoCA.crt
          clusterFile: /etc/mongodb/ssl/server1.pem
       security:
          authorization: enabled
          clusterAuthMode: x509

    Restart the daemon

    sudo service mongodb restart




    To enable authentication in the sharded cluster, perform the following steps:(Only for Development Purpose)


    Generate A Key File

    On each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file's path and then start the component with this command:

    keyFile = /srv/mongodb/keyfile

    When starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file's path.

    Default Value:

    Not configured"
          reference   : "800-171|3.4.1,800-53|CM-8,800-53r5|CM-8,CN-L3|8.1.10.2(a),CN-L3|8.1.10.2(b),CSCv7|1.8,CSCv8|6.6,CSF|DE.CM-7,CSF|ID.AM-1,CSF|ID.AM-2,CSF|PR.DS-3,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|CM-8,LEVEL|1A,NESA|T1.2.1,NESA|T1.2.2"
          see_also    : "https://workbench.cisecurity.org/files/3463"
        </report>
      </else>
    </if>

    <custom_item>
      type        : CMD_EXEC
      description : "3.3 Ensure that MongoDB is run using a non-privileged, dedicated service account"
      info        : "The MongoDB service should not be run using a privileged account such as 'root' because this unnecessarily exposes the operating system to high risk.

Rationale:

Using a non-privileged, dedicated service account restricts the database from accessing the critical areas of the operating system which are not required by the MongoDB. This will also mitigate the potential for unauthorized access via a compromised, privileged account on the operating system.

NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance."
      solution    : "Create a dedicated user for performing MongoDB database activity.

Set the Database data files, the keyfile, and the SSL private key files to only be readable by the mongod/mongos user.

Set the log files to only be writable by the mongod/mongos user and readable only by root.

Default Value:

Not configured"
      reference   : "800-171|3.1.1,800-53|AC-2,800-53r5|AC-2,CN-L3|7.1.3.2(d),CSCv7|4.3,CSCv8|5.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1M,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e,QCSC-v1|5.2.2,QCSC-v1|8.2.1,QCSC-v1|13.2,QCSC-v1|15.2"
      see_also    : "https://workbench.cisecurity.org/files/3463"
      cmd         : "ps -ef | grep -E \"mongos|mongod\""
      expect      : "Manual Review Required"
      severity    : MEDIUM
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "4.2 Ensure Weak Protocols are Disabled"
      info        : "Servers can be configured to disable specific TLS/SSL protocol versions which may be vulnerable to exploitation and/or lack features which improve the level of security as provided by newer versions of the protocol.

Rationale:

The TLSv1.0 protocol is vulnerable to the BEAST attack when used in CBC mode (October 2011). Unfortunately, the TLSv1.0 uses CBC modes for all of the block mode ciphers, which only leaves the RC4 streaming cipher which is also weak and is not recommended. Therefore, it is recommended that the TLSv1.0 protocol be disabled. The TLSv1.1 protocol does not support Authenticated Encryption with Associated Data (AEAD) which is designed to simultaneously provide confidentiality, integrity, and authenticity.

The NIST SP 800-52r2 guidelines for TLS configuration require that TLS 1.2 is configured with FIPS-based cipher suites be supported by all government TLS servers and clients and requires support of TLS 1.3 by January 1, 2024. A September 2018 IETF draft also depreciates the usage of TLSv1.0 and TLSv1.1 as shown in the references.

Impact:

If an attempt to connect using a disabled protocol is made the connection attempt will fail and may have unanticipated impact on clients attempting to establish the connection."
      solution    : "For mongod ('Primary daemon process for the MongoDB system')
In the configuration file /etc/mongod.conf, set the disabledProtocols option to to include TLS1_0,TLS1_1:

net:
  ssl:
    mode: requireSSL
    PEMKeyFile: /etc/ssl/mongodb.pem
    CAFile: /etc/ssl/caToValidateClientCertificates.pem
    disabledProtocols: TLS1_0,TLS1_1

And restart monogdb instance with

mongod --config /etc/mongod.conf

Or

mongod --sslDisabledProtocols 'TLS1_0,TLS1_1

Default Value:

TLS1_0 if TLS 1.1+ is available on the system."
      reference   : "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3463"
      file        : "@MONGOD_CONF_FULL_PATH@"
      regex       : "^[\\s]*disabledProtocols[\\s]*:"
      expect      : "^[\\s]*disabledProtocols[\\s]*:[\\s]*(?=.*TLS1_0)(?=.*TLS1_1).*"
    </custom_item>

    <custom_item>
      type        : FILE_CONTENT_CHECK
      description : "4.3 Ensure Encryption of Data in Transit TLS or SSL (Transport Encryption)"
      info        : "Use TLS or SSL to protect all incoming and outgoing connections. This should include using TLS or SSL to encrypt communication between the mongod and mongos components of a MongoDB client as well as between all applications and MongoDB.

MongoDB supports TLS/SSL (Transport Layer Security/Secure Sockets Layer) to encrypt all of MongoDB's network traffic. TLS/SSL ensures that MongoDB network traffic is only readable by the intended client.

Please note: As of MongoDB version 4.2 SSL has been deprecated.

Also, starting in MongoDB version 4.0, MongoDB disables support for TLS 1.0 encryption on systems where TLS 1.1+ is available.

Rationale:

This prevents sniffing of cleartext traffic between MongoDB components or performing a man-in-the-middle attack for MongoDB."
      solution    : "Configure MongoDB servers to require the use of SSL or TLS to encrypt all MongoDB network communications.
To implement SSL or TLS to encrypt all MongoDB network communication, perform the following steps:
For mongod ('Primary daemon process for the MongoDB system')
In the configuration file /etc/mongod.conf, set the PEMKeyFile option to the certificate file's path and then start the component with this command:

net:
   tls:
      mode: requireTLS
      certificateKeyFile: /etc/ssl/mongodb.pem
      CAFile: /etc/ssl/caToValidateClientCertificates.pem

And restart monogdb instance with

mongod --config /etc/mongod.conf

Default Value:

Not configured"
      reference   : "800-171|3.13.8,800-53|SC-8,800-53r5|SC-8,CN-L3|8.1.2.2(a),CN-L3|8.1.2.2(b),CN-L3|8.1.4.7(a),CN-L3|8.1.4.8(a),CN-L3|8.2.4.5(c),CN-L3|8.2.4.5(d),CN-L3|8.5.2.2,CSCv7|14.4,CSF|PR.DS-2,CSF|PR.DS-5,GDPR|32.1.a,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(e)(1),HIPAA|164.312(e)(2)(i),ITSG-33|SC-8,ITSG-33|SC-8a.,LEVEL|1A,NESA|T4.3.1,NESA|T4.3.2,NESA|T4.5.1,NESA|T4.5.2,NESA|T7.3.3,NESA|T7.4.1,NIAv2|IE8,NIAv2|IE9,NIAv2|IE12,NIAv2|NS29,NIAv2|SS24,PCI-DSSv3.2.1|2.3,PCI-DSSv3.2.1|4.1,PCI-DSSv4.0|2.2.7,PCI-DSSv4.0|4.2.1,QCSC-v1|5.2.2,QCSC-v1|6.2"
      see_also    : "https://workbench.cisecurity.org/files/3463"
      file        : "@MONGOD_CONF_FULL_PATH@"
      regex       : "^[\\s]*mode[\\s]*:"
      expect      : "^[\\s]*mode[\\s]*:[\\s]*requireTLS"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "5.1 Ensure that system activity is audited"
      info        : "Track access and changes to database configurations and data. MongoDB Enterprise includes a system auditing facility that can record system events (e.g. user operations, connection events) on a MongoDB instance. These audit records permit forensic analysis and allow administrators to verify proper controls.

Rationale:

System level logs can be handy while troubleshooting an operational problem or handling a security incident."
      solution    : "Set the value of auditLog.destination to the appropriate value from the following options:
syslog
To enable auditing and print audit events to syslog

mongod --dbpath data/db --auditDestination syslog

console
To enable auditing and print audit events to standard output (i.e., stdout)

mongod --dbpath data/db --auditDestination console

Json File
To enable auditing and print audit events to a file in JSON format. Printing audit events to file in JSON format degrades server performance more than printing to a file in BSON format.

mongod --dbpath data/db --auditDestination file --auditFormat JSON --auditPath data/db/auditLog.json

Bson File
To enable auditing and print audit events to a file in BSON binary format

mongod --dbpath data/db --auditDestination file --auditFormat BSON --auditPath data/db/auditLog.bson

Default Value:

Not configured"
      reference   : "800-171|3.3.1,800-171|3.3.2,800-53|AU-3,800-53|AU-12,800-53r5|AU-3,800-53r5|AU-12,CN-L3|7.1.2.3(a),CN-L3|7.1.2.3(b),CN-L3|7.1.3.3(a),CN-L3|8.1.4.3(b),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-3,ITSG-33|AU-12,LEVEL|1A,NESA|T3.6.2,NIAv2|AM34a,NIAv2|AM34b,NIAv2|AM34c,NIAv2|AM34d,NIAv2|AM34e,NIAv2|AM34f,NIAv2|AM34g,PCI-DSSv3.2.1|10.1,PCI-DSSv3.2.1|10.3,PCI-DSSv3.2.1|10.3.1,PCI-DSSv3.2.1|10.3.2,PCI-DSSv3.2.1|10.3.3,PCI-DSSv3.2.1|10.3.4,PCI-DSSv3.2.1|10.3.5,PCI-DSSv3.2.1|10.3.6,PCI-DSSv4.0|10.2.2,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|13.2,SWIFT-CSCv1|6.4"
      see_also    : "https://workbench.cisecurity.org/files/3463"
      cmd         : "/usr/bin/grep -A4 'auditLog' @MONGOD_CONF_FULL_PATH@ | /usr/bin/grep 'destination'"
      expect      : "^[\\s]*auditLog.destination[\\s]*:[\\s]*(syslog|console|file)"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "6.1 Ensure that MongoDB uses a non-default port"
      info        : "Changing the default port used by MongoDB makes it harder for attackers to find the database and target it.

Rationale:

Standard ports are used in automated attacks and by attackers to verify which applications are running on a server.

Impact:

Hackers frequently scan IP addresses for commonly used ports, so it's not uncommon to use a different port to 'fly under the radar'. This is just to avoid detection, other than that there is no added safety by using a different port."
      solution    : "Change the port for MongoDB server to a number other than 27017.
In mongod.conf edit the below lines

# network interfaces
net:
  port: $Orginasation Defined port
  bindIp: $Orginasation Defined IP"
      reference   : "800-171|3.14.6,800-171|3.14.7,800-53|SI-4,800-53r5|SI-4,CN-L3|7.1.3.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.10.6(f),CSCv7|9.2,CSF|DE.AE-1,CSF|DE.AE-2,CSF|DE.AE-3,CSF|DE.AE-4,CSF|DE.CM-1,CSF|DE.CM-5,CSF|DE.CM-6,CSF|DE.CM-7,CSF|DE.DP-2,CSF|DE.DP-3,CSF|DE.DP-4,CSF|DE.DP-5,CSF|ID.RA-1,CSF|PR.DS-5,CSF|PR.IP-8,CSF|RS.AN-1,CSF|RS.CO-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|SI-4,LEVEL|1A,NESA|M1.2.2,QCSC-v1|3.2,QCSC-v1|5.2.1,QCSC-v1|5.2.2,QCSC-v1|5.2.3,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2"
      see_also    : "https://workbench.cisecurity.org/files/3463"
      cmd         : "grep port: @MONGOD_CONF_FULL_PATH@ | grep 27017 | awk '{print} END {if (NR == 0) print \"pass\" ; else print \"fail\"}'"
      expect      : "^pass$"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "7.1 Ensure appropriate key file permissions are set - keyFile"
      info        : "In the Shared Cluster, the certificate or keyfile is utilized for authentications. Implementing proper file permissions on the certificate or keyfile will prevent unauthorized access to it.

Rationale:

Protecting the certificate/keyfile strengthens authentication in the sharded cluster and prevents unauthorized access to the MongoDB database."
      solution    : "Set the keyFile ownership to mongodb user and remove other permissions by executing these commands:

chmod 600 /keyfile
sudo chown mongodb:mongodb /keyfile

Default Value:

Not configured"
      reference   : "800-171|3.5.2,800-53|IA-5,800-53|IA-5(1),800-53r5|IA-5,800-53r5|IA-5(1),CSCv7|16.4,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,ITSG-33|IA-5(1),LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/files/3463"
      cmd         : "keyfile=$(/usr/bin/cat @MONGOD_CONF_FULL_PATH@ | /usr/bin/awk '/keyfile/ { print $2 }' | /usr/bin/sort -u); ls -l $keyfile"
      expect      : "-rw-------[\\s]+\\d+[\\s]+mongodb[\\s]+mongodb"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "7.1 Ensure appropriate key file permissions are set - PEMKeyFile"
      info        : "In the Shared Cluster, the certificate or keyfile is utilized for authentications. Implementing proper file permissions on the certificate or keyfile will prevent unauthorized access to it.

Rationale:

Protecting the certificate/keyfile strengthens authentication in the sharded cluster and prevents unauthorized access to the MongoDB database."
      solution    : "Set the keyFile ownership to mongodb user and remove other permissions by executing these commands:

chmod 600 /keyfile
sudo chown mongodb:mongodb /keyfile

Default Value:

Not configured"
      reference   : "800-171|3.5.2,800-53|IA-5,800-53|IA-5(1),800-53r5|IA-5,800-53r5|IA-5(1),CSCv7|16.4,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,ITSG-33|IA-5(1),LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/files/3463"
      cmd         : "pemkeyfile=$(/usr/bin/cat @MONGOD_CONF_FULL_PATH@ | /usr/bin/awk '/PEMKeyFile/ { print $2 }' | /usr/bin/sort -u); ls -l $pemkeyfile"
      expect      : "-rw-------[\\s]+\\d+[\\s]+mongodb[\\s]+mongodb"
    </custom_item>

    <custom_item>
      type        : CMD_EXEC
      description : "7.1 Ensure appropriate key file permissions are set - CAFile"
      info        : "In the Shared Cluster, the certificate or keyfile is utilized for authentications. Implementing proper file permissions on the certificate or keyfile will prevent unauthorized access to it.

Rationale:

Protecting the certificate/keyfile strengthens authentication in the sharded cluster and prevents unauthorized access to the MongoDB database."
      solution    : "Set the keyFile ownership to mongodb user and remove other permissions by executing these commands:

chmod 600 /keyfile
sudo chown mongodb:mongodb /keyfile

Default Value:

Not configured"
      reference   : "800-171|3.5.2,800-53|IA-5,800-53|IA-5(1),800-53r5|IA-5,800-53r5|IA-5(1),CSCv7|16.4,CSF|PR.AC-1,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(2)(i),HIPAA|164.312(d),ITSG-33|IA-5,ITSG-33|IA-5(1),LEVEL|1M,NESA|T5.2.3,QCSC-v1|5.2.2,QCSC-v1|13.2,SWIFT-CSCv1|4.1"
      see_also    : "https://workbench.cisecurity.org/files/3463"
      cmd         : "cafile=$(/usr/bin/cat @MONGOD_CONF_FULL_PATH@ | /usr/bin/awk '/CAFile/ { print $2 }' | /usr/bin/sort -u); ls -l $cafile"
      expect      : "-rw-------[\\s]+\\d+[\\s]+mongodb[\\s]+mongodb"
    </custom_item>

    <custom_item>
      type        : FILE_CHECK
      description : "7.2 Ensure appropriate database file permissions are set."
      info        : "MongoDB database files need to be protected using file permissions.

Rationale:

This will restrict unauthorized users from accessing the database."
      solution    : "Set ownership of the database file to mongodb user and remove other permissions using the following commands:

chmod 770 /var/lib/mongodb
chown mongodb:mongodb /var/lib/mongodb

Default Value:

Not configured"
      reference   : "800-171|3.1.1,800-53|AC-3,800-53r5|AC-3,CN-L3|8.1.4.2(f),CN-L3|8.1.4.11(b),CN-L3|8.1.10.2(c),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|14.6,CSF|PR.AC-4,CSF|PR.PT-3,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|1M,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,QCSC-v1|3.2,QCSC-v1|5.2.2,QCSC-v1|13.2,TBA-FIISB|31.1"
      see_also    : "https://workbench.cisecurity.org/files/3463"
      file        : "@MONGODB_DBPATH@"
      owner       : "@MONGO_USER@"
      mask        : "007"
      group       : "@MONGO_GROUP@"
    </custom_item>
  </then>

  <else>
    <report type:"WARNING">
      description : "CIS_MongoDB_4_Benchmark_Level_1_OS_Linux_v1.0.0.audit from CIS MongoDB 4 Benchmark"
      info        : "NOTE: Nessus has not identified that the chosen audit applies to the target device."
      see_also    : "https://workbench.cisecurity.org/files/3463"
    </report>
  </else>
</if>

</check_type>
