#TRUSTED 93f9e37b380a67455f83d4b6c6af5fac83bee25137f2ceb4180ff36c67865424ebf099537cea88b4222fe5b32defd33f3ced4b1c15544599e491584a27b0452cf6f26efdbf2aaeeff9aed299a1f885c92cba5c3cf3ec64cf23436d14f3bc8b38e79d45204b344f696cd47cdb3724b9d95271f2d863a5f0b580b069860676a60af602022b9ddb4991a187c1a2334bc949793df2582e5de64fb83746493f439e58bb34b40464a34e7b85dad14abb7984c91d84def079fc95922861d84152f3472bc86fbb87824efa9ecab2fa0b1f7430e9fa983ae5e725f8ed1b9d2adcf3996841e9d7ce88736f89500af1b2f64762c6f405089839122484acfdfd062327d6f7fc2521bddf64e34ab8029e200857975400ac6f285e567e8628db3cc4398b80c8614abb45767be8e21eb03b9b9fc205e7dc125af2433ff34873f52eea29fa88b28ce1c365afb125c56ddda390ba000debdde19ce52072df58b5ab19a6df1f0ad568dfc70af2c0dc679606fc9a9a17ba81cea42da8e1a8897c59313d7312d3259807848ff967d5eca0bfa35f1b6858a309d1f0bbf3b5cb4a837e3713741d7a65a635ef5a3b9862cff6760c6fb5c913492dacd3fa2d0c48edde9cd43de78ec42fcf41e31ec106db4b80fb05e6760686b7bcf705a7f9a7f1a9f09225afd448536c1c44a63727582ffec6cca79d684625f1300f7be8502ffd8b38661e3aab3513b5aa89
#TRUST-RSA-SHA256 8ef94ef9e8d81c2c97a1d2515a78eb6a72ca59b89d110f77b60daa2c90d948a718d9745ba6b3525389f020e2bba536f8c81f8c9b1d9e01e79bac0649b2203fb95ec192ef1508418716666025b60e29cd6ded65cb2426c30b4053ef53fbb0c6d9ba20618b084748df76381ba9635b666d601364d63dc700badefdb67fdb45f3f39cec7a0ec33d993d9fb7309d5140585debac2faa807cd9c14d23888d98ec787d133ee012b0495bba505b00693f9cdd5ec7724dddab4c19bb8d429a3acc5ccc1b5269b788df177264cd1d04e57dc402c78a8e628bb57458062ff9e406b654dc08845a7b7556fc6ff484ab0c77ee2e5bd2f39a4422ce693a75c9bb63da1af152081bebeb5420f9dcb74857a16fd45c6da8795201f328241ca81fc826de5fdb9fcb7609f1328c6edb6f5084ec6e767a36721b09642511925dd10e303222b2ddc955fd3fe532d90a62481fe282ec6400abb5b812acf77e3bdb9967bfb3c3c6d185da8f25f6ea445ac15df1e36cd698d28b6848454b86782e5c1f55293c9f29b38094daec8a601b0143af6d0982a5e1566bccb0c2cbbfd2af00822df71d80db1093781db73eef9a80b3c5785818273965a839bbb0a6283996719bf2b381cd125fa8d37dce2cb60b9bb23dec3a8df42f7b6a4299a0d4ad8b433edd620a1deb35d063fd9bd7d5abc31d4c116df07b64b9fc6f5d5ac3d02a6f9d162bfd5f48225025f502
#
# This script is Copyright (C) 2004-2025 and is owned by Tenable, Inc. or an Affiliate thereof.
#
# This script is released under the Tenable Subscription License and
# may not be used from within scripts released under another license
# without authorization from Tenable, Inc.
#
# See the following licenses for details:
#
# http://static.tenable.com/prod_docs/Nessus_6_SLA_and_Subscription_Agreement.pdf
#
# @PROFESSIONALFEED@
# $Revision: 1.10 $
# $Date: 2025/01/06 $
#
# This .audit file looks for source code.
#
# The first rule parses .NET config files looking for database
# credentials stored in plain text
#
# The second rule is a stub rule that could be extended to include
# more banned functions from the list at
# http://msdn2.microsoft.com/en-us/library/bb288454.aspx
#
# This file should be customized for your local environment
# with keywords that identify your source code.
#
#<ui_metadata>
#<display_name>TNS File Analysis - Source Code Errors</display_name>
#<spec>
#  <type>TNS</type>
#  <name>File Analysis - Source Code Errors</name>
#  <version>1.0.0</version>
#</spec>
#<labels>filecontent,content,source,code,errors,agent</labels>
#</ui_metadata>

<check_type:"FileContent">

#
# C and .NET checks
#

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a .NET config file is storing database account information in plaintext."
  file_extension : "config"
  regex          : "(([iI][dD]=.*;[pP][aA][sS]{2}[wW][oO][rR][dD]=.*))"
  expect         : "Data Source="
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a .NET config file has set the Trust level to Full."
  file_extension : "config"
  regex          : '((<[tT]rust [lL]evel=\"Full\".*/>))'
  expect         : "Full"
# # <trust level="Full"/>
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function - cpy"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((strcpy|wcscpy|_tcscpy|_mbscpy|StrCpy|StrCpyA|StrCpyW))"
  expect         : "strcpy" | "wcscpy" | "_tcscpy" | "_mbscpy" | "StrCpy" | "StrCpyA" | "StrCpyW"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function - cpy and cat"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((_tccpy|_mbccpy|strcat|wcscat|_tcscat|_mbscat|StrCat|StrCatA|StrCatW))"
  expect         : "_tccpy" | "_mbccpy" | "strcat" | "wcscat" | "_tcscat" | "_mbscat" | "StrCat"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function - cat"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((lstrcat|lstrcatA|lstrcatW|StrCatBuffW|StrCatBuff|StrCatBuffA|StrCatChainW|strcatA|strcatW|_tccat|_mbccat))"
  expect         : "strcat" | "StrCat" | "_tccat" | "_mbccat"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function - printf"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((wnsprintf|wnsprintfA|wnsprintfW|sprintfW|sprintfA|wsprintf|wsprintfW|wsprintfA|sprintf|swprintf|_stprintf|_snwprintf|_snprintf|_sntprintf|nsprintf))"
  expect         : "sprintf" | "_stprintf" | "_snwprintf" | "_snprintf" | "_sntprintf"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function - sprintf"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((wvsprintf|wvsprintfA|wvsprintfW|vsprintf|_vstprintf|vswprintf|_vsnprintf|_vsnwprintf|_vsntprintf|wvnsprintf|wvnsprintfA|wvnsprintfW))"
  expect         : "sprintf"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function - vnsprintf"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((_vsnprintf|_vsnwprintf|_vsntprintf|wvnsprintf|wvnsprintfA|wvnsprintfW))"
  expect         : "sprintf"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function - ncpy"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((strncpy|wcsncpy|_tcsncpy|_mbsncpy|_mbsnbcpy|StrCpyN|StrNCpy|strcpynA|StrNCpyA|StrNCpyW|lstrcpyn|lstrcpynA|lstrcpynW|_fstrncpy))"
  expect         : "strncpy" | "wcsncpy" | "sncpy" | "StrCpy" | "lstrcpyn" | "StrNCpy"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function - ncat"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((strncat|wcsncat|_tcsncat|_mbsncat|_mbsnbcat|StrCatN|StrNCat|StrNCatA|StrNCatW|lstrncat|lstrcatnA|lstrcatnW|lstrcatn|_fstrncat))"
  expect         : "strncat" | "sncat" | "snbcat" | "StrCatN" | "StrNCat" | "strcat"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function - tok and makepath"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((strtok|_tcstok|wcstok|_mbstok|Makepath|_tmakepath|_makepath|_wmakepath|_splitpath|_tsplitpath|_wsplitpath|scanf|wscanf|_tscanf|sscanf|swscanf|_stscanf))"
  expect         : "strto" | "cstok" | "bstok" | "Makepath" | "makepath" | "splitpath" | "scanf"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function - ito"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((snscanf|snwscanf|_sntscanf|_itoa|_itow|_i64toa|_i64tow|_ui64toa|_ui64tot|_ui64tow|_ultoa|_ultot|_ultow))"
  expect         : "scanf" | "_ito" | "_i64to" | "_ui64to" | "_ulto"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function gets"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((gets|_getts|_gettws|IsBadWritePtr|IsBadHugeWritePtr|IsBadReadPtr|IsBadHugeReadPtr|IsBadCodePtr|IsBadStringPtr))"
  expect         : "gets" | "_gettws" | "IsBad"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function - charto and oemto"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((CharToOem|CharToOemA|CharToOemW|OemToChar|OemToCharA|OemToCharW|CharToOemBuffA|CharToOemBuffW|alloca|_alloca))"
  expect         : "CharTo" | "OemTo" | "alloca"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Determine if a C/C++ source code file is using a Microsoft SDL banned function - len"
  file_extension : "c" | "cpp" | "cs"
  regex          : "((strlen|wcslen|_mbslen|_mbstrlen|StrLen|lstrlen))"
  expect         : "len" | "Len"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential strcpy buffer overflow in C/C++ code."
  reference      : "800-53|SI-16,800-53r5|SI-16,CSF2.0|PR.DS-10,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-16"
  file_extension : "c" | "cpp"
  regex          : "((strcpy\(.*,argv\[.*\]\)))"
  expect         : "include"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential strpy buffer overflow in C/C++ code."
  reference      : "800-53|SI-16,800-53r5|SI-16,CSF2.0|PR.DS-10,GDPR|32.1.b,HIPAA|164.306(a)(1),ITSG-33|SI-16"
  file_extension : "c" | "cpp"
  regex          : "((strcpy\((buffer|buf),str\)))"
  expect         : "include"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential SQL injection in Microsoft C* code."
  file_extension : "c" | "cpp" | "cs" | "asp" | "aspx"
  regex          : "(([sS][eE][lL][eE][cC][tT].*[fF][rR][oO][mM].*Request\.([fF]orm|[cC]ookies)[ ]+\[))"
  expect         : "Request"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential injection vulnerability via unsanitized user supplied data - direct write of request"
  file_extension : "cs" | "asp" | "aspx"
  regex          : "((Response.Write[ ]*\(Request\.))"
  expect         : "Response.Write"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential injection vulnerability via unsanitized user supplied data - direct link of request"
  file_extension : "asp" | "aspx"
  regex          : "(([aA] [hH][rR][eE][fF][ ]*=[ ]*<%=[ ]*[rR]equest\.[^%]*%>))"
  expect         : "equest."
# <a href=<%=request.servervariables("http_referer")%>
  max_size       : "1M"
</item>

#
# PHP Coding Errors
#

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential command injection via user request in PHP code."
  file_extension : "php"
  regex          : "(((system|popen|shell_exec|exec|eval)[ ]*\(\$_(GET|POST|COOKIE|REQUEST|SESSION).*\)))"
  expect         : "<?php"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential SQL Injection via mySQL user request in PHP code."
  file_extension : "php"
  regex          : "((mysql_query\(.*\$_(GET|POST|COOKIE|SESSION|REQUEST)))"
  expect         : "<?php"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential SQL injection via SQL query in PHP code."
  file_extension : "php"
  regex          : "((WHERE .=\$_(GET|POST|SESSION|COOKIE|REQUEST)))"
  expect         : "<?php"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential XSS vulnerability via unsanitized user supplied data in PHP code."
  file_extension : "php"
  regex          : "(((echo|print).*\$_(GET|POST|COOKIE|SESSION|REQUEST)))"
  expect         : "<?php"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential injection via user-supplied HTTP headers in PHP code."
  file_extension : "php"
  regex          : '(((echo|print).*\$_SERVER[ ]*\[\"HTTP_(USER_AGENT|REFERER)))'
  expect         : "<?php"
# <?php echo $_SERVER["HTTP_USER_AGENT"];?>
  max_size       : "1M"
</item>

#
# Java Coding Errors
#

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential SQL injection via SQL query in Java code - SQL"
  file_extension : "java"
  regex          : '(([sS][eE][lL][eE][cC][tT].*[fF][rR][oO][mM].*request\.getParameter[ ]*\(\"))'
  expect         : "request.getParameter"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential SQL injection via SQL query in Java code - execute"
  file_extension : "java"
  regex          : '((executeQuery[ ]*\(.*request\.getParameter[ ]*\(\"))'
  expect         : "request.getParameter"
  max_size       : "1M"
</item>

<item>
  type           : FILE_CONTENT_CHECK
  description    : "Potential XSS vulnerability via unsanitized user data in Java code."
  file_extension : "java"
  regex          : '((out\.println[ ]*\(.*request\.getParameter[ ]*\(\"))'
  expect         : "out.println"
  max_size       : "1M"
</item>

</check_type>
