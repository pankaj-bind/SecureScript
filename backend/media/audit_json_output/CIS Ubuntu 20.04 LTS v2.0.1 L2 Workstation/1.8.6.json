{
  "type": "CMD_EXEC",
  "description": "1.8.6 Ensure GDM automatic mounting of removable media is disabled",
  "info": "By default GNOME automatically mounts removable media when inserted as a convenience to the user.\n\nWith automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves.",
  "solution": "\"Run the following script to disable automatic mounting of media for all GNOME users:\n\n#!/usr/bin/env bash\n\n{\n   l_pkgoutput=\\\"\\\" l_output=\\\"\\\" l_output2=\\\"\\\"\n   l_gpname=\\\"local\\\" # Set to desired dconf profile name (defaule is local)\n   # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is Not Applicable\\n\n   # determine system's package manager\n   if command -v dpkg-query > /dev/null 2>&1; then\n      l_pq=\\\"dpkg-query -W\\\"\n   elif command -v rpm > /dev/null 2>&1; then\n      l_pq=\\\"rpm -q\\\"\n   fi\n   # Check if GDM is installed\n   l_pcl=\\\"gdm gdm3\\\" # Space seporated list of packages to check\n   for l_pn in $l_pcl; do\n      $l_pq \\\"$l_pn\\\" > /dev/null 2>&1 && l_pkgoutput=\\\"$l_pkgoutput\\n - Package: \\\\\\\"$l_pn\\\\\\\" exists on the system\\n - checking configuration\\\"\n   done\n   echo -e \\\"$l_packageout\\\"\n   # Check configuration (If applicable)\n   if [ -n \\\"$l_pkgoutput\\\" ]; then\n      echo -e \\\"$l_pkgoutput\\\"\n      # Look for existing settings and set variables if they exist\n      l_kfile=\\\"$(grep -Prils -- '^\\h*automount\\b' /etc/dconf/db/*.d)\\\"\n      l_kfile2=\\\"$(grep -Prils -- '^\\h*automount-open\\b' /etc/dconf/db/*.d)\\\"\n      # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n      if [ -f \\\"$l_kfile\\\" ]; then\n         l_gpname=\\\"$(awk -F\\/ '{split($(NF-1),a,\\\".\\\");print a[1]}' <<< \\\"$l_kfile\\\")\\\"\n         echo \\\" - updating dconf profile name to \\\\\\\"$l_gpname\\\\\\\"\\\"\n      elif [ -f \\\"$l_kfile2\\\" ]; then\n         l_gpname=\\\"$(awk -F\\/ '{split($(NF-1),a,\\\".\\\");print a[1]}' <<< \\\"$l_kfile2\\\")\\\"\n         echo \\\" - updating dconf profile name to \\\\\\\"$l_gpname\\\\\\\"\\\"\n      fi\n      # check for consistency (Clean up configuration if needed)\n      if [ -f \\\"$l_kfile\\\" ] && [ \\\"$(awk -F\\/ '{split($(NF-1),a,\\\".\\\");print a[1]}' <<< \\\"$l_kfile\\\")\\\" != \\\"$l_gpname\\\" ]; then\n         sed -ri \\\"/^\\s*automount\\s*=/s/^/# /\\\" \\\"$l_kfile\\\"\n         l_kfile=\\\"/etc/dconf/db/$l_gpname.d/00-media-automount\\\"\n      fi\n      if [ -f \\\"$l_kfile2\\\" ] && [ \\\"$(awk -F\\/ '{split($(NF-1),a,\\\".\\\");print a[1]}' <<< \\\"$l_kfile2\\\")\\\" != \\\"$l_gpname\\\" ]; then\n         sed -ri \\\"/^\\s*automount-open\\s*=/s/^/# /\\\" \\\"$l_kfile2\\\"\n      fi\n      [ -z \\\"$l_kfile\\\" ] && l_kfile=\\\"/etc/dconf/db/$l_gpname.d/00-media-automount\\\"\n      # Check if profile file exists\n      if grep -Pq -- \\\"^\\h*system-db:$l_gpname\\b\\\" /etc/dconf/profile/*; then\n         echo -e \\\"\\n - dconf database profile exists in: \\\\\\\"$(grep -Pl -- \\\"^\\h*system-db:$l_gpname\\b\\\" /etc/dconf/profile/*)\\\\\\\"\\\"\n      else\n         [ ! -f \\\"/etc/dconf/profile/user\\\" ] && l_gpfile=\\\"/etc/dconf/profile/user\\\" || l_gpfile=\\\"/etc/dconf/profile/user2\\\"\n         echo -e \\\" - creating dconf database profile\\\"\n         {\n            echo -e \\\"\\nuser-db:user\\\"\n            echo \\\"system-db:$l_gpname\\\"\n         } >> \\\"$l_gpfile\\\"\n      fi\n      # create dconf directory if it doesn't exists\n      l_gpdir=\\\"/etc/dconf/db/$l_gpname.d\\\"\n      if [ -d \\\"$l_gpdir\\\" ]; then\n         echo \\\" - The dconf database directory \\\\\\\"$l_gpdir\\\\\\\" exists\\\"\n      else\n         echo \\\" - creating dconf database directory \\\\\\\"$l_gpdir\\\\\\\"\\\"\n         mkdir \\\"$l_gpdir\\\"\n      fi\n      # check automount-open setting\n      if grep -Pqs -- '^\\h*automount-open\\h*=\\h*false\\b' \\\"$l_kfile\\\"; then\n         echo \\\" - \\\\\\\"automount-open\\\\\\\" is set to false in: \\\\\\\"$l_kfile\\\\\\\"\\\"\n      else\n         echo \\\" - creating \\\\\\\"automount-open\\\\\\\" entry in \\\\\\\"$l_kfile\\\\\\\"\\\"\n         ! grep -Psq -- '\\^\\h*\\[org\\/gnome\\/desktop\\/media-handling\\]\\b' \\\"$l_kfile\\\" && echo '[org/gnome/desktop/media-handling]' >> \\\"$l_kfile\\\"\n         sed -ri '/^\\s*\\[org\\/gnome\\/desktop\\/media-handling\\]/a \\\\nautomount-open=false' \\\"$l_kfile\\\"\n      fi\n      # check automount setting\n      if grep -Pqs -- '^\\h*automount\\h*=\\h*false\\b' \\\"$l_kfile\\\"; then\n         echo \\\" - \\\\\\\"automount\\\\\\\" is set to false in: \\\\\\\"$l_kfile\\\\\\\"\\\"\n      else\n         echo \\\" - creating \\\\\\\"automount\\\\\\\" entry in \\\\\\\"$l_kfile\\\\\\\"\\\"\n         ! grep -Psq -- '\\^\\h*\\[org\\/gnome\\/desktop\\/media-handling\\]\\b' \\\"$l_kfile\\\" && echo '[org/gnome/desktop/media-handling]' >> \\\"$l_kfile\\\"\n         sed -ri '/^\\s*\\[org\\/gnome\\/desktop\\/media-handling\\]/a \\\\nautomount=false' \\\"$l_kfile\\\"\n      fi\n   else\n      echo -e \\\"\\n - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\\\"\n   fi\n   # update dconf database\n   dconf update\n}\n\nOR\n\nRun the following command to uninstall the GNOME desktop Manager package:\n\n# apt purge gdm3",
  "Impact": "The use of portable hard drives is very common for workstation users. If your organization allows the use of portable storage or media on workstations and physical access controls to workstations is considered adequate there is little value add in turning off automounting.\"",
  "reference": "800-171|3.8.7,800-53|MP-7,800-53r5|MP-7,CN-L3|8.5.4.1(c),CSCv7|8.5,CSCv8|10.3,CSF|PR.PT-2,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.8.3.1,ISO/IEC-27001|A.8.3.3,LEVEL|2A,NESA|T1.4.1",
  "see_also": "https://workbench.cisecurity.org/benchmarks/13775",
  "cmd": "#!/bin/bash\n\n{\n   l_pkgoutput=\\\"\\\" l_output=\\\"\\\" l_output2=\\\"\\\"\n   # Check if GNOME Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\\\\n\n   # determine system's package manager\n   if command -v dpkg-query > /dev/null 2>&1; then\n      l_pq=\\\"dpkg-query -s\\\"\n   elif command -v rpm > /dev/null 2>&1; then\n      l_pq=\\\"rpm -q\\\"\n   fi\n   # Check if GDM is installed\n   l_pcl=\\\"gdm gdm3\\\" # Space seporated list of packages to check\n   for l_pn in $l_pcl; do\n      $l_pq \\\"$l_pn\\\" > /dev/null 2>&1 && l_pkgoutput=\\\"$l_pkgoutput\\\\n - Package: \\\\\\\"$l_pn\\\\\\\" exists on the system\\\\n - checking configuration\\\"\n   done\n   # Check configuration (If applicable)\n   if [ -n \\\"$l_pkgoutput\\\" ]; then\n      echo -e \\\"$l_pkgoutput\\\"\n      # Look for existing settings and set variables if they exist\n      l_kfile=\\\"$(grep -Prils -- '^\\\\h*automount\\\\b' /etc/dconf/db/*.d)\\\"\n      l_kfile2=\\\"$(grep -Prils -- '^\\\\h*automount-open\\\\b' /etc/dconf/db/*.d)\\\"\n      # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n      if [ -f \\\"$l_kfile\\\" ]; then\n         l_gpname=\\\"$(awk -F\\\\/ '{split($(NF-1),a,\\\".\\\");print a[1]}' <<< \\\"$l_kfile\\\")\\\"\n      elif [ -f \\\"$l_kfile2\\\" ]; then\n         l_gpname=\\\"$(awk -F\\\\/ '{split($(NF-1),a,\\\".\\\");print a[1]}' <<< \\\"$l_kfile2\\\")\\\"\n      fi\n      # If the profile name exist, continue checks\n      if [ -n \\\"$l_gpname\\\" ]; then\n         l_gpdir=\\\"/etc/dconf/db/$l_gpname.d\\\"\n         # Check if profile file exists\n         if grep -Pq -- \\\"^\\\\h*system-db:$l_gpname\\\\b\\\" /etc/dconf/profile/*; then\n            l_output=\\\"$l_output\\\\n - dconf database profile file \\\\\\\"$(grep -Pl -- \\\"^\\\\h*system-db:$l_gpname\\\\b\\\" /etc/dconf/profile/*)\\\\\\\" exists\\\"\n         else\n            l_output2=\\\"$l_output2\\\\n - dconf database profile isn't set\\\"\n         fi\n         # Check if the dconf database file exists\n         if [ -f \\\"/etc/dconf/db/$l_gpname\\\" ]; then\n            l_output=\\\"$l_output\\\\n - The dconf database \\\\\\\"$l_gpname\\\\\\\" exists\\\"\n         else\n            l_output2=\\\"$l_output2\\\\n - The dconf database \\\\\\\"$l_gpname\\\\\\\" doesn't exist\\\"\n         fi\n         # check if the dconf database directory exists\n         if [ -d \\\"$l_gpdir\\\" ]; then\n            l_output=\\\"$l_output\\\\n - The dconf directory \\\\\\\"$l_gpdir\\\\\\\" exitst\\\"\n         else\n            l_output2=\\\"$l_output2\\\\n - The dconf directory \\\\\\\"$l_gpdir\\\\\\\" doesn't exist\\\"\n         fi\n         # check automount setting\n         if grep -Pqrs -- '^\\\\h*automount\\\\h*=\\\\h*false\\\\b' \\\"$l_kfile\\\"; then\n            l_output=\\\"$l_output\\\\n - \\\\\\\"automount\\\\\\\" is set to false in: \\\\\\\"$l_kfile\\\\\\\"\\\"\n         else\n            l_output2=\\\"$l_output2\\\\n - \\\\\\\"automount\\\\\\\" is not set correctly\\\"\n         fi\n         # check automount-open setting\n         if grep -Pqs -- '^\\\\h*automount-open\\\\h*=\\\\h*false\\\\b' \\\"$l_kfile2\\\"; then\n            l_output=\\\"$l_output\\\\n - \\\\\\\"automount-open\\\\\\\" is set to false in: \\\\\\\"$l_kfile2\\\\\\\"\\\"\n         else\n            l_output2=\\\"$l_output2\\\\n - \\\\\\\"automount-open\\\\\\\" is not set correctly\\\"\n         fi\n      else\n         # Setings don't exist. Nothing further to check\n         l_output2=\\\"$l_output2\\\\n - neither \\\\\\\"automount\\\\\\\" or \\\\\\\"automount-open\\\\\\\" is set\\\"\n      fi\n   else\n      l_output=\\\"$l_output\\\\n - GNOME Desktop Manager package is not installed on the system\\\\n  - Recommendation is not applicable\\\"\n   fi\n   # Report results. If no failures output in l_output2, we pass\n   if [ -z \\\"$l_output2\\\" ]; then\n      echo -e \\\"\\\\n- Audit Result:\\\\n  ** PASS **\\\\n$l_output\\\\n\\\"\n   else\n      echo -e \\\"\\\\n- Audit Result:\\\\n  ** FAIL **\\\\n - Reason(s) for audit failure:\\\\n$l_output2\\\\n\\\"\n      [ -n \\\"$l_output\\\" ] && echo -e \\\"\\\\n- Correctly set:\\\\n$l_output\\\\n\\\"\n   fi\n}",
  "expect": "(?i)^[\\\\s]*\\\\**[\\\\s]*pass:?[\\\\s]*\\\\**$"
}