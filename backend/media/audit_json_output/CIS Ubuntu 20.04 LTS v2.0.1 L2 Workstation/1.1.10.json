{
  "type": "CMD_EXEC",
  "description": "1.1.10 Disable USB Storage",
  "info": "USB storage provides a means to transfer and store files insuring persistence and availability of the files independent of network connection status. Its popularity and utility has led to USB-based malware being a simple and common means for network infiltration and a first step to establishing a persistent threat within a networked environment.\n\nRestricting USB access on the system will decrease the physical attack surface for a device and diminish the possible vectors to introduce malware.",
  "solution": "\"Run the following script to disable the cramfs module:\n\nIf the module is available in the running kernel:\n\n - Create a file with install usb-storage /bin/false in the /etc/modprobe.d/ directory\n - Create a file with blacklist usb-storage in the /etc/modprobe.d/ directory\n - Unload usb-storage from the kernel\n\nIf available in ANY installed kernel:\n\n - Create a file with blacklist usb-storage in the /etc/modprobe.d/ directory\n\nIf the kernel module is not available on the system:\n\n - No remediation is necessary\n\n#!/usr/bin/env bash\n\n{\n   l_mname=\\\"usb-storage\\\" # set module name\n   l_mtype=\\\"drivers\\\" # set module type\n   l_mpath=\\\"/lib/modules/**/kernel/$l_mtype\\\"\n   l_mpname=\\\"$(tr '-' '_' <<< \\\"$l_mname\\\")\\\"\n   l_mndir=\\\"$(tr '-' '/' <<< \\\"$l_mname\\\")\\\"\n\n   module_loadable_fix()\n   {\n      # If the module is currently loadable, add \\\"install {MODULE_NAME} /bin/false\\\" to a file in \\\"/etc/modprobe.d\\\"\n      l_loadable=\\\"$(modprobe -n -v \\\"$l_mname\\\")\\\"\n      [ \\\"$(wc -l <<< \\\"$l_loadable\\\")\\\" -gt \\\"1\\\" ] && l_loadable=\\\"$(grep -P -- \\\"(^\\h*install|\\b$l_mname)\\b\\\" <<< \\\"$l_loadable\\\")\\\"\n      if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \\\"$l_loadable\\\"; then\n         echo -e \\\"\\n - setting module: \\\\\\\"$l_mname\\\\\\\" to be not loadable\\\"\n         echo -e \\\"install $l_mname /bin/false\\\" >> /etc/modprobe.d/\\\"$l_mpname\\\".conf\n      fi\n   }\n   module_loaded_fix()\n   {\n      # If the module is currently loaded, unload the module\n      if lsmod | grep \\\"$l_mname\\\" > /dev/null 2>&1; then\n         echo -e \\\"\\n - unloading module \\\\\\\"$l_mname\\\\\\\"\\\"\n         modprobe -r \\\"$l_mname\\\"\n      fi\n   }\n   module_deny_fix()\n   {\n      # If the module isn't deny listed, denylist the module\n      if ! modprobe --showconfig | grep -Pq -- \\\"^\\h*blacklist\\h+$l_mpname\\b\\\"; then\n         echo -e \\\"\\n - deny listing \\\\\\\"$l_mname\\\\\\\"\\\"\n         echo -e \\\"blacklist $l_mname\\\" >> /etc/modprobe.d/\\\"$l_mpname\\\".conf\n      fi\n   }\n   # Check if the module exists on the system\n   for l_mdir in $l_mpath; do\n      if [ -d \\\"$l_mdir/$l_mndir\\\" ] && [ -n \\\"$(ls -A $l_mdir/$l_mndir)\\\" ]; then\n         echo -e \\\"\\n - module: \\\\\\\"$l_mname\\\\\\\" exists in \\\\\\\"$l_mdir\\\\\\\"\\n - checking if disabled...\\\"\n         module_deny_fix\n         if [ \\\"$l_mdir\\\" = \\\"/lib/modules/$(uname -r)/kernel/$l_mtype\\\" ]; then\n            module_loadable_fix\n            module_loaded_fix\n         fi\n      else\n         echo -e \\\"\\n - module: \\\\\\\"$l_mname\\\\\\\" doesn't exist in \\\\\\\"$l_mdir\\\\\\\"\\n\\\"\n      fi\n   done\n   echo -e \\\"\\n - remediation of module: \\\\\\\"$l_mname\\\\\\\" complete\\n\\\"\n}",
  "Impact": "Disabling the usb-storage module will disable any usage of USB storage devices.\n\nIf requirements and local site policy allow the use of such devices, other solutions should be configured accordingly instead. One example of a commonly used solution is USBGuard\"",
  "reference": "800-171|3.8.7,800-53|MP-7,800-53r5|MP-7,CN-L3|8.5.4.1(c),CSCv7|8.5,CSCv7|13.7,CSCv8|10.3,CSF|PR.PT-2,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.8.3.1,ISO/IEC-27001|A.8.3.3,LEVEL|2A,NESA|T1.4.1",
  "see_also": "https://workbench.cisecurity.org/benchmarks/13775",
  "cmd": "#!/bin/bash\n\n{\n   l_output=\\\"\\\" l_output2=\\\"\\\" l_output3=\\\"\\\" l_dl=\\\"\\\" # Unset output variables\n   l_mname=\\\"usb-storage\\\" # set module name\n   l_mtype=\\\"drivers\\\" # set module type\n   l_searchloc=\\\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\\\"\n   l_mpath=\\\"/lib/modules/**/kernel/$l_mtype\\\"\n   l_mpname=\\\"$(tr '-' '_' <<< \\\"$l_mname\\\")\\\"\n   l_mndir=\\\"$(tr '-' '/' <<< \\\"$l_mname\\\")\\\"\n\n   module_loadable_chk()\n   {\n      # Check if the module is currently loadable\n      l_loadable=\\\"$(modprobe -n -v \\\"$l_mname\\\")\\\"\n      [ \\\"$(wc -l <<< \\\"$l_loadable\\\")\\\" -gt \\\"1\\\" ] && l_loadable=\\\"$(grep -P -- \\\"(^\\\\h*install|\\\\b$l_mname)\\\\b\\\" <<< \\\"$l_loadable\\\")\\\"\n      if grep -Pq -- '^\\\\h*install \\\\/bin\\\\/(true|false)' <<< \\\"$l_loadable\\\"; then\n         l_output=\\\"$l_output\\\\n - module: \\\\\\\"$l_mname\\\\\\\" is not loadable: \\\\\\\"$l_loadable\\\\\\\"\\\"\n      else\n         l_output2=\\\"$l_output2\\\\n - module: \\\\\\\"$l_mname\\\\\\\" is loadable: \\\\\\\"$l_loadable\\\\\\\"\\\"\n      fi\n   }\n   module_loaded_chk()\n   {\n      # Check if the module is currently loaded\n      if ! lsmod | grep \\\"$l_mname\\\" > /dev/null 2>&1; then\n         l_output=\\\"$l_output\\\\n - module: \\\\\\\"$l_mname\\\\\\\" is not loaded\\\"\n      else\n         l_output2=\\\"$l_output2\\\\n - module: \\\\\\\"$l_mname\\\\\\\" is loaded\\\"\n      fi\n   }\n   module_deny_chk()\n   {\n      # Check if the module is deny listed\n      l_dl=\\\"y\\\"\n      if modprobe --showconfig | grep -Pq -- '^\\\\h*blacklist\\\\h+'\\\"$l_mpname\\\"'\\\\b'; then\n         l_output=\\\"$l_output\\\\n - module: \\\\\\\"$l_mname\\\\\\\" is deny listed in: \\\\\\\"$(grep -Pls -- \\\"^\\\\h*blacklist\\\\h+$l_mname\\\\b\\\" $l_searchloc)\\\\\\\"\\\"\n      else\n         l_output2=\\\"$l_output2\\\\n - module: \\\\\\\"$l_mname\\\\\\\" is not deny listed\\\"\n      fi\n   }\n   # Check if the module exists on the system\n   for l_mdir in $l_mpath; do\n      if [ -d \\\"$l_mdir/$l_mndir\\\" ] && [ -n \\\"$(ls -A $l_mdir/$l_mndir)\\\" ]; then\n         l_output3=\\\"$l_output3\\\\n  - \\\\\\\"$l_mdir\\\\\\\"\\\"\n         [ \\\"$l_dl\\\" != \\\"y\\\" ] && module_deny_chk\n         if [ \\\"$l_mdir\\\" = \\\"/lib/modules/$(uname -r)/kernel/$l_mtype\\\" ]; then\n            module_loadable_chk\n            module_loaded_chk\n         fi\n      else\n         l_output=\\\"$l_output\\\\n - module: \\\\\\\"$l_mname\\\\\\\" doesn't exist in \\\\\\\"$l_mdir\\\\\\\"\\\"\n      fi\n   done\n   # Report results. If no failures output in l_output2, we pass\n   [ -n \\\"$l_output3\\\" ] && echo -e \\\"\\\\n\\\\n -- INFO --\\\\n - module: \\\\\\\"$l_mname\\\\\\\" exists in:$l_output3\\\"\n   if [ -z \\\"$l_output2\\\" ]; then\n      echo -e \\\"\\\\n- Audit Result:\\\\n  ** PASS **\\\\n$l_output\\\\n\\\"\n   else\n      echo -e \\\"\\\\n- Audit Result:\\\\n  ** FAIL **\\\\n - Reason(s) for audit failure:\\\\n$l_output2\\\\n\\\"\n      [ -n \\\"$l_output\\\" ] && echo -e \\\"\\\\n- Correctly set:\\\\n$l_output\\\\n\\\"\n   fi\n}",
  "expect": "(?i)^[\\\\s]*\\\\**[\\\\s]*pass:?[\\\\s]*\\\\**$"
}