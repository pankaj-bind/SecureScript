{
  "check_type": "CONDITIONAL",
  "condition": {
    "auto_status": "FAILED",
    "type": "AND",
    "rules": [
      {
        "type": "CMD_EXEC",
        "description": "/etc/audit/rules.d/*.rules",
        "cmd": "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs); [ -n \\\"${UID_MIN}\\\" ] && auditctl -l | awk  \\\"(/^ *-a *always,exit/||/^ *-a *exit,always/) &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) &&/ -F *auid>=${UID_MIN}/ &&/ -F *perm=x/ &&/ -F *path=\\\\/usr\\\\/bin\\\\/setfacl/ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/) \\\" | /bin/awk '{print} END {if (NR != 0) print \\\"pass\\\" ; else print \\\"fail\\\"}' || printf  \\\"ERROR: Variable 'UID_MIN' is unset. \\\\n \\\"",
        "expect": "(?i)^[\\\\s]*\\\\**[\\\\s]*pass:?[\\\\s]*\\\\**$"
      },
      {
        "type": "CMD_EXEC",
        "description": "auditctl",
        "cmd": "UID_MIN=$(awk '/^\\\\s*UID_MIN/{print $2}' /etc/login.defs); [ -n \\\"${UID_MIN}\\\" ] && awk  \\\"(/^ *-a *always,exit/||/^ *-a *exit,always/) &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) &&/ -F *auid>=${UID_MIN}/ &&/ -F *perm=x/ &&/ -F *path=\\\\/usr\\\\/bin\\\\/setfacl/ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/) \\\" /etc/audit/rules.d/*.rules | /bin/awk '{print} END {if (NR != 0) print \\\"pass\\\" ; else print \\\"fail\\\"}' || printf  \\\"ERROR: Variable 'UID_MIN' is unset. \\\\n \\\"",
        "expect": "(?i)^[\\\\s]*\\\\**[\\\\s]*pass:?[\\\\s]*\\\\**$"
      }
    ]
  },
  "then": {
    "report": {
      "description": "5.2.3.16 Ensure successful and unsuccessful attempts to use the setfacl command are recorded",
      "info": "The operating system must generate audit records for successful/unsuccessful uses of the setfacl command\n\nThis utility sets Access Control Lists (ACLs) of files and directories. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.\n\nAudit records can be generated from various components within the information system (e.g., module or policy filter).",
      "solution": "\"Create audit rules\n\nEdit or create a file in the /etc/audit/rules.d/ directory, ending inrules extension, with the relevant rules to monitor successful and unsuccessful attempts to use the setfacl command.\n\n64 Bit systems",
      "Example": "# {\n UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\n [ -n \\\"${UID_MIN}\\\" ] && printf \\\"\n-a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng\n\\\" >> /etc/audit/rules.d/50-perm_chng.rules || printf \\\"ERROR: Variable 'UID_MIN' is unset.\\n\\\"\n}\n\nLoad audit rules\n\nMerge and load the rules into active configuration:\n\n# augenrules --load\n\nCheck if reboot is required.\n\n# if [[ $(auditctl -s | grep \\\"enabled\\\") =~ \\\"2\\\" ]]; then printf \\\"Reboot required to load rules\\n\\\"; fi\n\n32 Bit systems\n\nFollow the same procedures as for 64 bit systems and ignore any entries with b64\"",
      "reference": "800-171|3.3.1,800-171|3.3.2,800-171|3.3.6,800-53|AU-2,800-53|AU-7,800-53|AU-12,800-53r5|AU-2,800-53r5|AU-7,800-53r5|AU-12,CN-L3|7.1.2.3(c),CN-L3|8.1.4.3(a),CSCv7|6.2,CSCv8|8.2,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,CSF|RS.AN-3,CSF2.0|DE.CM-01,CSF2.0|DE.CM-03,CSF2.0|DE.CM-09,CSF2.0|PR.PS-04,CSF2.0|RS.AN-03,CSF2.0|RS.AN-06,CSF2.0|RS.AN-07,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(b),ITSG-33|AU-2,ITSG-33|AU-7,ITSG-33|AU-12,LEVEL|2A,NESA|M1.2.2,NESA|M5.5.1,NIAv2|AM7,NIAv2|AM11a,NIAv2|AM11b,NIAv2|AM11c,NIAv2|AM11d,NIAv2|AM11e,NIAv2|SS30,NIAv2|VL8,PCI-DSSv3.2.1|10.1,QCSC-v1|3.2,QCSC-v1|6.2,QCSC-v1|8.2.1,QCSC-v1|10.2.1,QCSC-v1|11.2,QCSC-v1|13.2,SWIFT-CSCv1|6.4",
      "see_also": "https://workbench.cisecurity.org/benchmarks/13775",
      "show_output": true,
      "type": "PASSED"
    }
  }
}