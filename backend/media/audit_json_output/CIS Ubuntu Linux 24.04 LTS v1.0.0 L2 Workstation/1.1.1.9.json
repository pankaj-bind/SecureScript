{
  "type": "CMD_EXEC",
  "description": "1.1.1.9 Ensure usb-storage kernel module is not available",
  "info": "USB storage provides a means to transfer and store files ensuring persistence and availability of the files independent of network connection status. Its popularity and utility has led to USB-based malware being a simple and common means for network infiltration and a first step to establishing a persistent threat within a networked environment.\n\nRestricting USB access on the system will decrease the physical attack surface for a device and diminish the possible vectors to introduce malware.",
  "solution": "\"Run the following script to unload and disable the usb-storage module:\n\n- IF - the usb-storage kernel module is available in ANY installed kernel:\n\n - Create a file ending inconf with install usb-storage /bin/false in the /etc/modprobe.d/ directory\n - Create a file ending inconf with blacklist usb-storage in the /etc/modprobe.d/ directory\n - Run modprobe -r usb-storage 2>/dev/null; rmmod usb-storage 2>/dev/null to remove usb-storage from the kernel\n\n- IF - the usb-storage kernel module is not available on the system, or pre-compiled into the kernel, no remediation is necessary\n\n#!/usr/bin/env bash\n\n{\n   a_output2=() a_output3=() l_dl=\\\"\\\" l_mod_name=\\\"usb-storage\\\" l_mod_type=\\\"drivers\\\"\n   l_mod_path=\\\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\\\"\n   f_module_fix()\n   {\n      l_dl=\\\"y\\\" a_showconfig=()\n      while IFS= read -r l_showconfig; do\n         a_showconfig+=(\\\"$l_showconfig\\\")\n      done < <(modprobe --showconfig | grep -P -- '\\b(install|blacklist)\\h+'\\\"${l_mod_chk_name//-/_}\\\"'\\b')\n      if lsmod | grep \\\"$l_mod_chk_name\\\" &> /dev/null; then\n         a_output2+=(\\\" - unloading kernel module: \\\\\\\"$l_mod_name\\\\\\\"\\\")\n         modprobe -r \\\"$l_mod_chk_name\\\" 2>/dev/null; rmmod \\\"$l_mod_name\\\" 2>/dev/null\n      fi\n      if ! grep -Pq -- '\\binstall\\h+'\\\"${l_mod_chk_name//-/_}\\\"'\\h+(\\/usr)?\\/bin\\/(true|false)\\b' <<< \\\"${a_showconfig[*]}\\\"; then\n         a_output2+=(\\\" - setting kernel module: \\\\\\\"$l_mod_name\\\\\\\" to \\\\\\\"$(readlink -f /bin/false)\\\\\\\"\\\")\n         printf '%s\\n' \\\"install $l_mod_chk_name $(readlink -f /bin/false)\\\" >> /etc/modprobe.d/\\\"$l_mod_name\\\".conf\n      fi\n      if ! grep -Pq -- '\\bblacklist\\h+'\\\"${l_mod_chk_name//-/_}\\\"'\\b' <<< \\\"${a_showconfig[*]}\\\"; then\n         a_output2+=(\\\" - denylisting kernel module: \\\\\\\"$l_mod_name\\\\\\\"\\\")\n         printf '%s\\n' \\\"blacklist $l_mod_chk_name\\\" >> /etc/modprobe.d/\\\"$l_mod_name\\\".conf\n      fi\n   }\n   for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n      if [ -d \\\"$l_mod_base_directory/${l_mod_name/-/\\/}\\\" ] && [ -n \\\"$(ls -A \\\"$l_mod_base_directory/${l_mod_name/-/\\/}\\\")\\\" ]; then\n         a_output3+=(\\\" - \\\\\\\"$l_mod_base_directory\\\\\\\"\\\")\n         l_mod_chk_name=\\\"$l_mod_name\\\"\n         [[ \\\"$l_mod_name\\\" =~ overlay ]] && l_mod_chk_name=\\\"${l_mod_name::-2}\\\"\n         [ \\\"$l_dl\\\" != \\\"y\\\" ] && f_module_fix\n      else\n         printf '%s\\n' \\\" - kernel module: \\\\\\\"$l_mod_name\\\\\\\" doesn't exist in \\\\\\\"$l_mod_base_directory\\\\\\\"\\\"\n      fi\n   done\n   [ \\\"${#a_output3[@]}\\\" -gt 0 ] && printf '%s\\n' \\\"\\\" \\\" -- INFO --\\\" \\\" - module: \\\\\\\"$l_mod_name\\\\\\\" exists in:\\\" \\\"${a_output3[@]}\\\"\n   [ \\\"${#a_output2[@]}\\\" -gt 0 ] && printf '%s\\n' \\\"\\\" \\\"${a_output2[@]}\\\" || printf '%s\\n' \\\"\\\" \\\" - No changes needed\\\"\n   printf '%s\\n' \\\"\\\" \\\" - remediation of kernel module: \\\\\\\"$l_mod_name\\\\\\\" complete\\\" \\\"\\\"\n}",
  "Impact": "Disabling the usb-storage module will disable any usage of USB storage devices.\n\nIf requirements and local site policy allow the use of such devices, other solutions should be configured accordingly instead. One example of a commonly used solution is USBGuard\"",
  "reference": "800-171|3.8.7,800-53|MP-7,800-53r5|MP-7,CN-L3|8.5.4.1(c),CSCv7|13.7,CSCv8|10.3,CSF|PR.PT-2,GDPR|32.1.b,HIPAA|164.306(a)(1),HIPAA|164.312(a)(1),ISO/IEC-27001|A.8.3.1,ISO/IEC-27001|A.8.3.3,LEVEL|2A,NESA|T1.4.1",
  "see_also": "https://workbench.cisecurity.org/benchmarks/18959",
  "cmd": "#!/bin/bash\n\n{\n   l_output3=\\\"\\\" l_dl=\\\"\\\" # clear variables\n   unset a_output; unset a_output2 # unset arrays\n   l_mod_name=\\\"usb-storage\\\" # set module name\n   l_mod_type=\\\"drivers\\\" # set module type\n   l_mod_path=\\\"$(readlink -f /lib/modules/**/kernel/$l_mod_type | sort -u)\\\"\n   f_module_chk()\n   {\n      l_dl=\\\"y\\\" # Set to ignore duplicate checks\n      a_showconfig=() # Create array with modprobe output\n      while IFS= read -r l_showconfig; do\n         a_showconfig+=(\\\"$l_showconfig\\\")\n      done < <(modprobe --showconfig | grep -P -- '\\\\b(install|blacklist)\\\\h+'\\\"${l_mod_name//-/_}\\\"'\\\\b')\n      if ! lsmod | grep \\\"$l_mod_name\\\" &> /dev/null; then # Check if the module is currently loaded\n         a_output+=(\\\"  - kernel module: \\\\\\\"$l_mod_name\\\\\\\" is not loaded\\\")\n      else\n         a_output2+=(\\\"  - kernel module: \\\\\\\"$l_mod_name\\\\\\\" is loaded\\\")\n      fi\n      if grep -Pq -- '\\\\binstall\\\\h+'\\\"${l_mod_name//-/_}\\\"'\\\\h+\\\\/bin\\\\/(true|false)\\\\b' <<< \\\"${a_showconfig[*]}\\\"; then\n         a_output+=(\\\"  - kernel module: \\\\\\\"$l_mod_name\\\\\\\" is not loadable\\\")\n      else\n         a_output2+=(\\\"  - kernel module: \\\\\\\"$l_mod_name\\\\\\\" is loadable\\\")\n      fi\n      if grep -Pq -- '\\\\bblacklist\\\\h+'\\\"${l_mod_name//-/_}\\\"'\\\\b' <<< \\\"${a_showconfig[*]}\\\"; then\n         a_output+=(\\\"  - kernel module: \\\\\\\"$l_mod_name\\\\\\\" is deny listed\\\")\n      else\n         a_output2+=(\\\"  - kernel module: \\\\\\\"$l_mod_name\\\\\\\" is not deny listed\\\")\n      fi\n   }\n   for l_mod_base_directory in $l_mod_path; do # Check if the module exists on the system\n      if [ -d \\\"$l_mod_base_directory/${l_mod_name/-/\\\\/}\\\" ] && [ -n \\\"$(ls -A $l_mod_base_directory/${l_mod_name/-/\\\\/})\\\" ]; then\n         l_output3=\\\"$l_output3\\\\n  - \\\\\\\"$l_mod_base_directory\\\\\\\"\\\"\n         [[ \\\"$l_mod_name\\\" =~ overlay ]] && l_mod_name=\\\"${l_mod_name::-2}\\\"\n         [ \\\"$l_dl\\\" != \\\"y\\\" ] && f_module_chk\n      else\n         a_output+=(\\\" - kernel module: \\\\\\\"$l_mod_name\\\\\\\" doesn't exist in \\\\\\\"$l_mod_base_directory\\\\\\\"\\\")\n      fi\n   done\n   [ -n \\\"$l_output3\\\" ] && echo -e \\\"\\\\n\\\\n -- INFO --\\\\n - module: \\\\\\\"$l_mod_name\\\\\\\" exists in:$l_output3\\\"\n   if [ \\\"${#a_output2[@]}\\\" -le 0 ]; then\n      printf '%s\\\\n' \\\"\\\" \\\"- Audit Result:\\\" \\\"  ** PASS **\\\" \\\"${a_output[@]}\\\"\n   else\n      printf '%s\\\\n' \\\"\\\" \\\"- Audit Result:\\\" \\\"  ** FAIL **\\\" \\\" - Reason(s) for audit failure:\\\" \\\"${a_output2[@]}\\\"\n      [ \\\"${#a_output[@]}\\\" -gt 0 ] && printf '%s\\\\n' \\\"- Correctly set:\\\" \\\"${a_output[@]}\\\"\n   fi\n}",
  "expect": "(?i)^[\\\\s]*\\\\**[\\\\s]*pass:?[\\\\s]*\\\\**$"
}